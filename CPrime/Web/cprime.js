// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 10496;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,9gcAADUAAAD5BwAANgAAAPwHAAA3AAAABQgAADgAAAAICAAAOQAAAAsIAAA6AAAADggAADsAAAD/BwAAPAAAAAIIAAA9AAAAEQgAAD4AAAAUCAAAPwAAABcIAABAAAAAGggAAEEAAAD3DQAAQgAAACEIAABDAAAAJAgAAEQAAAD6DQAARQAAACcIAABGAAAAKggAAEcAAAAtCAAASAAAADAIAABJAAAAMwgAAEoAAAA2CAAASwAAADkIAABMAAAAPAgAAE0AAAA/CAAATgAAAP0NAABRAAAARwgAAFAAAABDCAAATwAAAP8FAAArAAAApwUAAC0AAADWBgAAGwAAANgGAAAcAAAA3gUAADEAAACpBQAAMwAAADYbAAAiAAAA0gYAABkAAACfBQAAHQAAANoGAAAeAAAA3AYAACAAAAD4BgAANAAAAMoGAAAUAAAA0AYAABgAAADkBgAAJgAAAOgGAAAoAAAA8AYAAC4AAAD2BgAAMgAAAOoGAAApAAAA4AYAACQAAADiBgAAJQAAAOYGAAAnAAAApQUAAB8AAADOBgAAFwAAAOwGAAAqAAAA+gYAAFMAAAD/BgAAVAAAAAUHAABVAAAACgcAAFYAAAAPBwAAVwAAABUHAABYAAAAHgcAAFkAAAAmBwAAWgAAACkHAABbAAAAMAcAAFwAAAA1BwAAXQAAADoHAABeAAAAQQcAAF8AAABHBwAAYAAAAEsHAABhAAAAUAcAAGIAAAACDgAAfwAAAAkOAACAAAAAEg4AAIEAAABTBwAAYwAAAFcHAABkAAAAXAcAAGUAAABjBwAAZgAAAGsHAABnAAAAcwcAAGgAAAB7BwAAaQAAAIUHAABqAAAAIA4AAH0AAACOBwAAawAAAJUHAABsAAAAmwcAAG0AAACiBwAAbgAAAKkHAABvAAAAsAcAAHAAAAC3BwAAcQAAAL4HAAByAAAAxgcAAHMAAADMBwAAdAAAANMHAAB1AAAA3AcAAHYAAADnBwAAdwAAAPAHAAB4AAAAKQ4AAIMAAAAyDgAAhgAAADsOAAB8AAAA4QcAAHoAAABDDgAAewAAAEwOAACEAAAAVQ4AAIUAAABgDgAAggAAAGoOAAB+AAAAeQ4AAHkAAACHDgAAhwAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAAAAAAAAAAAAAAAAAABkAAAAAAAAAAEAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAKwDAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAP8kAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCAAKgAgAAoALABdAH0AZXhwcjEAZXhwcjIAZXhwcjMAZXhwcgAiAFwiACJ0eXBlIjoiYXNtLXN0YXRlbWVudCIAewBsAHIAbC1leHByAHItZXhwcgBtLWV4cHIAaW5kZXgAWwBhc3NpZ25tZW50LWV4cHJlc3Npb24ATm9uZQBCb2YARW9mAExJTkVfQ09NTUVOVABDT01NRU5UAExJVEVSQUxTVFIASURFTlRJRklFUgBTUEFDRVMAVEtfREVDSU1BTF9JTlRFR0VSAFRLX0hFWF9JTlRFR0VSAFRLX0ZMT0FUX05VTUJFUgBCUkVBS0xJTkUAVEtfQkFDS1NMQVNIQlJFQUtMSU5FAFBSRVBST0NFU1NPUgBDSEFSQUNURVJfVEFCVUxBVElPTgAhACMAJAAlACYAJwAoACkAKwAtAC8AOgA7ADwAPQA+AD8AQABcAF4AXwBgAHwAfgBhdXRvAGJyZWFrAGNhc2UAY2hhcgBjb25zdABjb250aW51ZQBkZWZhdWx0AGRvAGRvdWJsZQBlbHNlAGVudW0AZXh0ZXJuAGZsb2F0AGZvcgBnb3RvAGlmAGludABsb25nAF9faW50OABfX2ludDE2AF9faW50MzIAX19pbnQ2NABfX3djaGFyX3QAcmVnaXN0ZXIAcmV0dXJuAHNob3J0AHNpZ25lZABzaXplb2YAc3RhdGljAHN0cnVjdABzd2l0Y2gAdHlwZWRlZgB1bmlvbgBfdW5pb24AdW5zaWduZWQAdm9pZABfQm9vbAB2b2xhdGlsZQB3aGlsZQAtPgArKwAtLQA9PQAhPQA8PAA+PgA8PQA+PQAmJgB8fAAqPQAvPQAvJT0AKz0ALT0AXj0AfD0AIyMAPDoAOj4APCUAJT4AJToALi4uAD4+PQA8PD0ALyU6LyU6AFRLX1BSRV9JTkNMVURFAFRLX1BSRV9ERUZJTkUAVEtfTUFDUk9fQ0FMTABUS19NQUNST19FT0YAVEtfRklMRV9FT0YAPz8/AGZhbHNlAEdlbmVyYXRlZFxvdXQuYwBCYXNpY1NjYW5uZXJfTmV4dAANCgBcCgBpbnZhbGlkIGNoYXIsIHNjYW5uZXIAcABpZABzd2l0Y2ggKCRwLT4kaWQpCnsKAHR5cGUAc3VmZml4AHZhbHVlAGFyZ3MAIGNhc2UgJHZhbHVlOgogICR0eXBlCF8kc3VmZml4KChzdHJ1Y3QgJHR5cGUqKSRhcmdzKTsKIGJyZWFrOwoAIGNhc2UgJHZhbHVlOgogICR0eXBlCF8kc3VmZml4KCgkdHlwZSopJGFyZ3MpOwogYnJlYWs7CgAgZGVmYXVsdDoKIGJyZWFrOwp9CgAlcyAqcCA9ICglcyopICVzKHNpemVvZiAqIHApOwBJbml0ACVzX0luaXQocAApOwoAcmV0dXJuIHA7AGZvciAoaW50IGkgPSAwOyBpIDwgJXM7IGkrKykAc3RydWN0ICVzKiBwID0gKHN0cnVjdCAlcyopICVzKHNpemVvZiAqIHApOwBEZWxldGUARGVzdHJveQBbaV0AWzBdACVzKCh2b2lkKiklcyk7AC8qaW5jb21wbGV0ZSB0eXBlICVzKi8KACVzKCh2b2lkKiklc1tpXSk7ACVzKCh2b2lkKiklc1swXSk7ACVzID0gADsKACVzID0gJXM7ACVzID0gMDsALyolcz0qLwAvKiVzPSovJXMALyolcz0qLzAAMAAqJXMgPSAlczsAMQBkZWZpbmVkACVzCgAhSXNQcmVwcm9jZXNzb3JUb2tlblBoYXNlAFVuZXhwZWN0ZWQgdG9rZW4gLSAlcwBvawB1bmV4cGVjdGVkIGVycm9yIElzRmlyc3RPZlByaW1hcnlFeHByZXNzaW9uAF9fRlVOQ1RJT05fXwBXYXJuaW5nOiAnJXMnOiB1bmRlY2xhcmVkIGlkZW50aWZpZXIKAHVuZXhwZWN0ZWQgZXJyb3IAdW5leHBlY3RlZCBlcnJvciBOVUxMAGludmFsaWQgc3BlY2lmaWVyLXF1YWxpZmllci1saXN0AGludGVybmFsIGVycm9yIDAxICVzAGV2YWwgZXhwcmVzc2lvbgBzeW50YXggZXJyb3I6IG1pc3NpbmcgJzsnIGJlZm9yZSAnfScAc3ludGF4IGVycm9yOiBleHBlY3RlZCAnLCcgb3IgJzsnAGludmFsaWQgdG9rZW4gZm9yIHVuaW9uIHNldABleHBlY3RlZCBlbnVtIG5hbWUgb3IgewBwb2ludGVyIGVycm9yAGludGVybmFsIGVycm9yIDIAZG91YmxlIHR5cGVkZWYAaW50ZXJuYWwgZXJyb3IgMwAvKmRlZmF1bHQqLwBzb3VyY2UAcmIAKCVkKTogACgxKTogACVzKCVkKSA6ACgwKSA6AGluY2x1ZGUgc3RhY2stLS0KACVzKCVkKToKAC0tLQoAcHJhZ21hIG9uY2UgZmlsZQBtZW0AQ2Fubm90IG9wZW4gc291cmNlIGZpbGU6ICclcyc6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkAQ2Fubm90IG9wZW4gaW5jbHVkZSBmaWxlOiAnJXMnOiBObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AGVycm9yIGV2YWx1YXRpbmcgZXhwcmVzc2lvbgBpbmNsdWRlAHByYWdtYQBlbGlmAGlmbmRlZgBpZmRlZgBlbmRpZgBlcnJvcgBsaW5lAHVuZGVmAGRlZmluZQBvbmNlAG1lc3NhZ2UAZGlyAHJlZ2lvbgBjcHJpbWUAZW5kcmVnaW9uADogI2Vycm9yIDogAG5hbWUAJT0AJj0AJTolOgBpbmxpbmUAX19pbmxpbmUAX19mb3JjZWlubGluZQByZXN0cmljdABfQWxpZ25hcwBfQWxpZ25vZgBfQXRvbWljAF9Db21wbGV4AF9HZW5lcmljAF9JbWFnaW5hcnkAX05vcmV0dXJuAF9TdGF0aWNfYXNzZXJ0AF9UaHJlYWRfbG9jYWwAX19hc20AX2xhbWJkYV8lZABzdGF0aWMgdm9pZCBfbGFtYmRhXyVkKAB7CgBkZWZhdWx0OwAKewoAIGRlZmF1bHQAX0NyZWF0ZQBfSW5pdABfRGVzdHJveQBfRGVsZXRlAF9SZXNlcnZlAGlmICgkbmVsZW1lbnRzID4gJHAtPkNhcGFjaXR5KQp7CiAkdHlwZSoqIHBuZXcgPSAkcC0+JGRhdGE7CiBwbmV3ID0gKCR0eXBlKiopJHJlYWxsb2MocG5ldywgJG5lbGVtZW50cyAqIHNpemVvZigkdHlwZSopKTsKIGlmIChwbmV3KQogewogICRwLT4kZGF0YSA9IHBuZXc7CiAgJHAtPkNhcGFjaXR5ID0gJG5lbGVtZW50czsKIH0KfQoAaWYgKCRuZWxlbWVudHMgPiAkcC0+Q2FwYWNpdHkpCnsKICR0eXBlKiBwbmV3ID0gJHAtPiRkYXRhOwogcG5ldyA9ICgkdHlwZSopJHJlYWxsb2MocG5ldywgJG5lbGVtZW50cyAqIHNpemVvZigkdHlwZSkpOwogaWYgKHBuZXcpCiB7CiAgJHAtPiRkYXRhID0gcG5ldzsKICAkcC0+Q2FwYWNpdHkgPSAkbmVsZW1lbnRzOwogfQp9CgBuZWxlbWVudHMAZGF0YQByZWFsbG9jAF9QdXNoQmFjawBSZXNlcnZlAGlmICgkcC0+U2l6ZSArIDEgPiAkcC0+Q2FwYWNpdHkpCnsKIGludCBuID0gJHAtPkNhcGFjaXR5ICogMjsKIGlmIChuID09IDApCiB7CiAgbiA9IDE7CiB9CiAkcHJlZml4CF9SZXNlcnZlKCRwLCBuKTsKfQokcC0+JGRhdGFbJHAtPlNpemVdID0gJG5lbGVtZW50czsKJHAtPlNpemUrKzsKAGlmICgkcC0+U2l6ZSArIDEgPiAkcC0+Q2FwYWNpdHkpCnsKIGludCBuID0gJHAtPkNhcGFjaXR5ICogMjsKIGlmIChuID09IDApCiB7CiAgbiA9IDE7CiB9CiAkdHlwZSoqIHBuZXcgPSAkcC0+JGRhdGE7CiBwbmV3ID0gKCR0eXBlKiopJHJlYWxsb2MocG5ldywgbiAqIHNpemVvZigkdHlwZSopKTsKIGlmIChwbmV3KQogewogICRwLT4kZGF0YSA9IHBuZXc7CiAgJHAtPkNhcGFjaXR5ID0gbjsKIH0KfQokcC0+JGRhdGFbJHAtPlNpemVdID0gJG5lbGVtZW50czsKJHAtPlNpemUrKzsKAGlmICgkcC0+U2l6ZSArIDEgPiAkcC0+Q2FwYWNpdHkpCnsKIGludCBuID0gJHAtPkNhcGFjaXR5ICogMjsKIGlmIChuID09IDApCiB7CiAgbiA9IDE7CiB9CiAkdHlwZSogcG5ldyA9ICRwLT4kZGF0YTsKIHBuZXcgPSAoJHR5cGUqKSRyZWFsbG9jKHBuZXcsIG4gKiBzaXplb2YoJHR5cGUpKTsKIGlmIChwbmV3KQogewogICRwLT4kZGF0YSA9IHBuZXc7CiAgJHAtPkNhcGFjaXR5ID0gbjsKIH0KfQokcC0+JGRhdGFbJHAtPlNpemVdID0gJG5lbGVtZW50czsKJHAtPlNpemUrKzsKAHByZWZpeABwTGlzdABwSXRlbQBudWxsAGlmICgkcExpc3QtPnBIZWFkID09ICRudWxsKQp7CiAkcExpc3QtPnBIZWFkID0gJHBJdGVtOwp9CmVsc2UKewogJHBMaXN0LT5wVGFpbC0+cE5leHQgPSAkcEl0ZW07Cn0KJHBMaXN0LT5wVGFpbCA9ICRwSXRlbTsgCgBTaXplAENhcGFjaXR5AFJlYWxsb2MAcEhlYWQAcFRhaWwAezB9AHN0cnVjdCAAdW5pb24gAGVudW0gAC8qQCAAQCovACNwcmFnbWEgcmVnaW9uIGNwcmltZQBiYXNlAGRlcml2ZWQAaWR2YWx1ZQBpbmxpbmUgc3RydWN0ICRkZXJpdmVkKiAkYmFzZQhfQXNfJGRlcml2ZWQoc3RydWN0ICRiYXNlKiBwKSB7IHJldHVybiBwLT4kaWQgPT0gJGlkdmFsdWUgPyAoc3RydWN0ICRkZXJpdmVkKikgcCA6IDA7fQppbmxpbmUgc3RydWN0ICRiYXNlKiAkZGVyaXZlZAhfQXNfJGJhc2Uoc3RydWN0ICRkZXJpdmVkKiBwKSB7IHJldHVybiAoc3RydWN0ICRiYXNlKikgcDsgfQoAaW5saW5lIHN0cnVjdCAkZGVyaXZlZCogJGJhc2UIX0FzXyRkZXJpdmVkKCRiYXNlKiBwKSB7IHJldHVybiBwLT4kaWQgPT0gJGlkdmFsdWUgPyAoc3RydWN0ICRkZXJpdmVkKikgcCA6IDA7fQppbmxpbmUgJGJhc2UqICRkZXJpdmVkCF9Bc18kYmFzZShzdHJ1Y3QgJGRlcml2ZWQqIHApIHsgcmV0dXJuICgkYmFzZSopIHA7IH0KAGlubGluZSAkZGVyaXZlZCogJGJhc2UIX0FzXyRkZXJpdmVkKCRiYXNlKiBwKSB7IHJldHVybiBwLT4kaWQgPT0gJGlkdmFsdWUgPyAoJGRlcml2ZWQqKSBwIDogMDt9CmlubGluZSAkYmFzZSogJGRlcml2ZWQIX0FzXyRiYXNlKCRkZXJpdmVkKiBwKSB7IHJldHVybiAoJGJhc2UqKSBwOyB9CgAjcHJhZ21hIGVuZHJlZ2lvbiBjcHJpbWUKAF9TdGF0aWNBc3NlcnQATWFsbG9jAG1hbGxvYwBOVUxMAGlmICglcyAhPSBOVUxMKQBpZiAoJXMpACVzX0RlbGV0ZSglcyk7ACVzX0RlbGV0ZSglc1tpXSk7ACVzX0RlbGV0ZSglc1swXSk7ACVzX0Rlc3Ryb3koJXMpOwAlc19EZXN0cm95KCVzW2ldKTsAJXNfRGVzdHJveSglc1swXSk7ACVzX0Rlc3Ryb3koJiVzKTsAJXNfSW5pdCgmJXMAJXNfSW5pdCglcyk7ACVzX0luaXQoJiVzKTsAc3RydWN0ICVzICpwID0gKHN0cnVjdCAlcyAqKSAlcyhzaXplb2YgKiBwKTsARnJlZQBmcmVlAF9fTElORV9fAF9fRklMRV9fACJfX0ZJTEVfXyIAX19EQVRFX18AIl9fREFURV9fIgBfX1RJTUVfXwAiX19USU1FX18iAF9fU1REQ19fAF9fQ09VTlRFUl9fAP////////////////////////////////////////////////////////////////8AAQIDBAUGBwgJ/////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAECBAcDBgUAEQAKABEREQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAARAA8KERERAwoHAAETCQsLAAAJBgsAAAsABhEAAAAREREAAAAAAAAAAAAAAAAAAAAACwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAADAAAAAAJDAAAAAAADAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAANAAAABA0AAAAACQ4AAAAAAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAADwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhISAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAASEhIAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAKAAAAAAoAAAAACQsAAAAAAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAtKyAgIDBYMHgAKG51bGwpAC0wWCswWCAwWC0weCsweCAweABpbmYASU5GAG5hbgBOQU4AMDEyMzQ1Njc4OUFCQ0RFRi4AVCEiGQ0BAgMRSxwMEAQLHRIeJ2hub3BxYiAFBg8TFBUaCBYHKCQXGAkKDhsfJSODgn0mKis8PT4/Q0dKTVhZWltcXV5fYGFjZGVmZ2lqa2xyc3R5ent8AElsbGVnYWwgYnl0ZSBzZXF1ZW5jZQBEb21haW4gZXJyb3IAUmVzdWx0IG5vdCByZXByZXNlbnRhYmxlAE5vdCBhIHR0eQBQZXJtaXNzaW9uIGRlbmllZABPcGVyYXRpb24gbm90IHBlcm1pdHRlZABObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AE5vIHN1Y2ggcHJvY2VzcwBGaWxlIGV4aXN0cwBWYWx1ZSB0b28gbGFyZ2UgZm9yIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE5vIGVycm9yIGluZm9ybWF0aW9uAAAvcHJvYy9zZWxmL2ZkLwByd2E=";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

   

   



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "___assert_fail": ___assert_fail, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall85": ___syscall85, "___unlock": ___unlock, "_emscripten_memcpy_big": _emscripten_memcpy_big, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var ___assert_fail=env.___assert_fail;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall195=env.___syscall195;
  var ___syscall197=env.___syscall197;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall85=env.___syscall85;
  var ___unlock=env.___unlock;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _Array_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 do {
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $5 = $12;
   $13 = $5;
   $14 = $3;
   $15 = $14<<2;
   $16 = (_realloc($13,$15)|0);
   $5 = $16;
   $17 = $5;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $5;
    $20 = $2;
    HEAP32[$20>>2] = $19;
    $21 = $3;
    $22 = $2;
    $23 = ((($22)) + 8|0);
    HEAP32[$23>>2] = $21;
    break;
   } else {
    $4 = 0;
    break;
   }
  }
 } while(0);
 $24 = $4;
 $25 = $24&1;
 STACKTOP = sp;return ($25|0);
}
function _Array_Grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 if (!($10)) {
  $27 = $4;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16|0) / 2)&-1;
 $18 = (($13) + ($17))|0;
 $5 = $18;
 $19 = $5;
 $20 = $3;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $22 = $3;
  $5 = $22;
 }
 $23 = $2;
 $24 = $5;
 $25 = (_Array_Reserve($23,$24)|0);
 $26 = $25&1;
 $4 = $26;
 $27 = $4;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _Array_PopGet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 $13 = (($8) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $2 = $14;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - 1)|0;
 $21 = (($16) + ($20<<2)|0);
 HEAP32[$21>>2] = 0;
 $22 = $1;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + -1)|0;
 HEAP32[$23>>2] = $25;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _Array_Pop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Array_PopGet($5)|0);
 $4 = $6;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $10 = $4;
 FUNCTION_TABLE_vi[$9 & 15]($10);
 STACKTOP = sp;return;
}
function _Array_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = (_Array_Grow($5,$9)|0);
 $11 = $10&1;
 $4 = $11;
 $12 = $4;
 $13 = $12&1;
 $14 = $13&1;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $27 = $4;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $3;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21<<2)|0);
 HEAP32[$22>>2] = $16;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 $27 = $4;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _Array_Clear($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $2;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $3;
   $13 = $2;
   $14 = HEAP32[$13>>2]|0;
   $15 = $4;
   $16 = (($14) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vi[$12 & 15]($17);
  }
  $18 = $4;
  $19 = (($18) + 1)|0;
  $4 = $19;
 }
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $2;
 HEAP32[$22>>2] = 0;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = 0;
 STACKTOP = sp;return;
}
function _Array_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _Array_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Array_Clear($4,$5);
 STACKTOP = sp;return;
}
function _StrArray_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 _String_InitWith($4,$6);
 $7 = $2;
 $8 = HEAP32[$4>>2]|0;
 $9 = (_Array_Push($7,$8)|0);
 $10 = $9&1;
 $5 = $10;
 $11 = $5;
 $12 = $11&1;
 $13 = $12&1;
 $14 = ($13|0)!=(1);
 if (!($14)) {
  STACKTOP = sp;return 1;
 }
 _String_Destroy($4);
 STACKTOP = sp;return 1;
}
function _String_InitWith($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $21 = $2;
  HEAP32[$21>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = (_strlen($8)|0);
 $10 = (($9) + 1)|0;
 $4 = $10;
 $11 = $4;
 $12 = $11;
 $13 = (_malloc($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $5;
 $17 = $3;
 $18 = $4;
 _memcpy(($16|0),($17|0),($18|0))|0;
 $19 = $5;
 $20 = $2;
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function _String_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $1;
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _Array_DeleteStrVoid($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 _String_Destroy($1);
 STACKTOP = sp;return;
}
function _StrArray_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Array_Init($2);
 STACKTOP = sp;return;
}
function _StrArray_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Array_Destroy($2,5);
 STACKTOP = sp;return;
}
function _Array_PopFront($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $2 = $9;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(1);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 4|0);
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - 1)|0;
  $23 = $22<<2;
  _memmove(($15|0),($18|0),($23|0))|0;
 }
 $24 = $1;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -1)|0;
 HEAP32[$25>>2] = $27;
 $28 = $2;
 STACKTOP = sp;return ($28|0);
}
function _LocalStrBuilder_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 7;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = $1;
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 12|0);
 $11 = ($8|0)==($10|0);
 $12 = $11&1;
 $4 = $12;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 12|0);
 $17 = ($14|0)==($16|0);
 $18 = $17&1;
 $5 = $18;
 $19 = $2;
 ;HEAP32[$6>>2]=HEAP32[$19>>2]|0;HEAP32[$6+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$19+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$19+16>>2]|0;
 $20 = $2;
 $21 = $3;
 ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[$21+12>>2]|0;HEAP32[$20+16>>2]=HEAP32[$21+16>>2]|0;
 $22 = $3;
 ;HEAP32[$22>>2]=HEAP32[$6>>2]|0;HEAP32[$22+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[$6+16>>2]|0;
 $23 = $4;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $3;
  $26 = ((($25)) + 12|0);
  $27 = $3;
  HEAP32[$27>>2] = $26;
 }
 $28 = $5;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $2;
 $31 = ((($30)) + 12|0);
 $32 = $2;
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = ($3|0)!=($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 $10 = $3;
 $11 = ($10|0)<=(7);
 $12 = $2;
 if ($11) {
  $13 = ((($12)) + 12|0);
  $4 = $13;
  $14 = $2;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = 7;
  $16 = $4;
  $17 = $2;
  HEAP32[$17>>2] = $16;
  STACKTOP = sp;return;
 }
 $18 = ((($12)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<=(7);
 if ($20) {
  $21 = $3;
  $22 = (($21) + 1)|0;
  $23 = $22;
  $24 = (_malloc($23)|0);
  $4 = $24;
  $25 = $4;
  $26 = $2;
  $27 = ((($26)) + 12|0);
  ;HEAP8[$25>>0]=HEAP8[$27>>0]|0;HEAP8[$25+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$27+3>>0]|0;HEAP8[$25+4>>0]=HEAP8[$27+4>>0]|0;HEAP8[$25+5>>0]=HEAP8[$27+5>>0]|0;HEAP8[$25+6>>0]=HEAP8[$27+6>>0]|0;
 } else {
  $28 = $2;
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = (($30) + 1)|0;
  $32 = $31;
  $33 = (_realloc($29,$32)|0);
  $4 = $33;
 }
 $34 = $4;
 $35 = $2;
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = $4;
  HEAP8[$40>>0] = 0;
 }
 $41 = $3;
 $42 = $2;
 $43 = ((($42)) + 8|0);
 HEAP32[$43>>2] = $41;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  HEAP8[$6>>0] = 0;
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15|0) / 2)&-1;
 $17 = (($12) + ($16))|0;
 $4 = $17;
 $18 = $4;
 $19 = $3;
 $20 = ($18|0)<($19|0);
 if ($20) {
  $21 = $3;
  $4 = $21;
 }
 $22 = $2;
 $23 = $4;
 _LocalStrBuilder_Reserve($22,$23);
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Append($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $3;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  _LocalStrBuilder_AppendChar($7,$9);
  $10 = $3;
  $11 = ((($10)) + 1|0);
  $3 = $11;
 }
 STACKTOP = sp;return;
}
function _LocalStrBuilder_AppendChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 _LocalStrBuilder_Grow($4,$8);
 $9 = $3;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 HEAP8[$15>>0] = $9;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = (($17) + ($21)|0);
 HEAP8[$22>>0] = 0;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 _LocalStrBuilder_Clear($4);
 while(1) {
  $5 = $3;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $3;
  $10 = HEAP8[$9>>0]|0;
  _LocalStrBuilder_AppendChar($8,$10);
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $3 = $12;
 }
 STACKTOP = sp;return;
}
function _IsAutoToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(83);
 STACKTOP = sp;return ($3|0);
}
function _IsSizeToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(43);
 STACKTOP = sp;return ($3|0);
}
function _TDeclarations_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _TAnyDeclaration_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _TAnyDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 2:  {
    $6 = $1;
    _TGroupDeclaration_Delete($6);
    break L1;
    break;
   }
   case 3:  {
    $7 = $1;
    _TStaticAssertDeclaration_Delete($7);
    break L1;
    break;
   }
   case 1:  {
    $8 = $1;
    _TDeclaration_Delete($8);
    break L1;
    break;
   }
   case 4:  {
    $9 = $1;
    _TEofDeclaration_Delete($9);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TDeclarations_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _TDeclarations_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TDeclarations_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _TDeclarations_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _TGroupDeclaration_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(44)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 2;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TDeclarations_Init($6);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 _String_Init($8);
 $9 = $0;
 $10 = ((($9)) + 20|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 28|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 36|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _String_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _TScannerItemList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TGroupDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TDeclarations_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _String_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 _TScannerItemList_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 28|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 36|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 _free($14);
 STACKTOP = sp;return;
}
function _TScannerItemList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _ScannerItem_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TStructDeclarationList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _TAnyStructDeclaration_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _TAnyStructDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 3:  {
    $6 = $1;
    _TStaticAssertDeclaration_Delete($6);
    break L1;
    break;
   }
   case 12:  {
    $7 = $1;
    _TStructDeclaration_Delete($7);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TStructDeclarationList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _TStructDeclarationList_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TStructDeclarationList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _TStructDeclarationList_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _TBlockItemList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _TBlockItemList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _TBlockItem_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _TBlockItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   do {
    switch ($5|0) {
    case 20:  {
     $6 = $1;
     _TForStatement_Delete($6);
     break L1;
     break;
    }
    case 21:  {
     $7 = $1;
     _TJumpStatement_Delete($7);
     break L1;
     break;
    }
    case 17:  {
     $8 = $1;
     _TExpressionStatement_Delete($8);
     break L1;
     break;
    }
    case 1:  {
     $9 = $1;
     _TDeclaration_Delete($9);
     break L1;
     break;
    }
    case 25:  {
     $10 = $1;
     _TIfStatement_Delete($10);
     break L1;
     break;
    }
    case 23:  {
     $11 = $1;
     _TWhileStatement_Delete($11);
     break L1;
     break;
    }
    case 18:  {
     $12 = $1;
     _TSwitchStatement_Delete($12);
     break L1;
     break;
    }
    case 22:  {
     $13 = $1;
     _TAsmStatement_Delete($13);
     break L1;
     break;
    }
    case 24:  {
     $14 = $1;
     _TDoStatement_Delete($14);
     break L1;
     break;
    }
    case 19:  {
     $15 = $1;
     _TLabeledStatement_Delete($15);
     break L1;
     break;
    }
    case 16:  {
     $16 = $1;
     _TCompoundStatement_Delete($16);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TBlockItemList_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TBlockItemList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _TBlockItemList_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _TCompoundStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 16;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TBlockItemList_Init($6);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 $10 = ((($9)) + 24|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _TCompoundStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TBlockItemList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _TScannerItemList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 _TScannerItemList_Destroy($9);
 $10 = $1;
 _free($10);
 STACKTOP = sp;return;
}
function _TLabeledStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(36)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 19;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _String_Init($10);
 $11 = $0;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 28|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TLabeledStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TStatement_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _TExpression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _String_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _TStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   do {
    switch ($5|0) {
    case 20:  {
     $6 = $1;
     _TForStatement_Delete($6);
     break L1;
     break;
    }
    case 21:  {
     $7 = $1;
     _TJumpStatement_Delete($7);
     break L1;
     break;
    }
    case 17:  {
     $8 = $1;
     _TExpressionStatement_Delete($8);
     break L1;
     break;
    }
    case 25:  {
     $9 = $1;
     _TIfStatement_Delete($9);
     break L1;
     break;
    }
    case 23:  {
     $10 = $1;
     _TWhileStatement_Delete($10);
     break L1;
     break;
    }
    case 18:  {
     $11 = $1;
     _TSwitchStatement_Delete($11);
     break L1;
     break;
    }
    case 22:  {
     $12 = $1;
     _TAsmStatement_Delete($12);
     break L1;
     break;
    }
    case 24:  {
     $13 = $1;
     _TDoStatement_Delete($13);
     break L1;
     break;
    }
    case 19:  {
     $14 = $1;
     _TLabeledStatement_Delete($14);
     break L1;
     break;
    }
    case 16:  {
     $15 = $1;
     _TCompoundStatement_Delete($15);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 35:  {
    $6 = $1;
    _TBinaryExpression_Delete($6);
    break L1;
    break;
   }
   case 37:  {
    $7 = $1;
    _TPrimaryExpressionLambda_Delete($7);
    break L1;
    break;
   }
   case 30:  {
    $8 = $1;
    _TUnaryExpressionOperator_Delete($8);
    break L1;
    break;
   }
   case 31:  {
    $9 = $1;
    _TCastExpressionType_Delete($9);
    break L1;
    break;
   }
   case 32:  {
    $10 = $1;
    _TPrimaryExpressionValue_Delete($10);
    break L1;
    break;
   }
   case 34:  {
    $11 = $1;
    _TPostfixExpressionCore_Delete($11);
    break L1;
    break;
   }
   case 33:  {
    $12 = $1;
    _TPrimaryExpressionLiteral_Delete($12);
    break L1;
    break;
   }
   case 36:  {
    $13 = $1;
    _TTernaryExpression_Delete($13);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TForStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(64)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 20;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 24|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 32|0);
 _TScannerItemList_Init($18);
 $19 = $0;
 $20 = ((($19)) + 40|0);
 _TScannerItemList_Init($20);
 $21 = $0;
 $22 = ((($21)) + 48|0);
 _TScannerItemList_Init($22);
 $23 = $0;
 $24 = ((($23)) + 56|0);
 _TScannerItemList_Init($24);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _TForStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TAnyDeclaration_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _TExpression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 _TExpression_Delete($12);
 $13 = $1;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _TExpression_Delete($15);
 $16 = $1;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 _TStatement_Delete($18);
 $19 = $1;
 $20 = ((($19)) + 24|0);
 _TScannerItemList_Destroy($20);
 $21 = $1;
 $22 = ((($21)) + 32|0);
 _TScannerItemList_Destroy($22);
 $23 = $1;
 $24 = ((($23)) + 40|0);
 _TScannerItemList_Destroy($24);
 $25 = $1;
 $26 = ((($25)) + 48|0);
 _TScannerItemList_Destroy($26);
 $27 = $1;
 $28 = ((($27)) + 56|0);
 _TScannerItemList_Destroy($28);
 $29 = $1;
 _free($29);
 STACKTOP = sp;return;
}
function _TWhileStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(36)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 23;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _TWhileStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _TStatement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _TDoStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(52)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 24;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 36|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 44|0);
 _TScannerItemList_Init($18);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _TDoStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _TStatement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 36|0);
 _TScannerItemList_Destroy($17);
 $18 = $1;
 $19 = ((($18)) + 44|0);
 _TScannerItemList_Destroy($19);
 $20 = $1;
 _free($20);
 STACKTOP = sp;return;
}
function _TExpressionStatement_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(16)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 17;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _TExpressionStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _TScannerItemList_Destroy($8);
 $9 = $1;
 _free($9);
 STACKTOP = sp;return;
}
function _TJumpStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(40)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 21;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _String_Init($8);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 24|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 32|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TJumpStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _String_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _TExpression_Delete($8);
 $9 = $1;
 $10 = ((($9)) + 16|0);
 _TScannerItemList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 24|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 32|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 _free($15);
 STACKTOP = sp;return;
}
function _TAsmStatement_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(12)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  HEAP32[$4>>2] = 22;
  $5 = $0;
  $6 = ((($5)) + 4|0);
  _TScannerItemList_Init($6);
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _TAsmStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TScannerItemList_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _TSwitchStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(36)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 18;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _TSwitchStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _TStatement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _TIfStatement_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(48)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 25;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 24|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 32|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 40|0);
 _TScannerItemList_Init($18);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _TIfStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _TStatement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 _TStatement_Delete($12);
 $13 = $1;
 $14 = ((($13)) + 16|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 24|0);
 _TScannerItemList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 32|0);
 _TScannerItemList_Destroy($18);
 $19 = $1;
 $20 = ((($19)) + 40|0);
 _TScannerItemList_Destroy($20);
 $21 = $1;
 _free($21);
 STACKTOP = sp;return;
}
function _TDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TDeclarationSpecifiers_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _TInitDeclaratorList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 _TCompoundStatement_Delete($10);
 $11 = $1;
 $12 = ((($11)) + 36|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 48|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 _free($15);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionValue_Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 32;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 _String_Init($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 _TScannerItemList_Init($10);
 $11 = $1;
 $12 = ((($11)) + 24|0);
 _TScannerItemList_Init($12);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionValue_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _String_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 _TScannerItemList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 24|0);
 _TScannerItemList_Destroy($10);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionValue_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  _TPrimaryExpressionValue_Init($4);
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TPrimaryExpressionValue_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TPrimaryExpressionValue_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLambda_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(44)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 37;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 36|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TPrimaryExpressionLambda_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _TParameterTypeList_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TScannerItemList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 20|0);
 _TScannerItemList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 28|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 36|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 _free($15);
 STACKTOP = sp;return;
}
function _TParameterTypeList_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TParameterTypeList_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TPostfixExpressionCore_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _String_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _TExpression_Delete($8);
 $9 = $1;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 _TExpression_Delete($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 _TPostfixExpressionCore_Delete($14);
 $15 = $1;
 $16 = ((($15)) + 24|0);
 _TInitializerList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 32|0);
 _String_Destroy($18);
 $19 = $1;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 _TTypeName_Delete($21);
 $22 = $1;
 $23 = ((($22)) + 40|0);
 _TScannerItemList_Destroy($23);
 $24 = $1;
 $25 = ((($24)) + 48|0);
 _TScannerItemList_Destroy($25);
 $26 = $1;
 $27 = ((($26)) + 56|0);
 _TScannerItemList_Destroy($27);
 $28 = $1;
 $29 = ((($28)) + 64|0);
 _TScannerItemList_Destroy($29);
 $30 = $1;
 $31 = ((($30)) + 72|0);
 _TScannerItemList_Destroy($31);
 $32 = $1;
 _free($32);
 STACKTOP = sp;return;
}
function _TInitializerList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _TInitializerListItem_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TTypeName_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TTypeName_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TBinaryExpression_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 35;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = $0;
 $17 = ((($16)) + 24|0);
 _TScannerItemList_Init($17);
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _TBinaryExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _TExpression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 _free($12);
 STACKTOP = sp;return;
}
function _TUnaryExpressionOperator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TTypeName_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 48|0);
 _TScannerItemList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 56|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 64|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 _free($15);
 STACKTOP = sp;return;
}
function _TTypeName_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _TSpecifierQualifierList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 16|0);
 _TDeclarator_Destroy($5);
 STACKTOP = sp;return;
}
function _TCastExpressionType_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _TTypeName_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 44|0);
 _TScannerItemList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 52|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _TTernaryExpression_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(36)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 36;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 28|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TTernaryExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _TExpression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 _TExpression_Delete($12);
 $13 = $1;
 $14 = ((($13)) + 20|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 28|0);
 _TScannerItemList_Destroy($16);
 $17 = $1;
 _free($17);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLiteralItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _String_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 _TScannerItemList_Destroy($7);
 $8 = $1;
 _free($8);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLiteralItem_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(16)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _String_Init($6);
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _TPrimaryExpressionLiteral_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(12)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 33;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TPrimaryExpressionLiteralItemList_Init($6);
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _TPrimaryExpressionLiteralItemList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLiteral_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TPrimaryExpressionLiteralItemList_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLiteralItemList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _TPrimaryExpressionLiteralItem_Delete($11);
 }
 STACKTOP = sp;return;
}
function _TEofDeclaration_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(12)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  HEAP32[$4>>2] = 4;
  $5 = $0;
  $6 = ((($5)) + 4|0);
  _TScannerItemList_Init($6);
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _TEofDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TScannerItemList_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _TStaticAssertDeclaration_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(60)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 3;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _String_Init($8);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 36|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 44|0);
 _TScannerItemList_Init($18);
 $19 = $0;
 $20 = ((($19)) + 52|0);
 _TScannerItemList_Init($20);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _TStaticAssertDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TExpression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _String_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 36|0);
 _TScannerItemList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 44|0);
 _TScannerItemList_Destroy($18);
 $19 = $1;
 $20 = ((($19)) + 52|0);
 _TScannerItemList_Destroy($20);
 $21 = $1;
 _free($21);
 STACKTOP = sp;return;
}
function _TEnumerator_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(40)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _String_Init($6);
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 36|0);
 HEAP8[$16>>0] = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TEnumerator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _String_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _TExpression_Delete($8);
 $9 = $1;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 28|0);
 _TScannerItemList_Destroy($14);
 $15 = $1;
 _free($15);
 STACKTOP = sp;return;
}
function _TEnumeratorList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TEnumeratorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _TEnumerator_Delete($11);
 }
 STACKTOP = sp;return;
}
function _TEnumSpecifier_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(48)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 7;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _String_Init($6);
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TEnumeratorList_Init($8);
 $9 = $0;
 $10 = ((($9)) + 16|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 24|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 32|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 40|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TEnumSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _String_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 _TEnumeratorList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 16|0);
 _TScannerItemList_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 32|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 40|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _TUnionSetItem_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(40)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _String_Init($10);
 $11 = $0;
 $12 = ((($11)) + 16|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 24|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 32|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TUnionSetItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 12|0);
 _String_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _TScannerItemList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 _TScannerItemList_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 32|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 _free($12);
 STACKTOP = sp;return;
}
function _TUnionSet_Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 _TScannerItemList_Init($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 _TScannerItemList_Init($8);
 $9 = $1;
 $10 = ((($9)) + 24|0);
 _TScannerItemList_Init($10);
 STACKTOP = sp;return;
}
function _TUnionSet_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _TUnionSetItem_Delete($11);
 }
 $12 = $1;
 $13 = ((($12)) + 8|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 16|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 24|0);
 _TScannerItemList_Destroy($17);
 STACKTOP = sp;return;
}
function _TUnionSet_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  $$sink = $8;
 } else {
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $$sink = $10;
 }
 HEAP32[$$sink>>2] = $7;
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _TStructUnionSpecifier_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(92)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 8;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TStructDeclarationList_Init($6);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 _String_Init($8);
 $9 = $0;
 $10 = ((($9)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 24|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 28|0);
 _TUnionSet_Init($14);
 $15 = $0;
 $16 = ((($15)) + 60|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 68|0);
 _TScannerItemList_Init($18);
 $19 = $0;
 $20 = ((($19)) + 76|0);
 _TScannerItemList_Init($20);
 $21 = $0;
 $22 = ((($21)) + 84|0);
 _TScannerItemList_Init($22);
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _TStructUnionSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TStructDeclarationList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _String_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 28|0);
 _TUnionSet_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 60|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 68|0);
 _TScannerItemList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 76|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 84|0);
 _TScannerItemList_Destroy($17);
 $18 = $1;
 _free($18);
 STACKTOP = sp;return;
}
function _TSingleTypeSpecifier_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 6;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _String_Init($8);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _TSingleTypeSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _String_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 12|0);
 _TScannerItemList_Destroy($5);
 STACKTOP = sp;return;
}
function _TSingleTypeSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TSingleTypeSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TAtomicTypeSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TTypeName_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 40|0);
 _TScannerItemList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 48|0);
 _TScannerItemList_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 56|0);
 _TScannerItemList_Destroy($11);
 $12 = $1;
 _free($12);
 STACKTOP = sp;return;
}
function _TDeclarator_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TScannerItemList_Init($8);
 STACKTOP = sp;return;
}
function _TDeclarator_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  _TDeclarator_Init($4);
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TDeclarator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TPointerList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _TDirectDeclarator_Delete($5);
 $6 = $1;
 $7 = ((($6)) + 12|0);
 _TScannerItemList_Destroy($7);
 STACKTOP = sp;return;
}
function _TPointerList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _TPointer_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TDirectDeclarator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TDirectDeclarator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TDeclarator_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$5+16>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$7+16>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$4+16>>2]|0;
 STACKTOP = sp;return;
}
function _TDeclarator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TDeclarator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TInitDeclarator_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(28)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _TInitDeclarator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _TDeclarator_Delete($3);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _TInitializer_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TScannerItemList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 20|0);
 _TScannerItemList_Destroy($10);
 STACKTOP = sp;return;
}
function _TInitializer_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 35:  {
    $6 = $1;
    _TBinaryExpression_Delete($6);
    break L1;
    break;
   }
   case 37:  {
    $7 = $1;
    _TPrimaryExpressionLambda_Delete($7);
    break L1;
    break;
   }
   case 30:  {
    $8 = $1;
    _TUnaryExpressionOperator_Delete($8);
    break L1;
    break;
   }
   case 31:  {
    $9 = $1;
    _TCastExpressionType_Delete($9);
    break L1;
    break;
   }
   case 28:  {
    $10 = $1;
    _TInitializerListType_Delete($10);
    break L1;
    break;
   }
   case 32:  {
    $11 = $1;
    _TPrimaryExpressionValue_Delete($11);
    break L1;
    break;
   }
   case 34:  {
    $12 = $1;
    _TPostfixExpressionCore_Delete($12);
    break L1;
    break;
   }
   case 33:  {
    $13 = $1;
    _TPrimaryExpressionLiteral_Delete($13);
    break L1;
    break;
   }
   case 36:  {
    $14 = $1;
    _TTernaryExpression_Delete($14);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TInitDeclarator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TInitDeclarator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TParameterTypeList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TParameterList_Init($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 _TScannerItemList_Init($4);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 _TScannerItemList_Init($6);
 $7 = $1;
 $8 = ((($7)) + 24|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function _TParameterList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TParameterTypeList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TParameterList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 _TScannerItemList_Destroy($4);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 _TScannerItemList_Destroy($6);
 STACKTOP = sp;return;
}
function _TParameterList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _TParameter_Delete($11);
 }
 STACKTOP = sp;return;
}
function _TParameterTypeList_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(28)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  _TParameterTypeList_Init($4);
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TDeclarator_GetName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 12;
   break;
  }
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $3;
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)!=(0);
   if ($19) {
    label = 7;
    break;
   }
  }
  $22 = $3;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = $3;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_TDeclarator_GetName($28)|0);
   $4 = $29;
   $30 = $4;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    label = 10;
    break;
   }
  }
  $33 = $3;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $3 = $35;
 }
 if ((label|0) == 7) {
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $1 = $21;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 10) {
  $32 = $4;
  $1 = $32;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 12) {
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _TParameterTypeList_HasNamedArgs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 L1: do {
  if ($6) {
   $7 = $1;
   $8 = HEAP32[$7>>2]|0;
   $3 = $8;
   while(1) {
    $9 = $3;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break L1;
    }
    $11 = $3;
    $12 = (_TParameter_GetName($11)|0);
    $4 = $12;
    $13 = $4;
    $14 = ($13|0)!=(0|0);
    if ($14) {
     break;
    }
    $15 = $3;
    $16 = HEAP32[$15>>2]|0;
    $3 = $16;
   }
   $2 = 1;
  }
 } while(0);
 $17 = $2;
 $18 = $17&1;
 STACKTOP = sp;return ($18|0);
}
function _TParameter_GetName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = (_TDeclarator_GetName($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _TParameterTypeList_GetArgsString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = (_TParameter_GetName($13)|0);
  $6 = $14;
  $15 = $6;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = ($17|0)>(0);
   if ($18) {
    $19 = $3;
    (_StrBuilder_Append($19,1436)|0);
   }
   $20 = $3;
   $21 = $6;
   (_StrBuilder_Append($20,$21)|0);
  }
  $22 = $4;
  $23 = (($22) + 1)|0;
  $4 = $23;
  $24 = $5;
  $25 = HEAP32[$24>>2]|0;
  $5 = $25;
 }
 STACKTOP = sp;return;
}
function _StrBuilder_Append($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = (_IsEmptyStr($5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $$expand_i1_val = 1;
  HEAP8[$2>>0] = $$expand_i1_val;
 } else {
  $8 = $3;
  $9 = $4;
  $10 = $4;
  $11 = (_strlen($10)|0);
  $12 = (_StrBuilder_AppendN($8,$9,$11)|0);
  $$expand_i1_val2 = $12&1;
  HEAP8[$2>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$2>>0]|0;
 $13 = $$pre_trunc&1;
 STACKTOP = sp;return ($13|0);
}
function _TParameterTypeList_GetParameterByIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $3;
  $13 = ($11|0)==($12|0);
  if ($13) {
   break;
  }
  $15 = $5;
  $16 = (($15) + 1)|0;
  $5 = $16;
  $17 = $6;
  $18 = HEAP32[$17>>2]|0;
  $6 = $18;
 }
 if ((label|0) == 6) {
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 $14 = $6;
 $4 = $14;
 $19 = $4;
 STACKTOP = sp;return ($19|0);
}
function _TParameterTypeList_FindParameterByName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 L1: do {
  if ($8) {
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $5 = $10;
   while(1) {
    $11 = $5;
    $12 = ($11|0)!=(0|0);
    if (!($12)) {
     break L1;
    }
    $13 = $5;
    $14 = (_TParameter_GetName($13)|0);
    $6 = $14;
    $15 = $6;
    $16 = ($15|0)!=(0|0);
    if ($16) {
     $17 = $6;
     $18 = $3;
     $19 = (_strcmp($17,$18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     }
    }
    $22 = $5;
    $23 = HEAP32[$22>>2]|0;
    $5 = $23;
   }
   $21 = $5;
   $4 = $21;
  }
 } while(0);
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _TDirectDeclarator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _String_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _TDeclarator_Delete($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _TDirectDeclarator_Delete($8);
 $9 = $1;
 $10 = ((($9)) + 20|0);
 _TParameterTypeList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 _TExpression_Delete($13);
 $14 = $1;
 $15 = ((($14)) + 56|0);
 _TScannerItemList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 64|0);
 _TScannerItemList_Destroy($17);
 $18 = $1;
 $19 = ((($18)) + 72|0);
 _TScannerItemList_Destroy($19);
 $20 = $1;
 $21 = ((($20)) + 80|0);
 _TScannerItemList_Destroy($21);
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_GetMainSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $5 = $3;
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   label = 8;
   break;
  }
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $4 = $14;
  $15 = $4;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(6);
  if ($17) {
   break;
  }
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(8);
  if ($20) {
   break;
  }
  $21 = $4;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(7);
  if ($23) {
   break;
  }
  $25 = $3;
  $26 = (($25) + 1)|0;
  $3 = $26;
 }
 if ((label|0) == 8) {
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $24 = $4;
 $2 = $24;
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function _TSpecifierQualifier_As_TSingleTypeSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(6);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _TSpecifierQualifierList_IsAnyInteger($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $6 = $3;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 15;
   break;
  }
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $4 = $15;
  $16 = $4;
  $17 = (_TSpecifierQualifier_As_TSingleTypeSpecifier($16)|0);
  $5 = $17;
  $18 = $5;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $5;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(99);
   if ($23) {
    break;
   }
   $24 = $5;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(108);
   if ($27) {
    break;
   }
   $28 = $5;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(109);
   if ($31) {
    break;
   }
   $32 = $5;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(117);
   if ($35) {
    break;
   }
   $36 = $5;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(101);
   if ($39) {
    break;
   }
   $40 = $5;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(102);
   if ($43) {
    break;
   }
   $44 = $5;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(103);
   if ($47) {
    break;
   }
   $48 = $5;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(104);
   if ($51) {
    break;
   }
   $52 = $5;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(105);
   if ($55) {
    break;
   }
  }
  $56 = $3;
  $57 = (($56) + 1)|0;
  $3 = $57;
 }
 if ((label|0) == 15) {
  $58 = $2;
  $59 = $58&1;
  STACKTOP = sp;return ($59|0);
 }
 $2 = 1;
 $58 = $2;
 $59 = $58&1;
 STACKTOP = sp;return ($59|0);
}
function _TSpecifierQualifierList_IsBool($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $6 = $3;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $4 = $15;
  $16 = $4;
  $17 = (_TSpecifierQualifier_As_TSingleTypeSpecifier($16)|0);
  $5 = $17;
  $18 = $5;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $5;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(122);
   if ($23) {
    break;
   }
  }
  $24 = $3;
  $25 = (($24) + 1)|0;
  $3 = $25;
 }
 if ((label|0) == 7) {
  $26 = $2;
  $27 = $26&1;
  STACKTOP = sp;return ($27|0);
 }
 $2 = 1;
 $26 = $2;
 $27 = $26&1;
 STACKTOP = sp;return ($27|0);
}
function _TInitDeclarator_FindName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_TDeclarator_GetName($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _TAlignmentSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _String_Destroy($3);
 STACKTOP = sp;return;
}
function _TAlignmentSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TAlignmentSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TStructDeclaration_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 12;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 _TStructDeclaratorList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 24|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _TStructDeclaratorList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TStructDeclaratorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _TInitDeclarator_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TStructDeclaratorList_Add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $$sink = $9;$$sink2 = $10;
 } else {
  $11 = ((($8)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 8|0);
  HEAP32[$13>>2] = $7;
  $14 = $3;
  $15 = $2;
  $$sink = $14;$$sink2 = $15;
 }
 $16 = ((($$sink2)) + 4|0);
 HEAP32[$16>>2] = $$sink;
 STACKTOP = sp;return;
}
function _TStructDeclaration_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _TSpecifierQualifierList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 16|0);
 _TStructDeclaratorList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 24|0);
 _TScannerItemList_Destroy($7);
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _TSpecifierQualifier_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _TStructDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TStructDeclaration_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TPointerList_IsAutoPointer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $39 = $3;
  $40 = $39&1;
  STACKTOP = sp;return ($40|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $11&1;
 $2 = $12;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $4 = $14;
 while(1) {
  $15 = $4;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 12;
   break;
  }
  $5 = 0;
  while(1) {
   $17 = $5;
   $18 = $4;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $4;
   $23 = $5;
   $24 = (($22) + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $6 = $25;
   $26 = $6;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_IsAutoToken($28)|0);
   if ($29) {
    label = 7;
    break;
   }
   $30 = $5;
   $31 = (($30) + 1)|0;
   $5 = $31;
  }
  if ((label|0) == 7) {
   label = 0;
   $3 = 1;
  }
  $32 = $3;
  $33 = $32&1;
  if ($33) {
   $34 = $2;
   $35 = $34&1;
   if ($35) {
    label = 12;
    break;
   }
  }
  $36 = $4;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $4 = $38;
 }
 if ((label|0) == 12) {
  $39 = $3;
  $40 = $39&1;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _TPointer_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TPointer_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TPointer_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = $0;
 _TTypeQualifierList_Init($4);
 $5 = $0;
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 24|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _TTypeQualifierList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TPointer_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TTypeQualifierList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 24|0);
 _TScannerItemList_Destroy($4);
 STACKTOP = sp;return;
}
function _TTypeQualifierList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $1;
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _TTypeQualifier_Delete($11);
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 STACKTOP = sp;return;
}
function _TPointerList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $$sink = $9;$$sink2 = $10;
 } else {
  $11 = ((($8)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 20|0);
  HEAP32[$13>>2] = $7;
  $14 = $3;
  $15 = $2;
  $$sink = $14;$$sink2 = $15;
 }
 $16 = ((($$sink2)) + 4|0);
 HEAP32[$16>>2] = $$sink;
 STACKTOP = sp;return;
}
function _TokenToString($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 do {
  switch ($3|0) {
  case 0:  {
   $1 = 1559;
   break;
  }
  case 1:  {
   $1 = 1564;
   break;
  }
  case 2:  {
   $1 = 1568;
   break;
  }
  case 4:  {
   $1 = 1572;
   break;
  }
  case 5:  {
   $1 = 1585;
   break;
  }
  case 6:  {
   $1 = 1593;
   break;
  }
  case 7:  {
   $1 = 1604;
   break;
  }
  case 8:  {
   $1 = 1615;
   break;
  }
  case 9:  {
   $1 = 1622;
   break;
  }
  case 10:  {
   $1 = 1641;
   break;
  }
  case 12:  {
   $1 = 1656;
   break;
  }
  case 14:  {
   $1 = 1672;
   break;
  }
  case 15:  {
   $1 = 1682;
   break;
  }
  case 18:  {
   $1 = 1704;
   break;
  }
  case 17:  {
   $1 = 1717;
   break;
  }
  case 20:  {
   $1 = 1738;
   break;
  }
  case 21:  {
   $1 = 1474;
   break;
  }
  case 22:  {
   $1 = 1740;
   break;
  }
  case 23:  {
   $1 = 1742;
   break;
  }
  case 24:  {
   $1 = 1744;
   break;
  }
  case 25:  {
   $1 = 1746;
   break;
  }
  case 26:  {
   $1 = 1748;
   break;
  }
  case 27:  {
   $1 = 1750;
   break;
  }
  case 28:  {
   $1 = 1752;
   break;
  }
  case 29:  {
   $1 = 1439;
   break;
  }
  case 30:  {
   $1 = 1754;
   break;
  }
  case 31:  {
   $1 = 1445;
   break;
  }
  case 32:  {
   $1 = 1756;
   break;
  }
  case 34:  {
   $1 = 6966;
   break;
  }
  case 35:  {
   $1 = 1758;
   break;
  }
  case 36:  {
   $1 = 1760;
   break;
  }
  case 37:  {
   $1 = 1762;
   break;
  }
  case 38:  {
   $1 = 1764;
   break;
  }
  case 39:  {
   $1 = 1766;
   break;
  }
  case 40:  {
   $1 = 1768;
   break;
  }
  case 41:  {
   $1 = 1770;
   break;
  }
  case 42:  {
   $1 = 1772;
   break;
  }
  case 43:  {
   $1 = 1535;
   break;
  }
  case 44:  {
   $1 = 1774;
   break;
  }
  case 45:  {
   $1 = 1447;
   break;
  }
  case 46:  {
   $1 = 1776;
   break;
  }
  case 47:  {
   $1 = 1778;
   break;
  }
  case 48:  {
   $1 = 1780;
   break;
  }
  case 49:  {
   $1 = 1502;
   break;
  }
  case 50:  {
   $1 = 1782;
   break;
  }
  case 51:  {
   $1 = 1449;
   break;
  }
  case 52:  {
   $1 = 1784;
   break;
  }
  case 83:  {
   $1 = 1786;
   break;
  }
  case 84:  {
   $1 = 1791;
   break;
  }
  case 85:  {
   $1 = 1797;
   break;
  }
  case 86:  {
   $1 = 1802;
   break;
  }
  case 87:  {
   $1 = 1807;
   break;
  }
  case 88:  {
   $1 = 1813;
   break;
  }
  case 89:  {
   $1 = 1822;
   break;
  }
  case 90:  {
   $1 = 1830;
   break;
  }
  case 91:  {
   $1 = 1833;
   break;
  }
  case 92:  {
   $1 = 1840;
   break;
  }
  case 93:  {
   $1 = 1845;
   break;
  }
  case 94:  {
   $1 = 1850;
   break;
  }
  case 95:  {
   $1 = 1857;
   break;
  }
  case 96:  {
   $1 = 1863;
   break;
  }
  case 97:  {
   $1 = 1867;
   break;
  }
  case 98:  {
   $1 = 1872;
   break;
  }
  case 99:  {
   $1 = 1875;
   break;
  }
  case 100:  {
   $1 = 1879;
   break;
  }
  case 101:  {
   $1 = 1884;
   break;
  }
  case 102:  {
   $1 = 1891;
   break;
  }
  case 103:  {
   $1 = 1899;
   break;
  }
  case 104:  {
   $1 = 1907;
   break;
  }
  case 105:  {
   $1 = 1915;
   break;
  }
  case 106:  {
   $1 = 1925;
   break;
  }
  case 107:  {
   $1 = 1934;
   break;
  }
  case 108:  {
   $1 = 1941;
   break;
  }
  case 109:  {
   $1 = 1947;
   break;
  }
  case 110:  {
   $1 = 1954;
   break;
  }
  case 111:  {
   $1 = 1961;
   break;
  }
  case 112:  {
   $1 = 1968;
   break;
  }
  case 113:  {
   $1 = 1975;
   break;
  }
  case 114:  {
   $1 = 1982;
   break;
  }
  case 115:  {
   $1 = 1990;
   break;
  }
  case 116:  {
   $1 = 1996;
   break;
  }
  case 117:  {
   $1 = 2003;
   break;
  }
  case 118:  {
   $1 = 2012;
   break;
  }
  case 122:  {
   $1 = 2017;
   break;
  }
  case 119:  {
   $1 = 2023;
   break;
  }
  case 120:  {
   $1 = 2032;
   break;
  }
  case 53:  {
   $1 = 2038;
   break;
  }
  case 54:  {
   $1 = 2041;
   break;
  }
  case 55:  {
   $1 = 2044;
   break;
  }
  case 60:  {
   $1 = 2047;
   break;
  }
  case 61:  {
   $1 = 2050;
   break;
  }
  case 56:  {
   $1 = 2053;
   break;
  }
  case 57:  {
   $1 = 2056;
   break;
  }
  case 58:  {
   $1 = 2059;
   break;
  }
  case 59:  {
   $1 = 2062;
   break;
  }
  case 62:  {
   $1 = 2065;
   break;
  }
  case 63:  {
   $1 = 2068;
   break;
  }
  case 64:  {
   $1 = 2071;
   break;
  }
  case 65:  {
   $1 = 2074;
   break;
  }
  case 66:  {
   $1 = 2077;
   break;
  }
  case 67:  {
   $1 = 2081;
   break;
  }
  case 68:  {
   $1 = 2084;
   break;
  }
  case 69:  {
   $1 = 2050;
   break;
  }
  case 70:  {
   $1 = 2087;
   break;
  }
  case 71:  {
   $1 = 2090;
   break;
  }
  case 72:  {
   $1 = 2093;
   break;
  }
  case 73:  {
   $1 = 2096;
   break;
  }
  case 74:  {
   $1 = 2099;
   break;
  }
  case 75:  {
   $1 = 2102;
   break;
  }
  case 76:  {
   $1 = 2105;
   break;
  }
  case 77:  {
   $1 = 2108;
   break;
  }
  case 78:  {
   $1 = 2111;
   break;
  }
  case 79:  {
   $1 = 2115;
   break;
  }
  case 80:  {
   $1 = 2119;
   break;
  }
  case 81:  {
   $1 = 2123;
   break;
  }
  case 136:  {
   $1 = 2130;
   break;
  }
  case 147:  {
   $1 = 2145;
   break;
  }
  case 148:  {
   $1 = 2159;
   break;
  }
  case 149:  {
   $1 = 2173;
   break;
  }
  case 150:  {
   $1 = 2186;
   break;
  }
  default: {
   $1 = 2198;
  }
  }
 } while(0);
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _TPointer_Copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _TTypeQualifierList_Copy($4,$5);
 STACKTOP = sp;return;
}
function _TTypeQualifierList_Copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 _TTypeQualifierList_Destroy($6);
 $7 = $2;
 _TTypeQualifierList_Init($7);
 $4 = 0;
 while(1) {
  $8 = $4;
  $9 = $3;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = (_TTypeQualifier_Create()|0);
  $5 = $13;
  $14 = $5;
  $15 = $3;
  $16 = $4;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  _TTypeQualifier_Copy($14,$18);
  $19 = $2;
  $20 = $5;
  _TTypeQualifierList_PushBack($19,$20);
  $21 = $4;
  $22 = (($21) + 1)|0;
  $4 = $22;
 }
 STACKTOP = sp;return;
}
function _TPointerList_IsPointer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 STACKTOP = sp;return ($4|0);
}
function _TPointerList_GetSize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $4 = 0;
  while(1) {
   $12 = $4;
   $13 = $3;
   $14 = ((($13)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($12|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $3;
   $18 = $4;
   $19 = (($17) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $5 = $20;
   $21 = $5;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_IsSizeToken($23)|0);
   if ($24) {
    label = 7;
    break;
   }
   $28 = $4;
   $29 = (($28) + 1)|0;
   $4 = $29;
  }
  if ((label|0) == 7) {
   label = 0;
   $25 = $5;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $2 = $27;
  }
  $30 = $3;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $3 = $32;
 }
 $33 = $2;
 STACKTOP = sp;return ($33|0);
}
function _TPointerList_IsPointerN($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $8 = $2;
   $9 = HEAP32[$8>>2]|0;
   $5 = $9;
   while(1) {
    $10 = $5;
    $11 = ($10|0)!=(0|0);
    if (!($11)) {
     break L1;
    }
    $12 = $4;
    $13 = (($12) + 1)|0;
    $4 = $13;
    $14 = $5;
    $15 = ((($14)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $5 = $16;
   }
  }
 } while(0);
 $17 = $4;
 $18 = $3;
 $19 = ($17|0)==($18|0);
 STACKTOP = sp;return ($19|0);
}
function _TPointerList_IsPointerToObject($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $3 = $14;
   $15 = $3;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $2 = 1;
   }
  }
 }
 $17 = $2;
 $18 = $17&1;
 STACKTOP = sp;return ($18|0);
}
function _TPointerList_IsAutoPointerToObject($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 L1: do {
  if ($8) {
   $9 = $3;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $4 = 0;
    while(1) {
     $13 = $4;
     $14 = $3;
     $15 = ((($14)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($13|0)<($16|0);
     if (!($17)) {
      break L1;
     }
     $18 = $3;
     $19 = $4;
     $20 = (($18) + ($19<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($21)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (_IsAutoToken($23)|0);
     if ($24) {
      break;
     }
     $25 = $4;
     $26 = (($25) + 1)|0;
     $4 = $26;
    }
    $2 = 1;
   }
  }
 } while(0);
 $27 = $2;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _TPointerList_IsAutoPointerSizeToObject($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $16 = $3;
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_IsAutoToken($19)|0);
    if ($20) {
     $21 = $3;
     $22 = ((($21)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ((($23)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (_IsSizeToken($25)|0);
     if ($26) {
      $38 = 1;
     } else {
      label = 6;
     }
    } else {
     label = 6;
    }
    if ((label|0) == 6) {
     $27 = $3;
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (_IsSizeToken($30)|0);
     if ($31) {
      $32 = $3;
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($33)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (_IsAutoToken($35)|0);
      $38 = $36;
     } else {
      $38 = 0;
     }
    }
    $37 = $38&1;
    $2 = $37;
   }
  }
 }
 $39 = $2;
 $40 = $39&1;
 STACKTOP = sp;return ($40|0);
}
function _TPointerList_IsAutoPointerToPointer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   $12 = $3;
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_IsAutoToken($15)|0);
   if ($16) {
    $17 = $3;
    $18 = ((($17)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $3 = $19;
    $20 = $3;
    $21 = ($20|0)!=(0|0);
    if ($21) {
     $22 = $3;
     $23 = ((($22)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if ($25) {
      $2 = 1;
     }
    }
   }
  }
 }
 $26 = $2;
 $27 = $26&1;
 STACKTOP = sp;return ($27|0);
}
function _TPointerList_IsAutoPointerToAutoPointer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $3;
   $9 = ((($8)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = $3;
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_IsAutoToken($15)|0);
    if ($16) {
     $17 = $3;
     $18 = ((($17)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $3 = $19;
     $20 = $3;
     $21 = ($20|0)!=(0|0);
     if ($21) {
      $22 = $3;
      $23 = ((($22)) + 16|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = $3;
       $27 = HEAP32[$26>>2]|0;
       $28 = ((($27)) + 8|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (_IsAutoToken($29)|0);
       if ($30) {
        $2 = 1;
        break;
       }
      }
      $31 = $3;
      $32 = ((($31)) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)==(2);
      if ($34) {
       $35 = $3;
       $36 = HEAP32[$35>>2]|0;
       $37 = ((($36)) + 8|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (_IsAutoToken($38)|0);
       if ($39) {
        $47 = 1;
       } else {
        $40 = $3;
        $41 = ((($40)) + 4|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ((($42)) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = (_IsAutoToken($44)|0);
        $47 = $45;
       }
       $46 = $47&1;
       $2 = $46;
      }
     }
    }
   }
  }
 } while(0);
 $48 = $2;
 $49 = $48&1;
 STACKTOP = sp;return ($49|0);
}
function _TTypeQualifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TTypeQualifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TTypeQualifier_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 14;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _String_Init($6);
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _TTypeQualifier_Copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _String_Set($5,$8);
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _TTypeQualifierList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ($7|0)>(4);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $10 = $2;
 $11 = $2;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13<<2)|0);
 HEAP32[$14>>2] = $9;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _TTypeQualifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _String_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 12|0);
 _TScannerItemList_Destroy($5);
 STACKTOP = sp;return;
}
function _String_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 _String_InitWith($4,$5);
 $6 = $2;
 _String_Swap($4,$6);
 _String_Destroy($4);
 STACKTOP = sp;return;
}
function _TStorageSpecifier_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(16)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 9;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _TStorageSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _TScannerItemList_Destroy($3);
 STACKTOP = sp;return;
}
function _TStorageSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TStorageSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TSpecifierQualifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 14:  {
    $6 = $1;
    _TTypeQualifier_Delete($6);
    break L1;
    break;
   }
   case 8:  {
    $7 = $1;
    _TStructUnionSpecifier_Delete($7);
    break L1;
    break;
   }
   case 10:  {
    $8 = $1;
    _TAtomicTypeSpecifier_Delete($8);
    break L1;
    break;
   }
   case 6:  {
    $9 = $1;
    _TSingleTypeSpecifier_Delete($9);
    break L1;
    break;
   }
   case 7:  {
    $10 = $1;
    _TEnumSpecifier_Delete($10);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _TSpecifierQualifierList_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_CanAdd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 while(1) {
  $14 = $11;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = $11;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $12 = $23;
  $24 = $12;
  $25 = HEAP32[$24>>2]|0;
  L4: do {
   switch ($25|0) {
   case 6:  {
    $26 = $12;
    $13 = $26;
    $27 = $13;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    switch ($29|0) {
    case 99:  {
     $10 = 1;
     break L4;
     break;
    }
    case 7:  {
     $9 = 1;
     break L4;
     break;
    }
    default: {
     break L4;
    }
    }
    break;
   }
   case 8:  {
    $7 = 1;
    break;
   }
   case 7:  {
    $8 = 1;
    break;
   }
   default: {
   }
   }
  } while(0);
  $30 = $11;
  $31 = (($30) + 1)|0;
  $11 = $31;
 }
 $32 = $4;
 $33 = ($32|0)==(7);
 if ($33) {
  $34 = $9;
  $35 = $34&1;
  if (!($35)) {
   $36 = $10;
   $37 = $36&1;
   if (!($37)) {
    $6 = 1;
   }
  }
 } else {
  $6 = 1;
 }
 $38 = $6;
 $39 = $38&1;
 STACKTOP = sp;return ($39|0);
}
function _TDeclarationSpecifiers_CanAddSpeficier($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 while(1) {
  $16 = $13;
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  $23 = $13;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $14 = $25;
  $26 = $14;
  $27 = HEAP32[$26>>2]|0;
  L4: do {
   switch ($27|0) {
   case 6:  {
    $28 = $14;
    $15 = $28;
    $29 = $15;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $cond = ($31|0)==(7);
    if ($cond) {
     $11 = 1;
     break L4;
    } else {
     $12 = 1;
     break L4;
    }
    break;
   }
   case 8:  {
    $7 = 1;
    $32 = $14;
    $9 = $32;
    break;
   }
   case 7:  {
    $8 = 1;
    $33 = $14;
    $10 = $33;
    break;
   }
   default: {
   }
   }
  } while(0);
  $34 = $13;
  $35 = (($34) + 1)|0;
  $13 = $35;
 }
 $36 = $4;
 $37 = ($36|0)==(7);
 do {
  if ($37) {
   $38 = $9;
   $39 = ($38|0)!=(0|0);
   if ($39) {
    $40 = $9;
    $41 = ((($40)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)!=(0|0);
    if ($43) {
     $44 = $9;
     $45 = ((($44)) + 16|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $5;
     $48 = (_strcmp($46,$47)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      break;
     }
    }
    $6 = 1;
    break;
   }
   $50 = $10;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $10;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)!=(0|0);
    if ($55) {
     $56 = $10;
     $57 = ((($56)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $5;
     $60 = (_strcmp($58,$59)|0);
     $61 = ($60|0)==(0);
     if ($61) {
      break;
     }
    }
    $6 = 1;
    break;
   } else {
    $62 = $11;
    $63 = $62&1;
    if ($63) {
     break;
    }
    $64 = $12;
    $65 = $64&1;
    if ($65) {
     break;
    }
    $6 = 1;
    break;
   }
  } else {
   $6 = 1;
  }
 } while(0);
 $66 = $6;
 $67 = $66&1;
 STACKTOP = sp;return ($67|0);
}
function _TDeclarationSpecifier_As_TSingleTypeSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(6);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _TDeclarationSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 14:  {
    $6 = $1;
    _TTypeQualifier_Delete($6);
    break L1;
    break;
   }
   case 8:  {
    $7 = $1;
    _TStructUnionSpecifier_Delete($7);
    break L1;
    break;
   }
   case 9:  {
    $8 = $1;
    _TStorageSpecifier_Delete($8);
    break L1;
    break;
   }
   case 10:  {
    $9 = $1;
    _TAtomicTypeSpecifier_Delete($9);
    break L1;
    break;
   }
   case 6:  {
    $10 = $1;
    _TSingleTypeSpecifier_Delete($10);
    break L1;
    break;
   }
   case 13:  {
    $11 = $1;
    _TAlignmentSpecifier_Delete($11);
    break L1;
    break;
   }
   case 15:  {
    $12 = $1;
    _TFunctionSpecifier_Delete($12);
    break L1;
    break;
   }
   case 7:  {
    $13 = $1;
    _TEnumSpecifier_Delete($13);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TFunctionSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TFunctionSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _TDeclarationSpecifier_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _TDeclarationSpecifiers_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _TDeclaration_FindDeclarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $2 = 0;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 $5 = 0;
 $9 = $3;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $6;
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)!=(0|0);
    if ($27) {
     $28 = $6;
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($29)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = $4;
     $34 = (_strcmp($32,$33)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      label = 9;
      break;
     }
    }
   }
  }
  $38 = $6;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $6 = $40;
 }
 if ((label|0) == 9) {
  $36 = $6;
  $37 = HEAP32[$36>>2]|0;
  $5 = $37;
 }
 $41 = $5;
 $2 = $41;
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function _TFunctionSpecifier_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(16)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 15;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _TFunctionSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _TScannerItemList_Destroy($3);
 STACKTOP = sp;return;
}
function _TDeclarationSpecifier_As_TStructUnionSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(8);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _TInitDeclaratorList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TInitDeclaratorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _TInitDeclarator_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TDeclaration_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(56)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 1;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TDeclarationSpecifiers_Init($6);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 _TInitDeclaratorList_Init($8);
 $9 = $0;
 $10 = ((($9)) + 24|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 36|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 44|0);
 HEAP8[$18>>0] = 0;
 $19 = $0;
 $20 = ((($19)) + 48|0);
 _TScannerItemList_Init($20);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _TParameter_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(48)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TDeclarationSpecifiers_Init($6);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 _TDeclarator_Init($8);
 $9 = $0;
 $10 = ((($9)) + 36|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 44|0);
 HEAP8[$12>>0] = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _TParameter_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TDeclarationSpecifiers_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _TDeclarator_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 36|0);
 _TScannerItemList_Destroy($9);
 $10 = $1;
 _free($10);
 STACKTOP = sp;return;
}
function _TDesignatorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _TDesignator_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TDesignator_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(28)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 _String_Init($4);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 20|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _TDesignator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _String_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _TExpression_Delete($5);
 $6 = $1;
 $7 = ((($6)) + 12|0);
 _TScannerItemList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 _TScannerItemList_Destroy($9);
 STACKTOP = sp;return;
}
function _TDesignator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TDesignator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TInitializerListType_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(40)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 28;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TInitializerList_Init($6);
 $7 = $0;
 $8 = ((($7)) + 12|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 $10 = ((($9)) + 20|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 28|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 36|0);
 HEAP8[$14>>0] = 0;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _TInitializerList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TInitializerListType_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _TInitializerList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 12|0);
 _TScannerItemList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 20|0);
 _TScannerItemList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 28|0);
 _TScannerItemList_Destroy($9);
 STACKTOP = sp;return;
}
function _TInitializerListType_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TInitializerListType_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TInitializerListItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TInitializerListItem_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TDesignatorList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TDesignatorList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  $$sink = $8;
 } else {
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $$sink = $11;
 }
 HEAP32[$$sink>>2] = $7;
 $12 = $3;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _TInitializerListItem_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TDesignatorList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _TInitializer_Delete($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _TScannerItemList_Destroy($7);
 STACKTOP = sp;return;
}
function _TInitializerListItem_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(28)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 _TDesignatorList_Init($4);
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 24|0);
 HEAP8[$12>>0] = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _SymbolMap_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = $3;
 $10 = (_SymbolMap_GetAssocAt($8,$9,$5,$6)|0);
 $7 = $10;
 $11 = $7;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $7;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $4 = $15;
 }
 $16 = $4;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $22 = $2;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = (_SymbolMap_Find($24,$25)|0);
 $4 = $26;
 $27 = $4;
 STACKTOP = sp;return ($27|0);
}
function _TProgram_GetFinalTypeDeclaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = $3;
 $7 = (_SymbolMap_FindTypedefDeclarationTarget($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _SymbolMap_FindTypedefDeclarationTarget($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $18 = $2;
 $19 = $3;
 $20 = (_SymbolMap_GetAssocAt($18,$19,$5,$6)|0);
 $7 = $20;
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   label = 19;
   break;
  }
  $23 = $7;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(1);
  if ($27) {
   $28 = $7;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $3;
   $32 = (_strcmp($30,$31)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    break;
   }
  }
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $7 = $75;
 }
 if ((label|0) == 19) {
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $34 = $7;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $8 = $36;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 while(1) {
  $37 = $11;
  $38 = $8;
  $39 = ((($38)) + 4|0);
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($37|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $8;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $11;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $12 = $48;
  $49 = $12;
  $50 = HEAP32[$49>>2]|0;
  switch ($50|0) {
  case 9:  {
   $51 = $12;
   $13 = $51;
   $52 = $13;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(114);
   if ($55) {
    $9 = 1;
   }
   break;
  }
  case 6:  {
   $56 = $12;
   $14 = $56;
   $57 = $14;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(7);
   if ($60) {
    $61 = $14;
    $62 = ((($61)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $10 = $63;
   }
   break;
  }
  default: {
  }
  }
  $64 = $11;
  $65 = (($64) + 1)|0;
  $11 = $65;
 }
 $66 = $9;
 $67 = $66&1;
 if (!($67)) {
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $68 = $10;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $2;
  $71 = $10;
  $72 = (_SymbolMap_FindTypedefDeclarationTarget($70,$71)|0);
  $4 = $72;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 } else {
  $73 = $8;
  $4 = $73;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _TProgram_Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TDeclarations_Init($2);
 $3 = $1;
 $4 = ((($3)) + 12|0);
 _TFileArray_Init($4);
 $5 = $1;
 $6 = ((($5)) + 24|0);
 _SymbolMap_Init($6);
 $7 = $1;
 $8 = ((($7)) + 40|0);
 _MacroMap_Init($8);
 $9 = $1;
 $10 = ((($9)) + 52|0);
 _StrBuilder_Init($10);
 STACKTOP = sp;return;
}
function _TFileArray_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _SymbolMap_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 ;HEAP32[$2>>2]=HEAP32[884>>2]|0;HEAP32[$2+4>>2]=HEAP32[884+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[884+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[884+12>>2]|0;
 $3 = $1;
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$2+12>>2]|0;
 STACKTOP = sp;return;
}
function _MacroMap_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $3 = $1;
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 STACKTOP = sp;return;
}
function _StrBuilder_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _SymbolMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _SymbolMap_RemoveAll($2);
 STACKTOP = sp;return;
}
function _MacroMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Map2_Destroy($2,6);
 STACKTOP = sp;return;
}
function _StrBuilder_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $1;
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _EvaluateConstantExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 57|0;
 $5 = sp + 44|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp + 24|0;
 $12 = sp + 20|0;
 $16 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = -987654321;
 $18 = $3;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $178 = $$pre_trunc&1;
  STACKTOP = sp;return ($178|0);
 }
 $6 = 0;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 L5: do {
  switch ($21|0) {
  case 35:  {
   $22 = $3;
   $7 = $22;
   $23 = $7;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_EvaluateConstantExpression($25,$8)|0);
   $27 = $26&1;
   $6 = $27;
   $28 = $7;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_EvaluateConstantExpression($30,$9)|0);
   $32 = $31&1;
   $6 = $32;
   $33 = $7;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   do {
    switch ($35|0) {
    case 29:  {
     $36 = HEAP32[$8>>2]|0;
     $37 = HEAP32[$9>>2]|0;
     $38 = Math_imul($36, $37)|0;
     HEAP32[$5>>2] = $38;
     $6 = 1;
     break L5;
     break;
    }
    case 30:  {
     $39 = HEAP32[$8>>2]|0;
     $40 = HEAP32[$9>>2]|0;
     $41 = (($39) + ($40))|0;
     HEAP32[$5>>2] = $41;
     $6 = 1;
     break L5;
     break;
    }
    case 32:  {
     $42 = HEAP32[$8>>2]|0;
     $43 = HEAP32[$9>>2]|0;
     $44 = (($42) - ($43))|0;
     HEAP32[$5>>2] = $44;
     $6 = 1;
     break L5;
     break;
    }
    case 62:  {
     $45 = HEAP32[$8>>2]|0;
     $46 = ($45|0)!=(0);
     $47 = HEAP32[$9>>2]|0;
     $48 = ($47|0)!=(0);
     $49 = $46 ? $48 : 0;
     $50 = $49&1;
     HEAP32[$5>>2] = $50;
     $6 = 1;
     break L5;
     break;
    }
    case 63:  {
     $51 = HEAP32[$8>>2]|0;
     $52 = ($51|0)!=(0);
     $53 = HEAP32[$9>>2]|0;
     $54 = ($53|0)!=(0);
     $55 = $52 ? 1 : $54;
     $56 = $55&1;
     HEAP32[$5>>2] = $56;
     $6 = 1;
     break L5;
     break;
    }
    case 61:  {
     $57 = HEAP32[$8>>2]|0;
     $58 = HEAP32[$9>>2]|0;
     $59 = ($57|0)!=($58|0);
     $60 = $59&1;
     HEAP32[$5>>2] = $60;
     $6 = 1;
     break L5;
     break;
    }
    case 60:  {
     $61 = HEAP32[$8>>2]|0;
     $62 = HEAP32[$9>>2]|0;
     $63 = ($61|0)==($62|0);
     $64 = $63&1;
     HEAP32[$5>>2] = $64;
     $6 = 1;
     break L5;
     break;
    }
    case 59:  {
     $65 = HEAP32[$8>>2]|0;
     $66 = HEAP32[$9>>2]|0;
     $67 = ($65|0)>=($66|0);
     $68 = $67&1;
     HEAP32[$5>>2] = $68;
     $6 = 1;
     break L5;
     break;
    }
    case 58:  {
     $69 = HEAP32[$8>>2]|0;
     $70 = HEAP32[$9>>2]|0;
     $71 = ($69|0)<=($70|0);
     $72 = $71&1;
     HEAP32[$5>>2] = $72;
     $6 = 1;
     break L5;
     break;
    }
    case 40:  {
     $73 = HEAP32[$8>>2]|0;
     $74 = HEAP32[$9>>2]|0;
     $75 = ($73|0)>($74|0);
     $76 = $75&1;
     HEAP32[$5>>2] = $76;
     $6 = 1;
     break L5;
     break;
    }
    case 38:  {
     $77 = HEAP32[$8>>2]|0;
     $78 = HEAP32[$9>>2]|0;
     $79 = ($77|0)<($78|0);
     $80 = $79&1;
     HEAP32[$5>>2] = $80;
     $6 = 1;
     break L5;
     break;
    }
    case 25:  {
     $81 = HEAP32[$8>>2]|0;
     $82 = HEAP32[$9>>2]|0;
     $83 = $81 & $82;
     HEAP32[$5>>2] = $83;
     $6 = 1;
     break L5;
     break;
    }
    case 57:  {
     $84 = HEAP32[$8>>2]|0;
     $85 = HEAP32[$9>>2]|0;
     $86 = $84 >> $85;
     HEAP32[$5>>2] = $86;
     $6 = 1;
     break L5;
     break;
    }
    case 56:  {
     $87 = HEAP32[$8>>2]|0;
     $88 = HEAP32[$9>>2]|0;
     $89 = $87 << $88;
     HEAP32[$5>>2] = $89;
     $6 = 1;
     break L5;
     break;
    }
    case 50:  {
     $90 = HEAP32[$8>>2]|0;
     $91 = HEAP32[$9>>2]|0;
     $92 = $90 | $91;
     HEAP32[$5>>2] = $92;
     $6 = 1;
     break L5;
     break;
    }
    case 35:  {
     $93 = HEAP32[$9>>2]|0;
     $94 = ($93|0)!=(0);
     if ($94) {
      $95 = HEAP32[$8>>2]|0;
      $96 = HEAP32[$9>>2]|0;
      $97 = (($95|0) / ($96|0))&-1;
      HEAP32[$5>>2] = $97;
      $6 = 1;
      break L5;
     } else {
      $6 = 0;
      break L5;
     }
     break;
    }
    default: {
     $6 = 0;
     break L5;
    }
    }
   } while(0);
   break;
  }
  case 36:  {
   $98 = $3;
   $99 = ((($98)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (_EvaluateConstantExpression($100,$10)|0);
   $102 = $101&1;
   $6 = $102;
   $103 = $3;
   $104 = ((($103)) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (_EvaluateConstantExpression($105,$11)|0);
   $107 = $106&1;
   $6 = $107;
   $108 = $3;
   $109 = ((($108)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (_EvaluateConstantExpression($110,$12)|0);
   $112 = $111&1;
   $6 = $112;
   break;
  }
  case 32:  {
   $113 = $3;
   $13 = $113;
   $114 = $13;
   $115 = ((($114)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)!=(0|0);
   $118 = $13;
   if ($117) {
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (_EvaluateConstantExpression($120,$5)|0);
    $122 = $121&1;
    $6 = $122;
    break L5;
   }
   $123 = ((($118)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   switch ($124|0) {
   case 7:  {
    HEAP32[$5>>2] = 0;
    $6 = 1;
    break L5;
    break;
   }
   case 9:  {
    $125 = $13;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_atoi($127)|0);
    HEAP32[$5>>2] = $128;
    $6 = 1;
    break L5;
    break;
   }
   case 10:  {
    $129 = $13;
    $130 = ((($129)) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (_strtol($131,0,16)|0);
    HEAP32[$5>>2] = $132;
    $6 = 1;
    break L5;
    break;
   }
   case 82:  {
    $133 = $13;
    $134 = ((($133)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)!=(0|0);
    if ($136) {
     $137 = $13;
     $138 = ((($137)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ((($139)) + 1|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $141 << 24 >> 24;
     HEAP32[$5>>2] = $142;
     $6 = 1;
     break L5;
    } else {
     HEAP32[$5>>2] = 0;
     break L5;
    }
    break;
   }
   default: {
    $6 = 0;
    break L5;
   }
   }
   break;
  }
  case 34:  {
   $143 = $3;
   $14 = $143;
   $144 = $14;
   $145 = (_TPostfixExpressionCore_CodePrint2($144,$5)|0);
   $146 = $145&1;
   $6 = $146;
   break;
  }
  case 30:  {
   $147 = $3;
   $15 = $147;
   $148 = $15;
   $149 = ((($148)) + 4|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ($150|0)==(110);
   $152 = $15;
   $153 = ((($152)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   if ($151) {
    $155 = (_EvaluateConstantExpression($154,$5)|0);
    $156 = $155&1;
    $6 = $156;
    break L5;
   }
   $157 = (_EvaluateConstantExpression($154,$16)|0);
   $158 = $157&1;
   $6 = $158;
   $159 = $15;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   switch ($161|0) {
   case 20:  {
    $162 = HEAP32[$16>>2]|0;
    $163 = ($162|0)!=(0);
    $164 = $163 ^ 1;
    $165 = $164&1;
    HEAP32[$5>>2] = $165;
    $6 = 1;
    break L5;
    break;
   }
   case 32:  {
    $166 = HEAP32[$16>>2]|0;
    $167 = (0 - ($166))|0;
    HEAP32[$5>>2] = $167;
    $6 = 1;
    break L5;
    break;
   }
   default: {
    break L5;
   }
   }
   break;
  }
  case 31:  {
   $168 = $3;
   $17 = $168;
   $169 = $17;
   $170 = ((($169)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (_EvaluateConstantExpression($171,$5)|0);
   $173 = $172&1;
   $6 = $173;
   break;
  }
  default: {
  }
  }
 } while(0);
 $174 = HEAP32[$5>>2]|0;
 $175 = $4;
 HEAP32[$175>>2] = $174;
 $176 = $6;
 $177 = $176&1;
 $$expand_i1_val2 = $177&1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $178 = $$pre_trunc&1;
 STACKTOP = sp;return ($178|0);
}
function _TPostfixExpressionCore_CodePrint2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $9;
 $10 = $2;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  (_EvaluateConstantExpression($16,$5)|0);
 }
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 switch ($19|0) {
 case 27:  {
  $23 = $2;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  (_EvaluateConstantExpression($25,$4)|0);
  break;
 }
 case 43:  {
  $20 = $2;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  (_EvaluateConstantExpression($22,$6)|0);
  break;
 }
 default: {
 }
 }
 $26 = $2;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return 1;
 }
 $30 = HEAP32[$4>>2]|0;
 HEAP32[$7>>2] = $30;
 $31 = $2;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 (_TPostfixExpressionCore_CodePrint2($33,$7)|0);
 $34 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $34;
 STACKTOP = sp;return 1;
}
function _TDeclaration_GetFunctionArguments($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = $1;
   $14 = ((($13)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    $18 = $1;
    $19 = ((($18)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0|0);
    if ($24) {
     $25 = $1;
     $26 = ((($25)) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($30)) + 52|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(3);
     if ($33) {
      $34 = $1;
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($37)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($39)) + 20|0);
      $2 = $40;
     }
    }
   }
  }
 }
 $41 = $2;
 STACKTOP = sp;return ($41|0);
}
function _TPrimaryExpressionLiteralItemList_Add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $$sink = $9;$$sink2 = $10;
 } else {
  $11 = ((($8)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$12>>2] = $7;
  $13 = $3;
  $14 = $2;
  $$sink = $13;$$sink2 = $14;
 }
 $15 = ((($$sink2)) + 4|0);
 HEAP32[$15>>2] = $$sink;
 STACKTOP = sp;return;
}
function _TDirectDeclarator_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(88)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $4 = $0;
 _String_Init($4);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = $0;
 $15 = ((($14)) + 20|0);
 _TParameterTypeList_Init($15);
 $16 = $0;
 $17 = ((($16)) + 48|0);
 HEAP32[$17>>2] = 0;
 $18 = $0;
 $19 = ((($18)) + 52|0);
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = ((($20)) + 56|0);
 _TScannerItemList_Init($21);
 $22 = $0;
 $23 = ((($22)) + 64|0);
 _TScannerItemList_Init($23);
 $24 = $0;
 $25 = ((($24)) + 72|0);
 _TScannerItemList_Init($25);
 $26 = $0;
 $27 = ((($26)) + 80|0);
 _TScannerItemList_Init($27);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _TTypeName_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(36)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  _TTypeName_Init($4);
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TTypeName_Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 26;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 16|0);
 _TDeclarator_Init($12);
 STACKTOP = sp;return;
}
function _TAtomicTypeSpecifier_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(64)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 10;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _TTypeName_Init($6);
 $7 = $0;
 $8 = ((($7)) + 40|0);
 _TScannerItemList_Init($8);
 $9 = $0;
 $10 = ((($9)) + 48|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 56|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _TPostfixExpressionCore_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(80)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 34;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _String_Init($8);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 24|0);
 _TInitializerList_Init($16);
 $17 = $0;
 $18 = ((($17)) + 32|0);
 _String_Init($18);
 $19 = $0;
 $20 = ((($19)) + 36|0);
 HEAP32[$20>>2] = 0;
 $21 = $0;
 $22 = ((($21)) + 40|0);
 _TScannerItemList_Init($22);
 $23 = $0;
 $24 = ((($23)) + 48|0);
 _TScannerItemList_Init($24);
 $25 = $0;
 $26 = ((($25)) + 56|0);
 _TScannerItemList_Init($26);
 $27 = $0;
 $28 = ((($27)) + 64|0);
 _TScannerItemList_Init($28);
 $29 = $0;
 $30 = ((($29)) + 72|0);
 _TScannerItemList_Init($30);
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _TCastExpressionType_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(60)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 31;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TTypeName_Init($8);
 $9 = $0;
 $10 = ((($9)) + 44|0);
 _TScannerItemList_Init($10);
 $11 = $0;
 $12 = ((($11)) + 52|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _TUnaryExpressionOperator_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(72)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $0;
 HEAP32[$4>>2] = 30;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 _TTypeName_Init($10);
 $11 = $0;
 $12 = ((($11)) + 48|0);
 _TScannerItemList_Init($12);
 $13 = $0;
 $14 = ((($13)) + 56|0);
 _TScannerItemList_Init($14);
 $15 = $0;
 $16 = ((($15)) + 64|0);
 _TScannerItemList_Init($16);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _ScannerItem_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(40)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  _ScannerItem_Init($4);
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _ScannerItem_Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _LocalStrBuilder_Init($2);
 $3 = $1;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 24|0);
 HEAP32[$6>>2] = -1;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 HEAP32[$8>>2] = -1;
 $9 = $1;
 $10 = ((($9)) + 32|0);
 HEAP8[$10>>0] = 1;
 $11 = $1;
 $12 = ((($11)) + 36|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _ScannerItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _ScannerItem_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _ScannerItem_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _LocalStrBuilder_Destroy($2);
 STACKTOP = sp;return;
}
function _ScannerItem_Reset($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _LocalStrBuilder_Clear($2);
 $3 = $1;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = 19;
 STACKTOP = sp;return;
}
function _BasicScanner_InitCore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 84|0);
 HEAP32[$5>>2] = 1;
 $6 = $3;
 $7 = $2;
 HEAP32[$7>>2] = $6;
 $8 = $2;
 $9 = ((($8)) + 88|0);
 HEAP32[$9>>2] = 0;
 $10 = $2;
 $11 = ((($10)) + 80|0);
 HEAP32[$11>>2] = -1;
 $12 = $2;
 $13 = ((($12)) + 76|0);
 HEAP8[$13>>0] = 1;
 $14 = $2;
 $15 = ((($14)) + 77|0);
 HEAP8[$15>>0] = 0;
 $16 = $2;
 $17 = ((($16)) + 36|0);
 _ScannerItem_Init($17);
 $18 = $2;
 $19 = ((($18)) + 36|0);
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = 1;
 STACKTOP = sp;return;
}
function _BasicScanner_Init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $7;
 _BasicScanner_InitCore($9,$10);
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = $5;
 $14 = $6;
 $15 = (_Stream_Init($12,$13,$14)|0);
 $16 = $15&1;
 $8 = $16;
 $17 = $8;
 $18 = $17&1;
 $19 = $18 ? 1 : 0;
 $20 = ($19|0)!=(0);
 STACKTOP = sp;return ($20|0);
}
function _Stream_Init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $$sink3 = 0, $$sink5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 24|0);
 HEAP32[$7>>2] = 1;
 $8 = $3;
 $9 = ((($8)) + 28|0);
 HEAP32[$9>>2] = 1;
 $10 = $3;
 $11 = ((($10)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 $14 = $5;
 _String_InitWith($13,$14);
 $15 = $3;
 $16 = $4;
 _String_InitWith($15,$16);
 $17 = $3;
 $18 = ((($17)) + 4|0);
 _String_InitWith($18,9460);
 $19 = $5;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $5;
  $22 = (_strlen($21)|0);
  $23 = $3;
  $$sink = $22;$$sink2 = $23;
 } else {
  $24 = $3;
  $$sink = 0;$$sink2 = $24;
 }
 $25 = ((($$sink2)) + 12|0);
 HEAP32[$25>>2] = $$sink;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $3;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $3;
   $37 = ((($36)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = $3;
   $$sink3 = $40;$$sink5 = $41;
   $43 = ((($$sink5)) + 16|0);
   HEAP32[$43>>2] = $$sink3;
   STACKTOP = sp;return 1;
  }
 }
 $42 = $3;
 $$sink3 = 0;$$sink5 = $42;
 $43 = ((($$sink5)) + 16|0);
 HEAP32[$43>>2] = $$sink3;
 STACKTOP = sp;return 1;
}
function _BasicScanner_InitFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _BasicScanner_InitCore($5,2);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = $3;
 $9 = (_Stream_InitFile($7,$8)|0);
 $10 = $9&1;
 $4 = $10;
 $11 = $4;
 $12 = $11&1;
 $13 = $12 ? 1 : 0;
 $14 = ($13|0)!=(0);
 STACKTOP = sp;return ($14|0);
}
function _Stream_InitFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _String_InitWith($5,$6);
 $7 = $2;
 $8 = ((($7)) + 4|0);
 _String_InitWith($8,0);
 $9 = $2;
 $10 = ((($9)) + 24|0);
 HEAP32[$10>>2] = 1;
 $11 = $2;
 $12 = ((($11)) + 28|0);
 HEAP32[$12>>2] = 1;
 $13 = $2;
 $14 = ((($13)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 $18 = $2;
 $19 = ((($18)) + 12|0);
 $20 = (_LoadFile($15,$17,$19)|0);
 $21 = $20&1;
 $4 = $21;
 $22 = $4;
 $23 = $22&1;
 if (!($23)) {
  $45 = $4;
  $46 = $45&1;
  STACKTOP = sp;return ($46|0);
 }
 $24 = $3;
 $25 = $2;
 $26 = ((($25)) + 4|0);
 _GetFullDir($24,$26);
 $27 = $2;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $2;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $2;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = $2;
   $$sink = $41;$$sink2 = $42;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $43 = $2;
  $$sink = 0;$$sink2 = $43;
 }
 $44 = ((($$sink2)) + 16|0);
 HEAP32[$44>>2] = $$sink;
 $45 = $4;
 $46 = $45&1;
 STACKTOP = sp;return ($46|0);
}
function _BasicScanner_Create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $10 = (_malloc(92)|0);
 $9 = $10;
 $11 = $9;
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   $13 = $9;
   $14 = $5;
   $15 = $6;
   $16 = $7;
   $17 = (_BasicScanner_Init($13,$14,$15,$16)|0);
   $18 = $17&1;
   $8 = $18;
   $19 = $8;
   $20 = $19&1;
   $21 = $20&1;
   $22 = ($21|0)==(1);
   $23 = $9;
   if ($22) {
    $24 = $4;
    HEAP32[$24>>2] = $23;
    break;
   } else {
    _free($23);
    break;
   }
  }
 } while(0);
 $25 = $8;
 $26 = $25&1;
 STACKTOP = sp;return ($26|0);
}
function _BasicScanner_CreateFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = (_malloc(92)|0);
 $5 = $6;
 $7 = $5;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = $5;
   $10 = $2;
   $11 = (_BasicScanner_InitFile($9,$10)|0);
   $12 = $11&1;
   $4 = $12;
   $13 = $4;
   $14 = $13&1;
   $15 = $14&1;
   $16 = ($15|0)==(1);
   $17 = $5;
   if ($16) {
    $18 = $3;
    HEAP32[$18>>2] = $17;
    break;
   } else {
    _free($17);
    break;
   }
  }
 } while(0);
 $19 = $4;
 $20 = $19&1;
 STACKTOP = sp;return ($20|0);
}
function _BasicScanner_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _Stream_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 36|0);
 _ScannerItem_Destroy($5);
 STACKTOP = sp;return;
}
function _Stream_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _String_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 4|0);
 _String_Destroy($4);
 $5 = $1;
 $6 = ((($5)) + 8|0);
 _String_Destroy($6);
 STACKTOP = sp;return;
}
function _BasicScanner_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _BasicScanner_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _BasicScanner_Match($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _BasicScanner_Next($2);
 STACKTOP = sp;return;
}
function _BasicScanner_Next($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink70 = 0, $$sink76 = 0, $$sink79 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond5 = 0;
 var $or$cond51 = 0, $or$cond53 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond59 = 0, $or$cond61 = 0, $or$cond63 = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond72 = 0, $or$cond75 = 0, $or$cond81 = 0, $or$cond83 = 0, $or$cond9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(1);
 $10 = $1;
 if ($9) {
  $11 = ((($10)) + 76|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&1;
  $14 = $1;
  $15 = ((($14)) + 36|0);
  if ($13) {
   _ScannerItem_Reset($15);
   $16 = $1;
   $17 = ((($16)) + 84|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = ((($19)) + 36|0);
   $21 = ((($20)) + 20|0);
   HEAP32[$21>>2] = $18;
   $22 = $1;
   $23 = ((($22)) + 36|0);
   $24 = $1;
   $25 = ((($24)) + 4|0);
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   _LocalStrBuilder_Set($23,$27);
   $28 = $1;
   $29 = ((($28)) + 76|0);
   HEAP8[$29>>0] = 0;
   STACKTOP = sp;return;
  } else {
   $30 = ((($15)) + 20|0);
   HEAP32[$30>>2] = 2;
   STACKTOP = sp;return;
  }
 }
 $31 = ((($10)) + 36|0);
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(149);
 if (!($34)) {
  $35 = $1;
  $36 = ((($35)) + 36|0);
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(150);
  if (!($39)) {
   $43 = $1;
   $44 = ((($43)) + 4|0);
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = ((($47)) + 36|0);
   $49 = ((($48)) + 24|0);
   HEAP32[$49>>2] = $46;
   $50 = $1;
   $51 = ((($50)) + 80|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $1;
   $54 = ((($53)) + 36|0);
   $55 = ((($54)) + 28|0);
   HEAP32[$55>>2] = $52;
   $2 = 0;
   $56 = $1;
   $57 = ((($56)) + 36|0);
   _ScannerItem_Reset($57);
   $58 = $1;
   $59 = ((($58)) + 4|0);
   $60 = ((($59)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $2 = $61;
   $62 = $1;
   $63 = ((($62)) + 4|0);
   $64 = (_Stream_LookAhead($63)|0);
   $3 = $64;
   $65 = $2;
   $66 = ($65|0)==(46);
   $67 = $3;
   $68 = ($67|0)==(46);
   $or$cond = $66 & $68;
   if ($or$cond) {
    $69 = $1;
    (_BasicScanner_MatchChar($69)|0);
    $70 = $1;
    $71 = (_BasicScanner_MatchChar($70)|0);
    $2 = $71;
    $72 = $2;
    $73 = ($72|0)!=(46);
    if ($73) {
     $74 = $1;
     $75 = ((($74)) + 36|0);
     $76 = ((($75)) + 20|0);
     HEAP32[$76>>2] = 19;
    }
    $77 = $1;
    (_BasicScanner_MatchChar($77)|0);
    $78 = $1;
    $79 = ((($78)) + 36|0);
    $80 = ((($79)) + 20|0);
    HEAP32[$80>>2] = 78;
    STACKTOP = sp;return;
   }
   $4 = 0;
   while(1) {
    $81 = $4;
    $82 = ($81>>>0)<(29);
    if (!($82)) {
     break;
    }
    $83 = $4;
    $84 = (8 + ($83<<3)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP8[$85>>0]|0;
    $87 = $86 << 24 >> 24;
    $88 = $2;
    $89 = ($87|0)==($88|0);
    if ($89) {
     $90 = $4;
     $91 = (8 + ($90<<3)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($92)) + 1|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94 << 24 >> 24;
     $96 = $3;
     $97 = ($95|0)==($96|0);
     if ($97) {
      label = 16;
      break;
     }
    }
    $109 = $4;
    $110 = (($109) + 1)|0;
    $4 = $110;
   }
   if ((label|0) == 16) {
    $98 = $4;
    $99 = (8 + ($98<<3)|0);
    $100 = ((($99)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $1;
    $103 = ((($102)) + 36|0);
    $104 = ((($103)) + 20|0);
    HEAP32[$104>>2] = $101;
    $105 = $1;
    (_BasicScanner_MatchChar($105)|0);
    $106 = $1;
    (_BasicScanner_MatchChar($106)|0);
    $107 = $1;
    $108 = ((($107)) + 76|0);
    HEAP8[$108>>0] = 0;
    STACKTOP = sp;return;
   }
   $5 = 0;
   while(1) {
    $111 = $5;
    $112 = ($111>>>0)<(25);
    if (!($112)) {
     break;
    }
    $113 = $5;
    $114 = (240 + ($113<<3)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP8[$115>>0]|0;
    $117 = $116 << 24 >> 24;
    $118 = $2;
    $119 = ($117|0)==($118|0);
    $120 = $5;
    if ($119) {
     label = 21;
     break;
    }
    $130 = (($120) + 1)|0;
    $5 = $130;
   }
   if ((label|0) == 21) {
    $121 = (240 + ($120<<3)|0);
    $122 = ((($121)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $1;
    $125 = ((($124)) + 36|0);
    $126 = ((($125)) + 20|0);
    HEAP32[$126>>2] = $123;
    $127 = $1;
    (_BasicScanner_MatchChar($127)|0);
    $128 = $1;
    $129 = ((($128)) + 76|0);
    HEAP8[$129>>0] = 0;
    STACKTOP = sp;return;
   }
   $131 = $2;
   $132 = ($131|0)==(34);
   if (!($132)) {
    $133 = $2;
    $134 = ($133|0)==(76);
    $135 = $3;
    $136 = ($135|0)==(34);
    $or$cond3 = $134 & $136;
    if (!($or$cond3)) {
     $164 = $2;
     $165 = ($164|0)==(39);
     if (!($165)) {
      $166 = $2;
      $167 = ($166|0)==(76);
      $168 = $3;
      $169 = ($168|0)==(39);
      $or$cond5 = $167 & $169;
      if (!($or$cond5)) {
       $189 = $2;
       $190 = ($189|0)>=(97);
       $191 = $2;
       $192 = ($191|0)<=(122);
       $or$cond7 = $190 & $192;
       if (!($or$cond7)) {
        $193 = $2;
        $194 = ($193|0)>=(65);
        $195 = $2;
        $196 = ($195|0)<=(90);
        $or$cond9 = $194 & $196;
        $197 = $2;
        $198 = ($197|0)==(95);
        $or$cond11 = $or$cond9 | $198;
        if (!($or$cond11)) {
         $237 = $2;
         $238 = ($237|0)==(48);
         do {
          if ($238) {
           $239 = $3;
           $240 = ($239|0)==(120);
           $241 = $3;
           $242 = ($241|0)==(88);
           $or$cond21 = $240 | $242;
           if (!($or$cond21)) {
            $243 = $3;
            $244 = ($243|0)>=(48);
            $245 = $3;
            $246 = ($245|0)<=(57);
            $or$cond23 = $244 & $246;
            if (!($or$cond23)) {
             break;
            }
           }
           $247 = $1;
           $248 = (_BasicScanner_MatchChar($247)|0);
           $2 = $248;
           $249 = $2;
           $250 = ($249|0)==(120);
           $251 = $2;
           $252 = ($251|0)==(88);
           $or$cond25 = $250 | $252;
           do {
            if ($or$cond25) {
             $253 = $1;
             $$sink76 = 10;$$sink79 = $253;
            } else {
             $254 = $3;
             $255 = ($254|0)>=(48);
             $256 = $3;
             $257 = ($256|0)<=(57);
             $or$cond27 = $255 & $257;
             if ($or$cond27) {
              $258 = $1;
              $$sink76 = 11;$$sink79 = $258;
              break;
             } else {
              ___assert_fail((2202|0),(2208|0),8698,(2224|0));
              // unreachable;
             }
            }
           } while(0);
           $259 = ((($$sink79)) + 36|0);
           $260 = ((($259)) + 20|0);
           HEAP32[$260>>2] = $$sink76;
           $261 = $1;
           $262 = (_BasicScanner_MatchChar($261)|0);
           $2 = $262;
           L58: while(1) {
            $263 = $2;
            $264 = ($263|0)>=(48);
            $265 = $2;
            $266 = ($265|0)<=(57);
            $or$cond29 = $264 & $266;
            do {
             if (!($or$cond29)) {
              $267 = $2;
              $268 = ($267|0)>=(65);
              $269 = $2;
              $270 = ($269|0)<=(70);
              $or$cond31 = $268 & $270;
              if ($or$cond31) {
               break;
              }
              $271 = $2;
              $272 = ($271|0)>=(97);
              $273 = $2;
              $274 = ($273|0)<=(102);
              $275 = $272 ? $274 : 0;
              if (!($275)) {
               break L58;
              }
             }
            } while(0);
            $276 = $1;
            $277 = (_BasicScanner_MatchChar($276)|0);
            $2 = $277;
           }
           $278 = $2;
           $279 = ($278|0)==(117);
           $280 = $2;
           $281 = ($280|0)==(85);
           $or$cond35 = $279 | $281;
           if ($or$cond35) {
            $282 = $1;
            $283 = (_BasicScanner_MatchChar($282)|0);
            $2 = $283;
           }
           $284 = $2;
           $285 = ($284|0)==(108);
           $286 = $2;
           $287 = ($286|0)==(76);
           $or$cond37 = $285 | $287;
           if ($or$cond37) {
            $288 = $1;
            $289 = (_BasicScanner_MatchChar($288)|0);
            $2 = $289;
            $290 = $2;
            $291 = ($290|0)==(108);
            $292 = $2;
            $293 = ($292|0)==(76);
            $or$cond39 = $291 | $293;
            if ($or$cond39) {
             $294 = $1;
             $295 = (_BasicScanner_MatchChar($294)|0);
             $2 = $295;
             STACKTOP = sp;return;
            }
            $296 = $2;
            $297 = ($296|0)==(117);
            $298 = $2;
            $299 = ($298|0)==(85);
            $or$cond41 = $297 | $299;
            if (!($or$cond41)) {
             STACKTOP = sp;return;
            }
            $300 = $1;
            $301 = (_BasicScanner_MatchChar($300)|0);
            $2 = $301;
            STACKTOP = sp;return;
           }
           $302 = $2;
           $303 = ($302|0)==(105);
           $304 = $2;
           $305 = ($304|0)==(73);
           $or$cond43 = $303 | $305;
           if (!($or$cond43)) {
            STACKTOP = sp;return;
           }
           $306 = $1;
           $307 = (_BasicScanner_MatchChar($306)|0);
           $2 = $307;
           $308 = $2;
           $309 = ($308|0)==(51);
           if ($309) {
            $310 = $1;
            $311 = (_BasicScanner_MatchChar($310)|0);
            $2 = $311;
            $312 = $2;
            $313 = ($312|0)==(50);
            if (!($313)) {
             STACKTOP = sp;return;
            }
            $314 = $1;
            $315 = (_BasicScanner_MatchChar($314)|0);
            $2 = $315;
            STACKTOP = sp;return;
           }
           $316 = $2;
           $317 = ($316|0)==(49);
           if ($317) {
            $318 = $1;
            $319 = (_BasicScanner_MatchChar($318)|0);
            $2 = $319;
            $320 = $2;
            $321 = ($320|0)==(54);
            if (!($321)) {
             STACKTOP = sp;return;
            }
            $322 = $1;
            $323 = (_BasicScanner_MatchChar($322)|0);
            $2 = $323;
            STACKTOP = sp;return;
           }
           $324 = $2;
           $325 = ($324|0)==(54);
           if ($325) {
            $326 = $1;
            $327 = (_BasicScanner_MatchChar($326)|0);
            $2 = $327;
            $328 = $2;
            $329 = ($328|0)==(52);
            if (!($329)) {
             STACKTOP = sp;return;
            }
            $330 = $1;
            $331 = (_BasicScanner_MatchChar($330)|0);
            $2 = $331;
            STACKTOP = sp;return;
           } else {
            $332 = $2;
            $333 = ($332|0)==(56);
            if (!($333)) {
             STACKTOP = sp;return;
            }
            $334 = $1;
            $335 = (_BasicScanner_MatchChar($334)|0);
            $2 = $335;
            STACKTOP = sp;return;
           }
          }
         } while(0);
         $336 = $2;
         $337 = ($336|0)>=(48);
         $338 = $2;
         $339 = ($338|0)<=(57);
         $or$cond45 = $337 & $339;
         if ($or$cond45) {
          $340 = $1;
          $341 = ((($340)) + 36|0);
          $342 = ((($341)) + 20|0);
          HEAP32[$342>>2] = 9;
          $343 = $1;
          $344 = (_BasicScanner_MatchChar($343)|0);
          $2 = $344;
          while(1) {
           $345 = $2;
           $346 = ($345|0)>=(48);
           $347 = $2;
           $348 = ($347|0)<=(57);
           $349 = $346 ? $348 : 0;
           if (!($349)) {
            break;
           }
           $350 = $1;
           $351 = (_BasicScanner_MatchChar($350)|0);
           $2 = $351;
          }
          $352 = $2;
          $353 = ($352|0)==(117);
          $354 = $2;
          $355 = ($354|0)==(85);
          $or$cond47 = $353 | $355;
          if ($or$cond47) {
           $356 = $1;
           $357 = (_BasicScanner_MatchChar($356)|0);
           $2 = $357;
          }
          $358 = $2;
          $359 = ($358|0)==(108);
          $360 = $2;
          $361 = ($360|0)==(76);
          $or$cond49 = $359 | $361;
          do {
           if ($or$cond49) {
            $362 = $1;
            $363 = (_BasicScanner_MatchChar($362)|0);
            $2 = $363;
            $364 = $2;
            $365 = ($364|0)==(108);
            $366 = $2;
            $367 = ($366|0)==(76);
            $or$cond51 = $365 | $367;
            if ($or$cond51) {
             $368 = $1;
             $369 = (_BasicScanner_MatchChar($368)|0);
             $2 = $369;
             break;
            }
            $370 = $2;
            $371 = ($370|0)==(117);
            $372 = $2;
            $373 = ($372|0)==(85);
            $or$cond53 = $371 | $373;
            if (!($or$cond53)) {
             break;
            }
            $374 = $1;
            $375 = (_BasicScanner_MatchChar($374)|0);
            $2 = $375;
           } else {
            $376 = $2;
            $377 = ($376|0)==(105);
            $378 = $2;
            $379 = ($378|0)==(73);
            $or$cond55 = $377 | $379;
            if ($or$cond55) {
             $380 = $1;
             $381 = (_BasicScanner_MatchChar($380)|0);
             $2 = $381;
             $382 = $2;
             $383 = ($382|0)==(51);
             if ($383) {
              $384 = $1;
              $385 = (_BasicScanner_MatchChar($384)|0);
              $2 = $385;
              $386 = $2;
              $387 = ($386|0)==(50);
              if (!($387)) {
               break;
              }
              $388 = $1;
              $389 = (_BasicScanner_MatchChar($388)|0);
              $2 = $389;
              break;
             }
             $390 = $2;
             $391 = ($390|0)==(49);
             if ($391) {
              $392 = $1;
              $393 = (_BasicScanner_MatchChar($392)|0);
              $2 = $393;
              $394 = $2;
              $395 = ($394|0)==(54);
              if (!($395)) {
               break;
              }
              $396 = $1;
              $397 = (_BasicScanner_MatchChar($396)|0);
              $2 = $397;
              break;
             }
             $398 = $2;
             $399 = ($398|0)==(54);
             if ($399) {
              $400 = $1;
              $401 = (_BasicScanner_MatchChar($400)|0);
              $2 = $401;
              $402 = $2;
              $403 = ($402|0)==(52);
              if (!($403)) {
               break;
              }
              $404 = $1;
              $405 = (_BasicScanner_MatchChar($404)|0);
              $2 = $405;
              break;
             } else {
              $406 = $2;
              $407 = ($406|0)==(56);
              if (!($407)) {
               break;
              }
              $408 = $1;
              $409 = (_BasicScanner_MatchChar($408)|0);
              $2 = $409;
              break;
             }
            }
            $410 = $2;
            $411 = ($410|0)==(46);
            L140: do {
             if ($411) {
              $412 = $1;
              $413 = (_BasicScanner_MatchChar($412)|0);
              $2 = $413;
              $414 = $1;
              $415 = ((($414)) + 36|0);
              $416 = ((($415)) + 20|0);
              HEAP32[$416>>2] = 12;
              while(1) {
               $417 = $2;
               $418 = ($417|0)>=(48);
               $419 = $2;
               $420 = ($419|0)<=(57);
               $421 = $418 ? $420 : 0;
               if (!($421)) {
                break L140;
               }
               $422 = $1;
               $423 = (_BasicScanner_MatchChar($422)|0);
               $2 = $423;
              }
             }
            } while(0);
            $424 = $1;
            $425 = ((($424)) + 4|0);
            $426 = ((($425)) + 16|0);
            $427 = HEAP32[$426>>2]|0;
            $428 = ($427|0)==(101);
            if ($428) {
             label = 117;
            } else {
             $429 = $1;
             $430 = ((($429)) + 4|0);
             $431 = ((($430)) + 16|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = ($432|0)==(69);
             if ($433) {
              label = 117;
             }
            }
            L148: do {
             if ((label|0) == 117) {
              $434 = $1;
              $435 = (_BasicScanner_MatchChar($434)|0);
              $2 = $435;
              $436 = $2;
              $437 = ($436|0)==(45);
              $438 = $2;
              $439 = ($438|0)==(43);
              $or$cond57 = $437 | $439;
              if ($or$cond57) {
               $440 = $1;
               $441 = (_BasicScanner_MatchChar($440)|0);
               $2 = $441;
              }
              while(1) {
               $442 = $2;
               $443 = ($442|0)>=(48);
               $444 = $2;
               $445 = ($444|0)<=(57);
               $446 = $443 ? $445 : 0;
               if (!($446)) {
                break L148;
               }
               $447 = $1;
               $448 = (_BasicScanner_MatchChar($447)|0);
               $2 = $448;
              }
             }
            } while(0);
            $449 = $2;
            $450 = ($449|0)==(76);
            $451 = $2;
            $452 = ($451|0)==(108);
            $or$cond59 = $450 | $452;
            $453 = $2;
            $454 = ($453|0)==(70);
            $or$cond61 = $or$cond59 | $454;
            $455 = $2;
            $456 = ($455|0)==(102);
            $or$cond63 = $or$cond61 | $456;
            if (!($or$cond63)) {
             break;
            }
            $457 = $1;
            $458 = (_BasicScanner_MatchChar($457)|0);
            $2 = $458;
           }
          } while(0);
          $459 = $1;
          $460 = ((($459)) + 76|0);
          HEAP8[$460>>0] = 0;
          STACKTOP = sp;return;
         }
         $461 = $2;
         $462 = ($461|0)==(10);
         $463 = $2;
         $464 = ($463|0)==(13);
         $or$cond65 = $462 | $464;
         if ($or$cond65) {
          $465 = $1;
          $466 = ((($465)) + 36|0);
          $467 = ((($466)) + 20|0);
          HEAP32[$467>>2] = 14;
          $468 = $2;
          $469 = ($468|0)==(13);
          $470 = $3;
          $471 = ($470|0)==(10);
          $or$cond67 = $469 & $471;
          $472 = $1;
          if ($or$cond67) {
           $473 = ((($472)) + 4|0);
           _Stream_Match($473);
           $474 = $1;
           $475 = ((($474)) + 4|0);
           $476 = ((($475)) + 16|0);
           $477 = HEAP32[$476>>2]|0;
           $2 = $477;
           $478 = $1;
           $479 = (_BasicScanner_MatchChar($478)|0);
           $2 = $479;
          } else {
           $480 = (_BasicScanner_MatchChar($472)|0);
           $2 = $480;
           $481 = $1;
           $482 = ((($481)) + 36|0);
           _LocalStrBuilder_Clear($482);
           $483 = $1;
           $484 = ((($483)) + 36|0);
           _LocalStrBuilder_Append($484,2242);
          }
          $485 = $1;
          $486 = ((($485)) + 76|0);
          HEAP8[$486>>0] = 1;
          STACKTOP = sp;return;
         }
         $487 = $2;
         $488 = ($487|0)==(0);
         if ($488) {
          $489 = $1;
          $490 = ((($489)) + 77|0);
          $491 = HEAP8[$490>>0]|0;
          $492 = $491&1;
          $493 = $1;
          $494 = ((($493)) + 36|0);
          $495 = ((($494)) + 20|0);
          $$sink = $492 ? 149 : 150;
          HEAP32[$495>>2] = $$sink;
          $496 = $1;
          $497 = ((($496)) + 76|0);
          HEAP8[$497>>0] = 0;
          STACKTOP = sp;return;
         }
         $498 = $2;
         $499 = ($498|0)==(12);
         if ($499) {
          $500 = $1;
          $501 = ((($500)) + 36|0);
          $502 = ((($501)) + 20|0);
          HEAP32[$502>>2] = 8;
          $503 = $1;
          (_BasicScanner_MatchChar($503)|0);
          STACKTOP = sp;return;
         }
         $504 = $2;
         $505 = ($504|0)==(32);
         $506 = $2;
         $507 = ($506|0)==(9);
         $or$cond69 = $505 | $507;
         if ($or$cond69) {
          $508 = $1;
          $509 = ((($508)) + 36|0);
          $510 = ((($509)) + 20|0);
          HEAP32[$510>>2] = 8;
          $511 = $1;
          $512 = (_BasicScanner_MatchChar($511)|0);
          $2 = $512;
          while(1) {
           $513 = $2;
           $514 = ($513|0)==(32);
           $515 = $2;
           $516 = ($515|0)==(9);
           $517 = $514 ? 1 : $516;
           if (!($517)) {
            break;
           }
           $518 = $1;
           $519 = (_BasicScanner_MatchChar($518)|0);
           $2 = $519;
          }
          STACKTOP = sp;return;
         }
         $520 = $2;
         $521 = ($520|0)<(32);
         if ($521) {
          $522 = $1;
          $523 = ((($522)) + 36|0);
          $524 = ((($523)) + 20|0);
          HEAP32[$524>>2] = 8;
         }
         $525 = $1;
         $526 = ((($525)) + 4|0);
         $527 = ((($526)) + 16|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = ($528|0)==(35);
         if ($529) {
          $530 = $1;
          $531 = (_BasicScanner_MatchChar($530)|0);
          $2 = $531;
          $532 = $1;
          $533 = ((($532)) + 76|0);
          $534 = HEAP8[$533>>0]|0;
          $535 = $534&1;
          $536 = $1;
          $537 = ((($536)) + 36|0);
          $538 = ((($537)) + 20|0);
          $$sink70 = $535 ? 18 : 22;
          HEAP32[$538>>2] = $$sink70;
          STACKTOP = sp;return;
         }
         $539 = $2;
         $540 = ($539|0)==(47);
         if ($540) {
          $541 = $3;
          $542 = ($541|0)==(47);
          if ($542) {
           $543 = $1;
           $544 = ((($543)) + 36|0);
           $545 = ((($544)) + 20|0);
           HEAP32[$545>>2] = 4;
           $546 = $1;
           $547 = (_BasicScanner_MatchChar($546)|0);
           $2 = $547;
           $548 = $1;
           $549 = (_BasicScanner_MatchChar($548)|0);
           $2 = $549;
           while(1) {
            $550 = $2;
            $551 = ($550|0)!=(13);
            $552 = $2;
            $553 = ($552|0)!=(10);
            $or$cond72 = $551 & $553;
            $554 = $2;
            $555 = ($554|0)!=(0);
            $or$cond81 = $or$cond72 & $555;
            if (!($or$cond81)) {
             break;
            }
            $556 = $1;
            $557 = (_BasicScanner_MatchChar($556)|0);
            $2 = $557;
           }
           STACKTOP = sp;return;
          }
          $558 = $3;
          $559 = ($558|0)==(42);
          $560 = $1;
          $561 = ((($560)) + 36|0);
          $562 = ((($561)) + 20|0);
          if (!($559)) {
           HEAP32[$562>>2] = 35;
           $588 = $1;
           $589 = (_BasicScanner_MatchChar($588)|0);
           $2 = $589;
           STACKTOP = sp;return;
          }
          HEAP32[$562>>2] = 5;
          $563 = $1;
          $564 = (_BasicScanner_MatchChar($563)|0);
          $2 = $564;
          $565 = $1;
          $566 = (_BasicScanner_MatchChar($565)|0);
          $2 = $566;
          while(1) {
           $567 = $2;
           $568 = ($567|0)==(42);
           if ($568) {
            $569 = $1;
            $570 = (_BasicScanner_MatchChar($569)|0);
            $2 = $570;
            $571 = $2;
            $572 = ($571|0)==(47);
            if ($572) {
             break;
            } else {
             continue;
            }
           }
           $575 = $2;
           $576 = ($575|0)==(13);
           $577 = $1;
           if (!($576)) {
            $587 = (_BasicScanner_MatchChar($577)|0);
            $2 = $587;
            continue;
           }
           $578 = ((($577)) + 4|0);
           _Stream_Match($578);
           $579 = $1;
           $580 = ((($579)) + 4|0);
           $581 = ((($580)) + 16|0);
           $582 = HEAP32[$581>>2]|0;
           $2 = $582;
           $583 = $2;
           $584 = ($583|0)==(10);
           if (!($584)) {
            continue;
           }
           $585 = $1;
           $586 = (_BasicScanner_MatchChar($585)|0);
           $2 = $586;
          }
          $573 = $1;
          $574 = (_BasicScanner_MatchChar($573)|0);
          $2 = $574;
          STACKTOP = sp;return;
         }
         $590 = $2;
         $591 = ($590|0)==(92);
         do {
          if ($591) {
           $592 = $3;
           $593 = ($592|0)==(10);
           $594 = $3;
           $595 = ($594|0)==(13);
           $or$cond75 = $593 | $595;
           if (!($or$cond75)) {
            break;
           }
           $596 = $1;
           $597 = (_BasicScanner_MatchChar($596)|0);
           $2 = $597;
           $598 = $2;
           $599 = ($598|0)==(13);
           do {
            if ($599) {
             $600 = $1;
             $601 = (_BasicScanner_MatchChar($600)|0);
             $2 = $601;
             $602 = $2;
             $603 = ($602|0)==(10);
             if (!($603)) {
              break;
             }
             $604 = $1;
             $605 = (_BasicScanner_MatchChar($604)|0);
             $2 = $605;
            } else {
             $606 = $2;
             $607 = ($606|0)==(10);
             if (!($607)) {
              break;
             }
             $608 = $1;
             (_BasicScanner_MatchChar($608)|0);
            }
           } while(0);
           $609 = $1;
           $610 = ((($609)) + 36|0);
           _LocalStrBuilder_Set($610,2245);
           $611 = $1;
           $612 = ((($611)) + 36|0);
           $613 = ((($612)) + 20|0);
           HEAP32[$613>>2] = 15;
           $614 = $1;
           $615 = ((($614)) + 76|0);
           HEAP8[$615>>0] = 0;
           STACKTOP = sp;return;
          }
         } while(0);
         $616 = $2;
         $617 = ($616|0)==(2);
         if ($617) {
          $618 = $1;
          $619 = (_BasicScanner_MatchChar($618)|0);
          $2 = $619;
          $620 = $1;
          $621 = ((($620)) + 36|0);
          $622 = ((($621)) + 20|0);
          HEAP32[$622>>2] = 13;
          $623 = $1;
          $624 = ((($623)) + 76|0);
          HEAP8[$624>>0] = 0;
          STACKTOP = sp;return;
         }
         $625 = $2;
         $626 = ($625|0)==(92);
         $627 = $1;
         if ($626) {
          $628 = (_BasicScanner_MatchChar($627)|0);
          $2 = $628;
          $629 = $1;
          $630 = ((($629)) + 36|0);
          $631 = ((($630)) + 20|0);
          HEAP32[$631>>2] = 44;
          STACKTOP = sp;return;
         }
         $632 = ((($627)) + 36|0);
         $633 = ((($632)) + 20|0);
         $634 = HEAP32[$633>>2]|0;
         $635 = ($634|0)==(19);
         if (!($635)) {
          STACKTOP = sp;return;
         }
         (_printf(2248,$vararg_buffer)|0);
         STACKTOP = sp;return;
        }
       }
       $199 = $1;
       $200 = ((($199)) + 36|0);
       $201 = ((($200)) + 20|0);
       HEAP32[$201>>2] = 7;
       $202 = $1;
       $203 = (_BasicScanner_MatchChar($202)|0);
       $2 = $203;
       while(1) {
        $204 = $2;
        $205 = ($204|0)>=(97);
        $206 = $2;
        $207 = ($206|0)<=(122);
        $or$cond13 = $205 & $207;
        if (!($or$cond13)) {
         $208 = $2;
         $209 = ($208|0)>=(65);
         $210 = $2;
         $211 = ($210|0)<=(90);
         $or$cond15 = $209 & $211;
         if (!($or$cond15)) {
          $212 = $2;
          $213 = ($212|0)>=(48);
          $214 = $2;
          $215 = ($214|0)<=(57);
          $or$cond17 = $213 & $215;
          $216 = $2;
          $217 = ($216|0)==(95);
          $or$cond83 = $or$cond17 | $217;
          if (!($or$cond83)) {
           break;
          }
         }
        }
        $218 = $1;
        $219 = (_BasicScanner_MatchChar($218)|0);
        $2 = $219;
       }
       $6 = 0;
       while(1) {
        $220 = $6;
        $221 = ($220>>>0)<(53);
        if (!($221)) {
         break;
        }
        $222 = $1;
        $223 = $6;
        $224 = (440 + ($223<<3)|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = (_BasicScanner_IsLexeme($222,$225)|0);
        $227 = $6;
        if ($226) {
         label = 53;
         break;
        }
        $234 = (($227) + 1)|0;
        $6 = $234;
       }
       if ((label|0) == 53) {
        $228 = (440 + ($227<<3)|0);
        $229 = ((($228)) + 4|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = $1;
        $232 = ((($231)) + 36|0);
        $233 = ((($232)) + 20|0);
        HEAP32[$233>>2] = $230;
       }
       $235 = $1;
       $236 = ((($235)) + 76|0);
       HEAP8[$236>>0] = 0;
       STACKTOP = sp;return;
      }
     }
     $170 = $2;
     $171 = ($170|0)==(76);
     if ($171) {
      $172 = $1;
      $173 = (_BasicScanner_MatchChar($172)|0);
      $2 = $173;
     }
     $174 = $1;
     $175 = ((($174)) + 36|0);
     $176 = ((($175)) + 20|0);
     HEAP32[$176>>2] = 82;
     $177 = $1;
     $178 = (_BasicScanner_MatchChar($177)|0);
     $2 = $178;
     $179 = $2;
     $180 = ($179|0)==(92);
     $181 = $1;
     $182 = (_BasicScanner_MatchChar($181)|0);
     $2 = $182;
     if ($180) {
      $183 = $1;
      $184 = (_BasicScanner_MatchChar($183)|0);
      $2 = $184;
     }
     $185 = $1;
     $186 = (_BasicScanner_MatchChar($185)|0);
     $2 = $186;
     $187 = $1;
     $188 = ((($187)) + 76|0);
     HEAP8[$188>>0] = 0;
     STACKTOP = sp;return;
    }
   }
   $137 = $2;
   $138 = ($137|0)==(76);
   if ($138) {
    $139 = $1;
    $140 = (_BasicScanner_MatchChar($139)|0);
    $2 = $140;
   }
   $141 = $1;
   $142 = ((($141)) + 36|0);
   $143 = ((($142)) + 20|0);
   HEAP32[$143>>2] = 6;
   $144 = $1;
   $145 = (_BasicScanner_MatchChar($144)|0);
   $2 = $145;
   while(1) {
    $146 = $2;
    $147 = ($146|0)==(34);
    if ($147) {
     label = 29;
     break;
    }
    $150 = $2;
    $151 = ($150|0)==(92);
    if ($151) {
     $152 = $1;
     $153 = (_BasicScanner_MatchChar($152)|0);
     $2 = $153;
     $154 = $1;
     $155 = (_BasicScanner_MatchChar($154)|0);
     $2 = $155;
     continue;
    }
    $156 = $2;
    $157 = ($156|0)==(0);
    $158 = $1;
    if ($157) {
     label = 33;
     break;
    }
    $161 = (_BasicScanner_MatchChar($158)|0);
    $2 = $161;
   }
   if ((label|0) == 29) {
    $148 = $1;
    $149 = (_BasicScanner_MatchChar($148)|0);
    $2 = $149;
   }
   else if ((label|0) == 33) {
    $159 = ((($158)) + 36|0);
    $160 = ((($159)) + 20|0);
    HEAP32[$160>>2] = 2;
   }
   $162 = $1;
   $163 = ((($162)) + 76|0);
   HEAP8[$163>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 $40 = $1;
 $41 = ((($40)) + 36|0);
 $42 = ((($41)) + 20|0);
 HEAP32[$42>>2] = 2;
 STACKTOP = sp;return;
}
function _Stream_LookAhead($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = $2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 if ($10) {
  $1 = 0;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  $18 = (($13) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _BasicScanner_MatchChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 36|0);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7&255;
 _LocalStrBuilder_AppendChar($3,$8);
 $9 = $1;
 $10 = ((($9)) + 4|0);
 _Stream_Match($10);
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _BasicScanner_IsLexeme($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (_BasicScanner_Lexeme($4)|0);
 $6 = $3;
 $7 = (_strcmp($5,$6)|0);
 $8 = ($7|0)==(0);
 STACKTOP = sp;return ($8|0);
}
function _Stream_Match($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink1 = 0, $$sink3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>=($7|0);
 $9 = $1;
 do {
  if ($8) {
   $10 = ((($9)) + 16|0);
   $$sink = $10;
  } else {
   $11 = ((($9)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 1)|0;
   HEAP32[$11>>2] = $13;
   $14 = $1;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[$15>>2] = $17;
   $18 = $1;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($20|0)==($23|0);
   $25 = $1;
   if ($24) {
    $$sink1 = 0;$$sink3 = $25;
   } else {
    $26 = ((($25)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $1;
    $29 = ((($28)) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($27) + ($30)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = $1;
    $$sink1 = $33;$$sink3 = $34;
   }
   $35 = ((($$sink3)) + 16|0);
   HEAP32[$35>>2] = $$sink1;
   $36 = $1;
   $37 = ((($36)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(10);
   if ($39) {
    $40 = $1;
    $41 = ((($40)) + 24|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$41>>2] = $43;
    $44 = $1;
    $45 = ((($44)) + 28|0);
    $$sink = $45;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$$sink>>2] = 0;
 STACKTOP = sp;return;
}
function _BasicScanner_Lexeme($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _BasicScannerStack_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _BasicScannerStack_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $3;
  $8 = $2;
  HEAP32[$8>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = ((($11)) + 88|0);
  HEAP32[$12>>2] = $10;
  $13 = $3;
  $14 = $2;
  HEAP32[$14>>2] = $13;
  STACKTOP = sp;return;
 }
}
function _BasicScannerStack_PopGet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _BasicScannerStack_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_BasicScannerStack_PopGet($2)|0);
 _BasicScanner_Delete($3);
 STACKTOP = sp;return;
}
function _BasicScannerStack_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 88|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _BasicScanner_Delete($12);
 }
 STACKTOP = sp;return;
}
function _Output_Append($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if ($8) {
  $9 = $4;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $3;
   $14 = $5;
   (_StrBuilder_Append($13,$14)|0);
  }
 }
 STACKTOP = sp;return;
}
function _StrBuilder_AppendChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 HEAP8[$3>>0] = $1;
 $4 = $2;
 $5 = (_StrBuilder_AppendN($4,$3,1)|0);
 STACKTOP = sp;return ($5|0);
}
function _TStructDeclarator_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $8;
 $13 = HEAP32[$12>>2]|0;
 $14 = $9;
 _TDeclarator_CodePrint($10,$11,$13,1,$14);
 $15 = $8;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $6;
 $20 = $8;
 $21 = ((($20)) + 20|0);
 $22 = $9;
 _TNodeClueList_CodePrint($19,$21,$22);
 STACKTOP = sp;return;
}
function _TDeclarator_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $10 = $3&1;
 $8 = $10;
 $9 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $9;
 _TPointerList_CodePrint($11,$12,$13,$14);
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $8;
 $21 = $20&1;
 $22 = $9;
 _TDirectDeclarator_CodePrint($15,$16,$19,$21,$22);
 STACKTOP = sp;return;
}
function _TNodeClueList_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 16|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 while(1) {
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  L7: do {
   switch ($17|0) {
   case 136:  {
    $18 = $5;
    $19 = $3;
    $20 = $6;
    $21 = HEAP32[$20>>2]|0;
    _Output_Append($18,$19,$21);
    $22 = $5;
    $23 = $3;
    _Output_Append($22,$23,1443);
    $24 = $3;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    break;
   }
   case 150:  {
    $28 = $3;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -1)|0;
    HEAP32[$29>>2] = $31;
    break;
   }
   case 147:  {
    $32 = $5;
    $33 = $3;
    $34 = $6;
    $35 = HEAP32[$34>>2]|0;
    _Output_Append($32,$33,$35);
    $36 = $5;
    $37 = $3;
    _Output_Append($36,$37,1443);
    break;
   }
   case 139: case 140: case 141: case 143: case 142: case 138: case 137: case 146:  {
    $38 = $5;
    $39 = $3;
    $40 = $6;
    $41 = HEAP32[$40>>2]|0;
    _Output_Append($38,$39,$41);
    $42 = $5;
    $43 = $3;
    _Output_Append($42,$43,1443);
    break;
   }
   case 5:  {
    $44 = $3;
    $45 = ((($44)) + 9|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&1;
    $48 = $5;
    $49 = $3;
    if ($47) {
     $50 = $6;
     $51 = HEAP32[$50>>2]|0;
     _Output_Append($48,$49,$51);
     break L7;
    } else {
     _Output_Append($48,$49,1441);
     break L7;
    }
    break;
   }
   case 4:  {
    $52 = $3;
    $53 = ((($52)) + 9|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&1;
    $56 = $5;
    $57 = $3;
    if ($55) {
     $58 = $6;
     $59 = HEAP32[$58>>2]|0;
     _Output_Append($56,$57,$59);
     break L7;
    } else {
     _Output_Append($56,$57,1443);
     break L7;
    }
    break;
   }
   case 14:  {
    $60 = $5;
    $61 = $3;
    _Output_Append($60,$61,1443);
    break;
   }
   case 148:  {
    $62 = $3;
    $63 = ((($62)) + 8|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&1;
    if (!($65)) {
     $66 = $5;
     $67 = $3;
     $68 = $6;
     $69 = HEAP32[$68>>2]|0;
     _Output_Append($66,$67,$69);
     $70 = $3;
     HEAP8[$70>>0] = 0;
    }
    break;
   }
   case 149:  {
    $71 = $3;
    $72 = ((($71)) + 8|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&1;
    if (!($74)) {
     $75 = $3;
     HEAP8[$75>>0] = 1;
    }
    break;
   }
   case 8:  {
    $76 = $5;
    $77 = $3;
    $78 = $6;
    $79 = HEAP32[$78>>2]|0;
    _Output_Append($76,$77,$79);
    break;
   }
   default: {
    $80 = $5;
    $81 = $3;
    $82 = $6;
    $83 = HEAP32[$82>>2]|0;
    _Output_Append($80,$81,$83);
   }
   }
  } while(0);
  $84 = $6;
  $85 = ((($84)) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $6 = $86;
 }
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $20 = $9;
  $21 = HEAP32[$20>>2]|0;
  switch ($21|0) {
  case 6:  {
   $22 = $4;
   $23 = $5;
   $24 = $9;
   $25 = $7;
   _TSingleTypeSpecifier_CodePrint($22,$23,$24,$25);
   break;
  }
  case 9:  {
   $26 = $4;
   $27 = $5;
   $28 = $9;
   $29 = $7;
   _StorageSpecifier_CodePrint($26,$27,$28,$29);
   break;
  }
  case 14:  {
   $30 = $4;
   $31 = $5;
   $32 = $9;
   $33 = $7;
   _TTypeQualifier_CodePrint($30,$31,$32,$33);
   break;
  }
  case 15:  {
   $34 = $4;
   $35 = $5;
   $36 = $9;
   $37 = $7;
   _TFunctionSpecifier_CodePrint($34,$35,$36,$37);
   break;
  }
  case 8:  {
   $38 = $4;
   $39 = $5;
   $40 = $9;
   $41 = $7;
   _TStructUnionSpecifier_CodePrint($38,$39,$40,$41);
   break;
  }
  case 7:  {
   $42 = $4;
   $43 = $5;
   $44 = $9;
   $45 = $7;
   _TEnumSpecifier_CodePrint($42,$43,$44,$45);
   break;
  }
  default: {
  }
  }
  $46 = $8;
  $47 = (($46) + 1)|0;
  $8 = $47;
 }
 STACKTOP = sp;return;
}
function _TSingleTypeSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $6;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(112);
 if ($15) {
  $16 = $5;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = $7;
   $21 = $5;
   _Output_Append($20,$21,5145);
  }
  $22 = $7;
  $23 = $5;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  _Output_Append($22,$23,$26);
  STACKTOP = sp;return;
 }
 $27 = $6;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(115);
 if ($30) {
  $31 = $5;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $35 = $7;
   $36 = $5;
   _Output_Append($35,$36,5153);
  }
  $37 = $7;
  $38 = $5;
  $39 = $6;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  _Output_Append($37,$38,$41);
  STACKTOP = sp;return;
 }
 $42 = $6;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(93);
 if ($45) {
  $46 = $5;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0);
  if ($49) {
   $50 = $7;
   $51 = $5;
   _Output_Append($50,$51,5160);
  }
  $52 = $7;
  $53 = $5;
  $54 = $6;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  _Output_Append($52,$53,$56);
  STACKTOP = sp;return;
 }
 $57 = $6;
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(7);
 $61 = $7;
 $62 = $5;
 $63 = $6;
 if ($60) {
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  _Output_Append($61,$62,$65);
  STACKTOP = sp;return;
 } else {
  $66 = ((($63)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_TokenToString($67)|0);
  _Output_Append($61,$62,$68);
  STACKTOP = sp;return;
 }
}
function _StorageSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 8|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_TokenToString($16)|0);
 _Output_Append($12,$13,$17);
 STACKTOP = sp;return;
}
function _TTypeQualifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(83);
 do {
  if ($11) {
   $12 = $5;
   $13 = ((($12)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = $5;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(2);
    if ($19) {
     $20 = $7;
     $21 = $5;
     _Output_Append($20,$21,1786);
    }
   }
  } else {
   $22 = $6;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(43);
   $26 = $5;
   if (!($25)) {
    $36 = $6;
    $37 = ((($36)) + 12|0);
    $38 = $7;
    _TNodeClueList_CodePrint($26,$37,$38);
    $39 = $7;
    $40 = $5;
    $41 = $6;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (_TokenToString($43)|0);
    _Output_Append($39,$40,$44);
    break;
   }
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = $5;
    $31 = ((($30)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(2);
    if ($33) {
     $34 = $7;
     $35 = $5;
     _Output_Append($34,$35,1954);
    }
   }
  }
 } while(0);
 $45 = $6;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(110);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _TFunctionSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 8|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_TokenToString($16)|0);
 _Output_Append($12,$13,$17);
 STACKTOP = sp;return;
}
function _TStructUnionSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = $6;
 $12 = ((($11)) + 60|0);
 $13 = $7;
 _TNodeClueList_CodePrint($10,$12,$13);
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 do {
  if ($18) {
   $19 = $6;
   $20 = ((($19)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(112);
   if ($22) {
    $23 = $7;
    $24 = $5;
    _Output_Append($23,$24,1968);
   } else {
    $25 = $6;
    $26 = ((($25)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(115);
    if ($28) {
     $29 = $7;
     $30 = $5;
     _Output_Append($29,$30,1990);
    }
   }
   $31 = $5;
   $32 = $6;
   $33 = ((($32)) + 68|0);
   $34 = $7;
   _TNodeClueList_CodePrint($31,$33,$34);
  } else {
   $35 = $5;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(2);
   if ($38) {
    $39 = $6;
    $40 = ((($39)) + 24|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(116);
    if (!($42)) {
     break;
    }
    $43 = $4;
    $44 = $5;
    $45 = $6;
    $46 = ((($45)) + 28|0);
    $47 = $7;
    _TUnionSet_CodePrint($43,$44,$46,$47);
    break;
   }
   $48 = $5;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = $6;
    $53 = ((($52)) + 20|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(112);
    if ($55) {
     $56 = $7;
     $57 = $5;
     _Output_Append($56,$57,1968);
    } else {
     $58 = $6;
     $59 = ((($58)) + 20|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(115);
     if ($61) {
      $62 = $7;
      $63 = $5;
      _Output_Append($62,$63,1990);
     }
    }
    $64 = $6;
    $65 = ((($64)) + 24|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(116);
    if ($67) {
     $68 = $4;
     $69 = $5;
     $70 = $6;
     $71 = ((($70)) + 28|0);
     $72 = $7;
     _TUnionSet_CodePrint($68,$69,$71,$72);
    }
    $73 = $5;
    $74 = $6;
    $75 = ((($74)) + 68|0);
    $76 = $7;
    _TNodeClueList_CodePrint($73,$75,$76);
   }
  }
 } while(0);
 $77 = $5;
 $78 = ((($77)) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = $5;
  $82 = ((($81)) + 16|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&1;
  if ($84) {
   $85 = $7;
   $86 = $5;
   _Output_Append($85,$86,1441);
  }
 }
 $87 = $7;
 $88 = $5;
 $89 = $6;
 $90 = ((($89)) + 16|0);
 $91 = HEAP32[$90>>2]|0;
 _Output_Append($87,$88,$91);
 $92 = $6;
 $93 = ((($92)) + 4|0);
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)>(0);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = $5;
 $98 = $6;
 $99 = ((($98)) + 76|0);
 $100 = $7;
 _TNodeClueList_CodePrint($97,$99,$100);
 $101 = $7;
 $102 = $5;
 _Output_Append($101,$102,1502);
 $8 = 0;
 while(1) {
  $103 = $8;
  $104 = $6;
  $105 = ((($104)) + 4|0);
  $106 = ((($105)) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($103|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $6;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $8;
  $113 = (($111) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $9 = $114;
  $115 = $4;
  $116 = $5;
  $117 = $9;
  $118 = $7;
  _TAnyStructDeclaration_CodePrint($115,$116,$117,$118);
  $119 = $8;
  $120 = (($119) + 1)|0;
  $8 = $120;
 }
 $121 = $5;
 $122 = $6;
 $123 = ((($122)) + 84|0);
 $124 = $7;
 _TNodeClueList_CodePrint($121,$123,$124);
 $125 = $7;
 $126 = $5;
 _Output_Append($125,$126,1449);
 STACKTOP = sp;return;
}
function _TEnumSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 16|0);
 $12 = $7;
 _TNodeClueList_CodePrint($9,$11,$12);
 $13 = $7;
 $14 = $5;
 _Output_Append($13,$14,1845);
 $15 = $5;
 $16 = $6;
 $17 = ((($16)) + 24|0);
 $18 = $7;
 _TNodeClueList_CodePrint($15,$17,$18);
 $19 = $7;
 $20 = $5;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 _Output_Append($19,$20,$23);
 $24 = $5;
 $25 = $6;
 $26 = ((($25)) + 32|0);
 $27 = $7;
 _TNodeClueList_CodePrint($24,$26,$27);
 $28 = $6;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $7;
 $33 = $5;
 _Output_Append($32,$33,1502);
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $8 = $36;
 while(1) {
  $37 = $8;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   break;
  }
  $39 = $4;
  $40 = $5;
  $41 = $8;
  $42 = $7;
  _TEnumerator_CodePrint($39,$40,$41,$42);
  $43 = $8;
  $44 = HEAP32[$43>>2]|0;
  $8 = $44;
 }
 $45 = $5;
 $46 = $6;
 $47 = ((($46)) + 40|0);
 $48 = $7;
 _TNodeClueList_CodePrint($45,$47,$48);
 $49 = $7;
 $50 = $5;
 _Output_Append($49,$50,1449);
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $20 = $9;
  $21 = HEAP32[$20>>2]|0;
  switch ($21|0) {
  case 6:  {
   $22 = $4;
   $23 = $5;
   $24 = $9;
   $25 = $7;
   _TSingleTypeSpecifier_CodePrint($22,$23,$24,$25);
   break;
  }
  case 8:  {
   $26 = $4;
   $27 = $5;
   $28 = $9;
   $29 = $7;
   _TStructUnionSpecifier_CodePrint($26,$27,$28,$29);
   break;
  }
  case 7:  {
   $30 = $4;
   $31 = $5;
   $32 = $9;
   $33 = $7;
   _TEnumSpecifier_CodePrint($30,$31,$32,$33);
   break;
  }
  case 9:  {
   $34 = $4;
   $35 = $5;
   $36 = $9;
   $37 = $7;
   _StorageSpecifier_CodePrint($34,$35,$36,$37);
   break;
  }
  case 14:  {
   $38 = $4;
   $39 = $5;
   $40 = $9;
   $41 = $7;
   _TTypeQualifier_CodePrint($38,$39,$40,$41);
   break;
  }
  case 15:  {
   $42 = $4;
   $43 = $5;
   $44 = $9;
   $45 = $7;
   _TFunctionSpecifier_CodePrint($42,$43,$44,$45);
   break;
  }
  default: {
  }
  }
  $46 = $8;
  $47 = (($46) + 1)|0;
  $8 = $47;
 }
 STACKTOP = sp;return;
}
function _TInitDeclarator_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $10;
 $15 = HEAP32[$14>>2]|0;
 $16 = $11;
 _TDeclarator_CodePrint($12,$13,$15,1,$16);
 $17 = $10;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $7;
 $22 = $10;
 $23 = ((($22)) + 12|0);
 $24 = $11;
 _TNodeClueList_CodePrint($21,$23,$24);
 $25 = $11;
 $26 = $7;
 _Output_Append($25,$26,1766);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $11;
 _TInitializer_CodePrint($27,$28,$29,$30,$33,$34);
 STACKTOP = sp;return;
}
function _TInitializer_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $10;
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $10;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(28);
 $17 = $6;
 $18 = $7;
 if ($16) {
  $19 = $8;
  $20 = $9;
  $21 = $10;
  $22 = $11;
  _TInitializerListType_CodePrint($17,$18,$19,$20,$21,$22);
  STACKTOP = sp;return;
 } else {
  $23 = $10;
  $24 = $11;
  _TExpression_CodePrint($17,$18,$23,9460,$24);
  STACKTOP = sp;return;
 }
}
function _TInitDeclaratorList_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $8;
 $12 = HEAP32[$11>>2]|0;
 $10 = $12;
 while(1) {
  $13 = $10;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $8;
  $16 = HEAP32[$15>>2]|0;
  $17 = $10;
  $18 = ($16|0)==($17|0);
  if (!($18)) {
   $19 = $9;
   $20 = $6;
   _Output_Append($19,$20,1445);
  }
  $21 = $5;
  $22 = $6;
  $23 = $10;
  $24 = HEAP32[$23>>2]|0;
  $25 = $7;
  $26 = $10;
  $27 = $9;
  _TInitDeclarator_CodePrint($21,$22,$24,$25,$26,$27);
  $28 = $10;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $10 = $30;
 }
 STACKTOP = sp;return;
}
function _FindValue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 while(1) {
  $10 = $9;
  $11 = $8;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $6;
  $14 = $7;
  $15 = $9;
  $16 = (($14) + ($15<<3)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_strlen($17)|0);
  $19 = ($13|0)==($18|0);
  if ($19) {
   $20 = $5;
   $21 = $7;
   $22 = $9;
   $23 = (($21) + ($22<<3)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $6;
   $26 = (_strncmp($20,$24,$25)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    label = 5;
    break;
   }
  }
  $33 = $9;
  $34 = (($33) + 1)|0;
  $9 = $34;
 }
 if ((label|0) == 5) {
  $28 = $7;
  $29 = $9;
  $30 = (($28) + ($29<<3)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $4 = $32;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 7) {
  $4 = 1770;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _StrBuilder_Template($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $18 = $6;
 $10 = $18;
 $11 = 0;
 while(1) {
  $19 = $11;
  $20 = $9;
  $21 = $20<<2;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $5;
  (_StrBuilder_AppendChar($23,32)|0);
  $24 = $11;
  $25 = (($24) + 1)|0;
  $11 = $25;
 }
 while(1) {
  $26 = $10;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(32);
  if (!($29)) {
   break;
  }
  $12 = 0;
  while(1) {
   $30 = $12;
   $31 = ($30|0)<(4);
   if (!($31)) {
    break;
   }
   $32 = $5;
   (_StrBuilder_AppendChar($32,32)|0);
   $33 = $12;
   $34 = (($33) + 1)|0;
   $12 = $34;
  }
  $35 = $10;
  $36 = ((($35)) + 1|0);
  $10 = $36;
 }
 L11: while(1) {
  $37 = $10;
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)!=(0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)==(36);
  $44 = $10;
  if (!($43)) {
   $118 = HEAP8[$44>>0]|0;
   $119 = $118 << 24 >> 24;
   $120 = ($119|0)==(10);
   if (!($120)) {
    $148 = $10;
    $149 = HEAP8[$148>>0]|0;
    $150 = $149 << 24 >> 24;
    $151 = ($150|0)!=(8);
    if ($151) {
     $152 = $5;
     $153 = $10;
     $154 = HEAP8[$153>>0]|0;
     (_StrBuilder_AppendChar($152,$154)|0);
    }
    $155 = $10;
    $156 = ((($155)) + 1|0);
    $10 = $156;
    continue;
   }
   $121 = $5;
   $122 = $10;
   $123 = HEAP8[$122>>0]|0;
   (_StrBuilder_AppendChar($121,$123)|0);
   $124 = $10;
   $125 = ((($124)) + 1|0);
   $10 = $125;
   $126 = $10;
   $127 = HEAP8[$126>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = ($128|0)!=(0);
   if (!($129)) {
    continue;
   }
   $16 = 0;
   while(1) {
    $130 = $16;
    $131 = $9;
    $132 = $131<<2;
    $133 = ($130|0)<($132|0);
    if (!($133)) {
     break;
    }
    $134 = $5;
    (_StrBuilder_AppendChar($134,32)|0);
    $135 = $16;
    $136 = (($135) + 1)|0;
    $16 = $136;
   }
   while(1) {
    $137 = $10;
    $138 = HEAP8[$137>>0]|0;
    $139 = $138 << 24 >> 24;
    $140 = ($139|0)==(32);
    if (!($140)) {
     continue L11;
    }
    $17 = 0;
    while(1) {
     $141 = $17;
     $142 = ($141|0)<(4);
     if (!($142)) {
      break;
     }
     $143 = $5;
     (_StrBuilder_AppendChar($143,32)|0);
     $144 = $17;
     $145 = (($144) + 1)|0;
     $17 = $145;
    }
    $146 = $10;
    $147 = ((($146)) + 1|0);
    $10 = $147;
   }
  }
  $45 = ((($44)) + 1|0);
  $10 = $45;
  $46 = $10;
  $13 = $46;
  $14 = 0;
  $47 = $10;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 << 24 >> 24;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $10;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52 << 24 >> 24;
   $54 = ($53|0)>=(97);
   if ($54) {
    $55 = $10;
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = ($57|0)<=(122);
    if ($58) {
     label = 17;
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
  do {
   if ((label|0) == 14) {
    label = 0;
    $59 = $10;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)>=(65);
    if ($62) {
     $63 = $10;
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $66 = ($65|0)<=(90);
     if ($66) {
      label = 17;
      break;
     }
    }
    $67 = $10;
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $70 = ($69|0)>=(95);
    if ($70) {
     label = 17;
    }
   }
  } while(0);
  L42: do {
   if ((label|0) == 17) {
    label = 0;
    $71 = $10;
    $72 = ((($71)) + 1|0);
    $10 = $72;
    $73 = $14;
    $74 = (($73) + 1)|0;
    $14 = $74;
    while(1) {
     $75 = $10;
     $76 = HEAP8[$75>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($77|0)!=(0);
     if ($78) {
      $79 = $10;
      $80 = HEAP8[$79>>0]|0;
      $81 = $80 << 24 >> 24;
      $82 = ($81|0)>=(97);
      if ($82) {
       $83 = $10;
       $84 = HEAP8[$83>>0]|0;
       $85 = $84 << 24 >> 24;
       $86 = ($85|0)<=(122);
       if (!($86)) {
        label = 21;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
     do {
      if ((label|0) == 21) {
       label = 0;
       $87 = $10;
       $88 = HEAP8[$87>>0]|0;
       $89 = $88 << 24 >> 24;
       $90 = ($89|0)>=(65);
       if ($90) {
        $91 = $10;
        $92 = HEAP8[$91>>0]|0;
        $93 = $92 << 24 >> 24;
        $94 = ($93|0)<=(90);
        if ($94) {
         break;
        }
       }
       $95 = $10;
       $96 = HEAP8[$95>>0]|0;
       $97 = $96 << 24 >> 24;
       $98 = ($97|0)>=(48);
       if ($98) {
        $99 = $10;
        $100 = HEAP8[$99>>0]|0;
        $101 = $100 << 24 >> 24;
        $102 = ($101|0)<=(57);
        if ($102) {
         break;
        }
       }
       $103 = $10;
       $104 = HEAP8[$103>>0]|0;
       $105 = $104 << 24 >> 24;
       $106 = ($105|0)>=(95);
       if (!($106)) {
        break L42;
       }
      }
     } while(0);
     $107 = $10;
     $108 = ((($107)) + 1|0);
     $10 = $108;
     $109 = $14;
     $110 = (($109) + 1)|0;
     $14 = $110;
    }
   }
  } while(0);
  $111 = $13;
  $112 = $14;
  $113 = $7;
  $114 = $8;
  $115 = (_FindValue($111,$112,$113,$114)|0);
  $15 = $115;
  $116 = $5;
  $117 = $15;
  (_StrBuilder_Append($116,$117)|0);
 }
 STACKTOP = sp;return;
}
function _GetPrefixSuffix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $6 = $3;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(95);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $3;
  $16 = HEAP8[$15>>0]|0;
  (_StrBuilder_AppendChar($14,$16)|0);
  $17 = $3;
  $18 = ((($17)) + 1|0);
  $3 = $18;
 }
 $19 = $3;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)==(95);
 if ($22) {
  $23 = $3;
  $24 = ((($23)) + 1|0);
  $3 = $24;
 }
 while(1) {
  $25 = $3;
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)!=(0);
  if (!($27)) {
   break;
  }
  $28 = $5;
  $29 = $3;
  $30 = HEAP8[$29>>0]|0;
  (_StrBuilder_AppendChar($28,$30)|0);
  $31 = $3;
  $32 = ((($31)) + 1|0);
  $3 = $32;
 }
 STACKTOP = sp;return;
}
function _FindUnionSetOf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = $4;
 $13 = (_TProgram_GetFinalTypeDeclaration($11,$12)|0);
 $6 = $13;
 $7 = 0;
 $8 = 0;
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $7 = 1;
  $16 = $6;
  $17 = ((($16)) + 4|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(1);
  if ($20) {
   $21 = $6;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_TDeclarationSpecifier_As_TStructUnionSpecifier($25)|0);
   $8 = $26;
   $27 = $8;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $3;
    $32 = ((($31)) + 24|0);
    $33 = $8;
    $34 = ((($33)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_SymbolMap_FindStructUnion($32,$35)|0);
    $8 = $36;
   }
  }
 } else {
  $7 = 2;
  $37 = $3;
  $38 = ((($37)) + 24|0);
  $39 = $4;
  $40 = (_SymbolMap_FindStructUnion($38,$39)|0);
  $8 = $40;
 }
 $41 = $8;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $8;
  $44 = ((($43)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(116);
  if ($46) {
   $47 = $8;
   $48 = ((($47)) + 28|0);
   $49 = HEAP32[$48>>2]|0;
   $9 = $49;
   while(1) {
    $50 = $9;
    $51 = ($50|0)!=(0|0);
    if (!($51)) {
     break;
    }
    $52 = $3;
    $53 = $9;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $5;
    _FindUnionSetOf($52,$55,$56);
    $57 = $9;
    $58 = HEAP32[$57>>2]|0;
    $9 = $58;
   }
   STACKTOP = sp;return;
  }
 }
 $59 = $5;
 $60 = $4;
 $61 = $7;
 $62 = $61;
 (_Map2_SetAt($59,$60,$62,$10)|0);
 STACKTOP = sp;return;
}
function _SymbolMap_FindStructUnion($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 $11 = $2;
 $12 = $3;
 $13 = (_SymbolMap_GetAssocAt($11,$12,$5,$6)|0);
 $7 = $13;
 while(1) {
  $14 = $7;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = $7;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(8);
  if ($20) {
   $21 = $7;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $3;
   $25 = (_strcmp($23,$24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = $7;
    $28 = ((($27)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $4 = $29;
    $30 = $4;
    $31 = ((($30)) + 4|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)>(0);
    if ($34) {
     label = 9;
     break;
    }
    $35 = $4;
    $36 = ((($35)) + 24|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(116);
    if ($38) {
     label = 9;
     break;
    }
   }
  }
  $39 = $7;
  $40 = HEAP32[$39>>2]|0;
  $7 = $40;
 }
 if ((label|0) == 9) {
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _Map2_SetAt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $13 = $7;
 HEAP32[$13>>2] = 0;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $4;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<(1);
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 4|0);
   HEAP32[$22>>2] = 1000;
  }
  $23 = $4;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25<<2;
  $27 = (_malloc($26)|0);
  $9 = $27;
  $28 = $9;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $9;
   $31 = $4;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33<<2;
   _memset(($30|0),0,($34|0))|0;
   $35 = $9;
   $36 = $4;
   HEAP32[$36>>2] = $35;
  }
 }
 $37 = $4;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $80 = $8;
  STACKTOP = sp;return ($80|0);
 }
 $40 = $4;
 $41 = $5;
 $42 = (_Map2_GetAssocAt($40,$41,$10,$11)|0);
 $12 = $42;
 $43 = $12;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $45 = (_malloc(16)|0);
  $12 = $45;
  $46 = HEAP32[$11>>2]|0;
  $47 = $12;
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = $46;
  $49 = $6;
  $50 = $12;
  $51 = ((($50)) + 12|0);
  HEAP32[$51>>2] = $49;
  $52 = $12;
  $53 = ((($52)) + 8|0);
  $54 = $5;
  _String_InitWith($53,$54);
  $55 = $4;
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$10>>2]|0;
  $58 = (($56) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $12;
  HEAP32[$60>>2] = $59;
  $61 = $12;
  $62 = $4;
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$10>>2]|0;
  $65 = (($63) + ($64<<2)|0);
  HEAP32[$65>>2] = $61;
  $66 = $4;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$67>>2] = $69;
  $8 = 0;
  $80 = $8;
  STACKTOP = sp;return ($80|0);
 } else {
  $8 = 1;
  $70 = $12;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $7;
  HEAP32[$73>>2] = $72;
  $74 = $6;
  $75 = $12;
  $76 = ((($75)) + 12|0);
  HEAP32[$76>>2] = $74;
  $77 = $12;
  $78 = ((($77)) + 8|0);
  $79 = $5;
  _String_Set($78,$79);
  $80 = $8;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _TTypeName_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = $7;
 _TSpecifierQualifierList_CodePrint($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 16|0);
 $17 = $7;
 _TDeclarator_CodePrint($13,$14,$16,1,$17);
 STACKTOP = sp;return;
}
function _StrBuilder_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 do {
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = $3;
   $14 = (($13) + 1)|0;
   $15 = $14;
   $16 = (_realloc($12,$15)|0);
   $5 = $16;
   $17 = $5;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    $4 = 0;
    break;
   }
   $19 = $2;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = $5;
    HEAP8[$22>>0] = 0;
   }
   $23 = $5;
   $24 = $2;
   HEAP32[$24>>2] = $23;
   $25 = $3;
   $26 = $2;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = $25;
  }
 } while(0);
 $28 = $4;
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _StrBuilder_Clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP8[$6>>0] = 0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _TAnyDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 2:  {
  $10 = $4;
  $11 = $5;
  $12 = $6;
  $13 = $7;
  _TGroupDeclaration_CodePrint($10,$11,$12,$13);
  break;
 }
 case 4:  {
  $14 = $4;
  $15 = $5;
  $16 = $6;
  $17 = $7;
  _TEofDeclaration_CodePrint($14,$15,$16,$17);
  break;
 }
 case 3:  {
  $18 = $4;
  $19 = $5;
  $20 = $6;
  $21 = $7;
  _TStaticAssertDeclaration_CodePrint($18,$19,$20,$21);
  break;
 }
 case 1:  {
  $22 = $4;
  $23 = $5;
  $24 = $6;
  $25 = $7;
  _TDeclaration_CodePrint($22,$23,$24,$25);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _TProgram_PrintCodeToString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 20|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[2220] = 0;
 $6 = 0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 (_StrBuilder_Reserve($7,400000)|0);
 $8 = 0;
 while(1) {
  $11 = $8;
  $12 = $3;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = $8;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $9 = $20;
  $21 = $3;
  $22 = ((($21)) + 52|0);
  _StrBuilder_Clear($22);
  ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $23 = $3;
  $24 = $4;
  $25 = $9;
  _TAnyDeclaration_CodePrint($23,$24,$25,$10);
  $26 = $3;
  $27 = ((($26)) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  (_StrBuilder_Append($7,$28)|0);
  $29 = HEAP32[$10>>2]|0;
  (_StrBuilder_Append($7,$29)|0);
  _StrBuilder_Destroy($10);
  $30 = $5;
  $31 = HEAP32[$7>>2]|0;
  (_StrBuilder_Append($30,$31)|0);
  _StrBuilder_Clear($7);
  $32 = $6;
  $33 = (($32) + 1)|0;
  $6 = $33;
  $34 = $8;
  $35 = (($34) + 1)|0;
  $8 = $35;
 }
 _StrBuilder_Destroy($7);
 STACKTOP = sp;return;
}
function _UnionTypeDefault($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $14 = sp + 88|0;
 $15 = sp + 76|0;
 $16 = sp + 64|0;
 $17 = sp + 48|0;
 $19 = sp + 32|0;
 $20 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 ;HEAP32[$14>>2]=HEAP32[900>>2]|0;HEAP32[$14+4>>2]=HEAP32[900+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[900+8>>2]|0;
 $21 = $7;
 $22 = $9;
 _FindUnionSetOf($21,$22,$14);
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $23 = $7;
 $24 = $9;
 (_FindRuntimeID($23,$24,$15)|0);
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
 $25 = $10;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $10;
  _TParameterTypeList_GetArgsString($27,$16);
 } else {
  $28 = $11;
  (_StrBuilder_Append($16,$28)|0);
 }
 HEAP32[$17>>2] = 2270;
 $29 = ((($17)) + 4|0);
 $30 = $11;
 HEAP32[$29>>2] = $30;
 $31 = ((($17)) + 8|0);
 HEAP32[$31>>2] = 2272;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$15>>2]|0;
 HEAP32[$32>>2] = $33;
 $34 = $13;
 $35 = $8;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 _StrBuilder_Template($34,2275,$17,2,$37);
 _StrBuilder_Destroy($15);
 $18 = 0;
 while(1) {
  $38 = $18;
  $39 = ((($14)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = HEAP32[$14>>2]|0;
  $43 = $18;
  $44 = (($42) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
   $47 = $7;
   $48 = HEAP32[$14>>2]|0;
   $49 = $18;
   $50 = (($48) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   (_FindIDValue($47,$53,$19)|0);
   HEAP32[$20>>2] = 2295;
   $54 = ((($20)) + 4|0);
   $55 = HEAP32[$14>>2]|0;
   $56 = $18;
   $57 = (($55) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$54>>2] = $60;
   $61 = ((($20)) + 8|0);
   HEAP32[$61>>2] = 2300;
   $62 = ((($61)) + 4|0);
   $63 = $12;
   HEAP32[$62>>2] = $63;
   $64 = ((($61)) + 8|0);
   HEAP32[$64>>2] = 2307;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$19>>2]|0;
   HEAP32[$65>>2] = $66;
   $67 = ((($64)) + 8|0);
   HEAP32[$67>>2] = 2313;
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$16>>2]|0;
   HEAP32[$68>>2] = $69;
   $70 = HEAP32[$14>>2]|0;
   $71 = $18;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75;
   $77 = ($76|0)==(2);
   $78 = $13;
   $79 = $8;
   $80 = ((($79)) + 20|0);
   $81 = HEAP32[$80>>2]|0;
   if ($77) {
    _StrBuilder_Template($78,2318,$20,4,$81);
   } else {
    _StrBuilder_Template($78,2381,$20,4,$81);
   }
   _StrBuilder_Destroy($19);
  }
  $82 = $18;
  $83 = (($82) + 1)|0;
  $18 = $83;
 }
 $84 = $13;
 $85 = $8;
 $86 = ((($85)) + 20|0);
 $87 = HEAP32[$86>>2]|0;
 _StrBuilder_Template($84,2437,0,0,$87);
 _StrBuilder_Destroy($16);
 _Map2_Destroy($14,0);
 STACKTOP = sp;return;
}
function _FindRuntimeID($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = $4;
 $14 = (_TProgram_GetFinalTypeDeclaration($12,$13)|0);
 $6 = $14;
 $7 = 0;
 $8 = 0;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $7 = 1;
  $17 = $6;
  $18 = ((($17)) + 4|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(1);
  if ($21) {
   $22 = $6;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_TDeclarationSpecifier_As_TStructUnionSpecifier($26)|0);
   $8 = $27;
   $28 = $8;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $3;
    $33 = ((($32)) + 24|0);
    $34 = $8;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_SymbolMap_FindStructUnion($33,$36)|0);
    $8 = $37;
   }
  }
 } else {
  $7 = 2;
  $38 = $3;
  $39 = ((($38)) + 24|0);
  $40 = $4;
  $41 = (_SymbolMap_FindStructUnion($39,$40)|0);
  $8 = $41;
 }
 $42 = $8;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  $70 = $7;
  STACKTOP = sp;return ($70|0);
 }
 $44 = $8;
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(116);
 if (!($47)) {
  $70 = $7;
  STACKTOP = sp;return ($70|0);
 }
 $48 = $8;
 $49 = ((($48)) + 4|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)>(0);
 if (!($52)) {
  $70 = $7;
  STACKTOP = sp;return ($70|0);
 }
 $53 = $8;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_TAnyStructDeclaration_As_TStructDeclaration($56)|0);
 $9 = $57;
 $58 = $9;
 $59 = ($58|0)!=(0|0);
 if (!($59)) {
  $70 = $7;
  STACKTOP = sp;return ($70|0);
 }
 $60 = $9;
 $61 = ((($60)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $10 = $62;
 $63 = $10;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  $70 = $7;
  STACKTOP = sp;return ($70|0);
 }
 $65 = $10;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_TDeclarator_GetName($66)|0);
 $11 = $67;
 $68 = $5;
 $69 = $11;
 (_StrBuilder_Set($68,$69)|0);
 $70 = $7;
 STACKTOP = sp;return ($70|0);
}
function _FindIDValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $14 = $4;
 $15 = (_TProgram_GetFinalTypeDeclaration($13,$14)|0);
 $6 = $15;
 $7 = 0;
 $8 = 0;
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $7 = 1;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>(1);
  if ($22) {
   $23 = $6;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_TDeclarationSpecifier_As_TStructUnionSpecifier($27)|0);
   $8 = $28;
   $29 = $8;
   $30 = ((($29)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $3;
    $34 = ((($33)) + 24|0);
    $35 = $8;
    $36 = ((($35)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_SymbolMap_FindStructUnion($34,$37)|0);
    $8 = $38;
   }
  }
 } else {
  $7 = 2;
  $39 = $3;
  $40 = ((($39)) + 24|0);
  $41 = $4;
  $42 = (_SymbolMap_FindStructUnion($40,$41)|0);
  $8 = $42;
 }
 $43 = $8;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  $74 = $7;
  STACKTOP = sp;return ($74|0);
 }
 $45 = $8;
 $46 = ((($45)) + 4|0);
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)>(0);
 if (!($49)) {
  $74 = $7;
  STACKTOP = sp;return ($74|0);
 }
 $50 = $8;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = (_TAnyStructDeclaration_As_TStructDeclaration($53)|0);
 $9 = $54;
 $55 = $9;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $74 = $7;
  STACKTOP = sp;return ($74|0);
 }
 $57 = $9;
 $58 = ((($57)) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $10 = $59;
 $60 = $10;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  $74 = $7;
  STACKTOP = sp;return ($74|0);
 }
 $62 = $10;
 $63 = HEAP32[$62>>2]|0;
 $64 = (_TDeclarator_GetName($63)|0);
 $11 = $64;
 ;HEAP32[$12>>2]=HEAP32[912>>2]|0;HEAP32[$12+4>>2]=HEAP32[912+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[912+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[912+12>>2]|0;HEAP32[$12+16>>2]=HEAP32[912+16>>2]|0;HEAP32[$12+20>>2]=HEAP32[912+20>>2]|0;
 $65 = $3;
 $66 = $10;
 $67 = HEAP32[$66>>2]|0;
 $68 = $9;
 $69 = ((($68)) + 4|0);
 $70 = $10;
 $71 = ((($70)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $5;
 _TInitializer_CodePrint($65,$12,$67,$69,$72,$73);
 $74 = $7;
 STACKTOP = sp;return ($74|0);
}
function _Map2_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Map2_RemoveAll($4,$5);
 STACKTOP = sp;return;
}
function _InstanciateDestroy2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0;
 var $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0;
 var $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0;
 var $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0;
 var $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0;
 var $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0;
 var $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0;
 var $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0;
 var $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0;
 var $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0;
 var $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0;
 var $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0;
 var $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0;
 var $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0;
 var $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer111 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer125 = 0, $vararg_buffer128 = 0, $vararg_buffer131 = 0, $vararg_buffer133 = 0, $vararg_buffer135 = 0, $vararg_buffer138 = 0, $vararg_buffer140 = 0, $vararg_buffer145 = 0;
 var $vararg_buffer147 = 0, $vararg_buffer151 = 0, $vararg_buffer153 = 0, $vararg_buffer155 = 0, $vararg_buffer159 = 0, $vararg_buffer16 = 0, $vararg_buffer161 = 0, $vararg_buffer165 = 0, $vararg_buffer167 = 0, $vararg_buffer171 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer177 = 0, $vararg_buffer18 = 0, $vararg_buffer180 = 0, $vararg_buffer184 = 0, $vararg_buffer188 = 0, $vararg_buffer191 = 0, $vararg_buffer195 = 0, $vararg_buffer199 = 0;
 var $vararg_buffer202 = 0, $vararg_buffer206 = 0, $vararg_buffer21 = 0, $vararg_buffer210 = 0, $vararg_buffer213 = 0, $vararg_buffer217 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0;
 var $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer86 = 0, $vararg_buffer90 = 0, $vararg_buffer92 = 0, $vararg_buffer96 = 0, $vararg_ptr103 = 0, $vararg_ptr110 = 0, $vararg_ptr114 = 0, $vararg_ptr124 = 0, $vararg_ptr14 = 0, $vararg_ptr143 = 0, $vararg_ptr144 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr150 = 0, $vararg_ptr158 = 0, $vararg_ptr164 = 0, $vararg_ptr170 = 0, $vararg_ptr183 = 0, $vararg_ptr187 = 0, $vararg_ptr194 = 0, $vararg_ptr198 = 0, $vararg_ptr205 = 0, $vararg_ptr209 = 0, $vararg_ptr216 = 0, $vararg_ptr220 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr47 = 0, $vararg_ptr55 = 0, $vararg_ptr61 = 0, $vararg_ptr67 = 0, $vararg_ptr80 = 0;
 var $vararg_ptr89 = 0, $vararg_ptr95 = 0, $vararg_ptr99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $vararg_buffer217 = sp + 568|0;
 $vararg_buffer213 = sp + 560|0;
 $vararg_buffer210 = sp + 552|0;
 $vararg_buffer206 = sp + 544|0;
 $vararg_buffer202 = sp + 536|0;
 $vararg_buffer199 = sp + 528|0;
 $vararg_buffer195 = sp + 520|0;
 $vararg_buffer191 = sp + 512|0;
 $vararg_buffer188 = sp + 504|0;
 $vararg_buffer184 = sp + 496|0;
 $vararg_buffer180 = sp + 488|0;
 $vararg_buffer177 = sp + 480|0;
 $vararg_buffer175 = sp + 472|0;
 $vararg_buffer173 = sp + 464|0;
 $vararg_buffer171 = sp + 456|0;
 $vararg_buffer167 = sp + 448|0;
 $vararg_buffer165 = sp + 440|0;
 $vararg_buffer161 = sp + 432|0;
 $vararg_buffer159 = sp + 424|0;
 $vararg_buffer155 = sp + 416|0;
 $vararg_buffer153 = sp + 408|0;
 $vararg_buffer151 = sp + 400|0;
 $vararg_buffer147 = sp + 392|0;
 $vararg_buffer145 = sp + 384|0;
 $vararg_buffer140 = sp + 368|0;
 $vararg_buffer138 = sp + 360|0;
 $vararg_buffer135 = sp + 352|0;
 $vararg_buffer133 = sp + 344|0;
 $vararg_buffer131 = sp + 336|0;
 $vararg_buffer128 = sp + 328|0;
 $vararg_buffer125 = sp + 320|0;
 $vararg_buffer121 = sp + 312|0;
 $vararg_buffer118 = sp + 304|0;
 $vararg_buffer115 = sp + 296|0;
 $vararg_buffer111 = sp + 288|0;
 $vararg_buffer107 = sp + 280|0;
 $vararg_buffer104 = sp + 272|0;
 $vararg_buffer100 = sp + 264|0;
 $vararg_buffer96 = sp + 256|0;
 $vararg_buffer92 = sp + 248|0;
 $vararg_buffer90 = sp + 240|0;
 $vararg_buffer86 = sp + 232|0;
 $vararg_buffer84 = sp + 224|0;
 $vararg_buffer81 = sp + 216|0;
 $vararg_buffer77 = sp + 208|0;
 $vararg_buffer74 = sp + 200|0;
 $vararg_buffer72 = sp + 192|0;
 $vararg_buffer70 = sp + 184|0;
 $vararg_buffer68 = sp + 176|0;
 $vararg_buffer64 = sp + 168|0;
 $vararg_buffer62 = sp + 160|0;
 $vararg_buffer58 = sp + 152|0;
 $vararg_buffer56 = sp + 144|0;
 $vararg_buffer52 = sp + 136|0;
 $vararg_buffer50 = sp + 128|0;
 $vararg_buffer48 = sp + 120|0;
 $vararg_buffer44 = sp + 112|0;
 $vararg_buffer42 = sp + 104|0;
 $vararg_buffer37 = sp + 88|0;
 $vararg_buffer35 = sp + 80|0;
 $vararg_buffer32 = sp + 72|0;
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer28 = sp + 56|0;
 $vararg_buffer25 = sp + 48|0;
 $vararg_buffer23 = sp + 40|0;
 $vararg_buffer21 = sp + 32|0;
 $vararg_buffer18 = sp + 24|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer = sp;
 $32 = sp + 960|0;
 $46 = sp + 904|0;
 $47 = sp + 892|0;
 $49 = sp + 856|0;
 $55 = sp + 808|0;
 $56 = sp + 784|0;
 $65 = sp + 744|0;
 $66 = sp + 732|0;
 $68 = sp + 696|0;
 $75 = sp + 648|0;
 $77 = sp + 616|0;
 $79 = sp + 584|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $81 = $16;
 $82 = ($81|0)!=(0|0);
 $83 = $22;
 $84 = ($83|0)!=(0|0);
 $or$cond = $82 & $84;
 if ($or$cond) {
  $85 = $22;
  HEAP8[$85>>0] = 1;
 }
 $86 = $15;
 $87 = (_TPointerList_IsPointerToObject($86)|0);
 $88 = $87&1;
 $24 = $88;
 $89 = $15;
 $90 = (_TPointerList_IsAutoPointerToObject($89)|0);
 $91 = $90&1;
 $25 = $91;
 $92 = $15;
 $93 = (_TPointerList_IsAutoPointerToAutoPointer($92)|0);
 $94 = $93&1;
 $26 = $94;
 $95 = $15;
 $96 = (_TPointerList_IsAutoPointerToPointer($95)|0);
 $97 = $96&1;
 $27 = $97;
 $98 = $15;
 $99 = (_TPointerList_IsPointer($98)|0);
 $100 = $99&1;
 $28 = $100;
 $101 = $14;
 $102 = (_TSpecifierQualifierList_GetMainSpecifier($101)|0);
 $29 = $102;
 $103 = $29;
 $104 = ($103|0)==(0|0);
 if ($104) {
  STACKTOP = sp;return;
 }
 $105 = $29;
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)==(6);
 $108 = $29;
 if (!($107)) {
  $793 = HEAP32[$108>>2]|0;
  $794 = ($793|0)==(8);
  $795 = $29;
  if (!($794)) {
   $1208 = HEAP32[$795>>2]|0;
   $1209 = ($1208|0)==(7);
   if (!($1209)) {
    STACKTOP = sp;return;
   }
   $1210 = $29;
   $1211 = (_TDeclarationSpecifier_As_TEnumSpecifier($1210)|0);
   $74 = $1211;
   $1212 = $20;
   $1213 = ($1212|0)==(0);
   if ($1213) {
    $1214 = $25;
    $1215 = $1214&1;
    if ($1215) {
     $1216 = $23;
     $1217 = $13;
     $1218 = ((($1217)) + 20|0);
     $1219 = HEAP32[$1218>>2]|0;
     $1220 = $1219<<2;
     $1221 = $12;
     $1222 = (_GetFreeStr($1221)|0);
     $1223 = $18;
     HEAP32[$vararg_buffer180>>2] = $1222;
     $vararg_ptr183 = ((($vararg_buffer180)) + 4|0);
     HEAP32[$vararg_ptr183>>2] = $1223;
     _StrBuilder_AppendFmtLn($1216,$1220,2613,$vararg_buffer180);
     STACKTOP = sp;return;
    }
    $1224 = $26;
    $1225 = $1224&1;
    if (!($1225)) {
     STACKTOP = sp;return;
    }
    $1226 = $23;
    $1227 = $13;
    $1228 = ((($1227)) + 20|0);
    $1229 = HEAP32[$1228>>2]|0;
    $1230 = $1229<<2;
    $1231 = $12;
    $1232 = (_GetFreeStr($1231)|0);
    $1233 = $18;
    HEAP32[$vararg_buffer184>>2] = $1232;
    $vararg_ptr187 = ((($vararg_buffer184)) + 4|0);
    HEAP32[$vararg_ptr187>>2] = $1233;
    _StrBuilder_AppendFmtLn($1226,$1230,2613,$vararg_buffer184);
    STACKTOP = sp;return;
   }
   $1234 = $20;
   $1235 = ($1234|0)==(4);
   if ($1235) {
    $1236 = $16;
    $1237 = ($1236|0)!=(0|0);
    if ($1237) {
     $1238 = $23;
     $1239 = $13;
     $1240 = ((($1239)) + 20|0);
     $1241 = HEAP32[$1240>>2]|0;
     $1242 = $1241<<2;
     $1243 = $18;
     HEAP32[$vararg_buffer188>>2] = $1243;
     _StrBuilder_AppendFmtIdent($1238,$1242,2688,$vararg_buffer188);
     $1244 = $13;
     ;HEAP32[$75>>2]=HEAP32[$1244>>2]|0;HEAP32[$75+4>>2]=HEAP32[$1244+4>>2]|0;HEAP32[$75+8>>2]=HEAP32[$1244+8>>2]|0;HEAP32[$75+12>>2]=HEAP32[$1244+12>>2]|0;HEAP32[$75+16>>2]=HEAP32[$1244+16>>2]|0;HEAP32[$75+20>>2]=HEAP32[$1244+20>>2]|0;
     $1245 = $12;
     $1246 = $15;
     $1247 = $14;
     $1248 = $16;
     $1249 = $23;
     _TInitializer_CodePrint($1245,$75,$1246,$1247,$1248,$1249);
     $1250 = $23;
     (_StrBuilder_Append($1250,2694)|0);
     STACKTOP = sp;return;
    }
    $1251 = $74;
    $1252 = ((($1251)) + 8|0);
    $1253 = HEAP32[$1252>>2]|0;
    $1254 = ($1253|0)!=(0|0);
    if ($1254) {
     $1255 = $74;
     $1256 = ((($1255)) + 8|0);
     $1257 = HEAP32[$1256>>2]|0;
     $1258 = ((($1257)) + 4|0);
     $1259 = HEAP32[$1258>>2]|0;
     $1260 = $1259;
    } else {
     $1260 = 2741;
    }
    $76 = $1260;
    $1261 = $24;
    $1262 = $1261&1;
    if (!($1262)) {
     $1263 = $25;
     $1264 = $1263&1;
     if (!($1264)) {
      $1265 = $26;
      $1266 = $1265&1;
      if (!($1266)) {
       $1275 = $23;
       $1276 = $13;
       $1277 = ((($1276)) + 20|0);
       $1278 = HEAP32[$1277>>2]|0;
       $1279 = $1278<<2;
       $1280 = $18;
       $1281 = $76;
       HEAP32[$vararg_buffer195>>2] = $1280;
       $vararg_ptr198 = ((($vararg_buffer195)) + 4|0);
       HEAP32[$vararg_ptr198>>2] = $1281;
       _StrBuilder_AppendFmtLn($1275,$1279,2697,$vararg_buffer195);
       STACKTOP = sp;return;
      }
     }
    }
    $1267 = $23;
    $1268 = $13;
    $1269 = ((($1268)) + 20|0);
    $1270 = HEAP32[$1269>>2]|0;
    $1271 = $1270<<2;
    $1272 = $18;
    $1273 = $12;
    $1274 = (_GetNullStr($1273)|0);
    HEAP32[$vararg_buffer191>>2] = $1272;
    $vararg_ptr194 = ((($vararg_buffer191)) + 4|0);
    HEAP32[$vararg_ptr194>>2] = $1274;
    _StrBuilder_AppendFmtLn($1267,$1271,2697,$vararg_buffer191);
    STACKTOP = sp;return;
   }
   $1282 = $20;
   $1283 = ($1282|0)==(5);
   if ($1283) {
    $1284 = $16;
    $1285 = ($1284|0)!=(0|0);
    if ($1285) {
     $1286 = $23;
     $1287 = $13;
     $1288 = ((($1287)) + 20|0);
     $1289 = HEAP32[$1288>>2]|0;
     $1290 = $1289<<2;
     $1291 = $18;
     HEAP32[$vararg_buffer199>>2] = $1291;
     _StrBuilder_AppendFmtIdent($1286,$1290,2688,$vararg_buffer199);
     $1292 = $13;
     ;HEAP32[$77>>2]=HEAP32[$1292>>2]|0;HEAP32[$77+4>>2]=HEAP32[$1292+4>>2]|0;HEAP32[$77+8>>2]=HEAP32[$1292+8>>2]|0;HEAP32[$77+12>>2]=HEAP32[$1292+12>>2]|0;HEAP32[$77+16>>2]=HEAP32[$1292+16>>2]|0;HEAP32[$77+20>>2]=HEAP32[$1292+20>>2]|0;
     $1293 = $12;
     $1294 = $15;
     $1295 = $14;
     $1296 = $16;
     $1297 = $23;
     _TInitializer_CodePrint($1293,$77,$1294,$1295,$1296,$1297);
     $1298 = $23;
     (_StrBuilder_Append($1298,1762)|0);
     STACKTOP = sp;return;
    }
    $1299 = $74;
    $1300 = ((($1299)) + 8|0);
    $1301 = HEAP32[$1300>>2]|0;
    $1302 = ($1301|0)!=(0|0);
    if ($1302) {
     $1303 = $74;
     $1304 = ((($1303)) + 8|0);
     $1305 = HEAP32[$1304>>2]|0;
     $1306 = ((($1305)) + 4|0);
     $1307 = HEAP32[$1306>>2]|0;
     $1308 = $1307;
    } else {
     $1308 = 2741;
    }
    $78 = $1308;
    $1309 = $24;
    $1310 = $1309&1;
    if (!($1310)) {
     $1311 = $25;
     $1312 = $1311&1;
     if (!($1312)) {
      $1313 = $26;
      $1314 = $1313&1;
      if (!($1314)) {
       $1323 = $23;
       $1324 = $13;
       $1325 = ((($1324)) + 20|0);
       $1326 = HEAP32[$1325>>2]|0;
       $1327 = $1326<<2;
       $1328 = $18;
       $1329 = $78;
       HEAP32[$vararg_buffer206>>2] = $1328;
       $vararg_ptr209 = ((($vararg_buffer206)) + 4|0);
       HEAP32[$vararg_ptr209>>2] = $1329;
       _StrBuilder_AppendFmtLn($1323,$1327,2697,$vararg_buffer206);
       STACKTOP = sp;return;
      }
     }
    }
    $1315 = $23;
    $1316 = $13;
    $1317 = ((($1316)) + 20|0);
    $1318 = HEAP32[$1317>>2]|0;
    $1319 = $1318<<2;
    $1320 = $18;
    $1321 = $12;
    $1322 = (_GetNullStr($1321)|0);
    HEAP32[$vararg_buffer202>>2] = $1320;
    $vararg_ptr205 = ((($vararg_buffer202)) + 4|0);
    HEAP32[$vararg_ptr205>>2] = $1322;
    _StrBuilder_AppendFmtLn($1315,$1319,2743,$vararg_buffer202);
    STACKTOP = sp;return;
   }
   $1330 = $20;
   $1331 = ($1330|0)==(6);
   if (!($1331)) {
    STACKTOP = sp;return;
   }
   $1332 = $16;
   $1333 = ($1332|0)!=(0|0);
   if ($1333) {
    $1334 = $23;
    $1335 = $13;
    $1336 = ((($1335)) + 20|0);
    $1337 = HEAP32[$1336>>2]|0;
    $1338 = $1337<<2;
    $1339 = $18;
    HEAP32[$vararg_buffer210>>2] = $1339;
    _StrBuilder_AppendFmtIdent($1334,$1338,2688,$vararg_buffer210);
    $1340 = $13;
    ;HEAP32[$79>>2]=HEAP32[$1340>>2]|0;HEAP32[$79+4>>2]=HEAP32[$1340+4>>2]|0;HEAP32[$79+8>>2]=HEAP32[$1340+8>>2]|0;HEAP32[$79+12>>2]=HEAP32[$1340+12>>2]|0;HEAP32[$79+16>>2]=HEAP32[$1340+16>>2]|0;HEAP32[$79+20>>2]=HEAP32[$1340+20>>2]|0;
    $1341 = $12;
    $1342 = $15;
    $1343 = $14;
    $1344 = $16;
    $1345 = $23;
    _TInitializer_CodePrint($1341,$79,$1342,$1343,$1344,$1345);
    STACKTOP = sp;return;
   }
   $1346 = $74;
   $1347 = ((($1346)) + 8|0);
   $1348 = HEAP32[$1347>>2]|0;
   $1349 = ($1348|0)!=(0|0);
   if ($1349) {
    $1350 = $74;
    $1351 = ((($1350)) + 8|0);
    $1352 = HEAP32[$1351>>2]|0;
    $1353 = ((($1352)) + 4|0);
    $1354 = HEAP32[$1353>>2]|0;
    $1355 = $1354;
   } else {
    $1355 = 2741;
   }
   $80 = $1355;
   $1356 = $24;
   $1357 = $1356&1;
   if (!($1357)) {
    $1358 = $25;
    $1359 = $1358&1;
    if (!($1359)) {
     $1360 = $26;
     $1361 = $1360&1;
     if (!($1361)) {
      $1366 = $23;
      $1367 = $18;
      $1368 = $80;
      HEAP32[$vararg_buffer217>>2] = $1367;
      $vararg_ptr220 = ((($vararg_buffer217)) + 4|0);
      HEAP32[$vararg_ptr220>>2] = $1368;
      _StrBuilder_AppendFmt($1366,2722,$vararg_buffer217);
      STACKTOP = sp;return;
     }
    }
   }
   $1362 = $23;
   $1363 = $18;
   $1364 = $12;
   $1365 = (_GetNullStr($1364)|0);
   HEAP32[$vararg_buffer213>>2] = $1363;
   $vararg_ptr216 = ((($vararg_buffer213)) + 4|0);
   HEAP32[$vararg_ptr216>>2] = $1365;
   _StrBuilder_AppendFmt($1362,2722,$vararg_buffer213);
   STACKTOP = sp;return;
  }
  $57 = $795;
  $58 = 0;
  $796 = $12;
  $797 = $13;
  $798 = $14;
  $799 = $15;
  $800 = $17;
  $801 = $16;
  $802 = $18;
  $803 = $19;
  $804 = $20;
  $805 = $21;
  $806 = $57;
  $807 = ((($806)) + 16|0);
  $808 = HEAP32[$807>>2]|0;
  $809 = $23;
  $810 = (_FindHighLevelFunction($796,$797,$798,$799,$800,$801,$802,$803,$804,$805,$808,$809)|0);
  $811 = $810&1;
  $58 = $811;
  $812 = $58;
  $813 = $812&1;
  if ($813) {
   STACKTOP = sp;return;
  }
  $814 = $57;
  $815 = ($814|0)!=(0|0);
  if ($815) {
   $816 = $57;
   $817 = ((($816)) + 16|0);
   $818 = HEAP32[$817>>2]|0;
   $819 = ($818|0)!=(0|0);
   if ($819) {
    $820 = $12;
    $821 = ((($820)) + 24|0);
    $822 = $57;
    $823 = ((($822)) + 16|0);
    $824 = HEAP32[$823>>2]|0;
    $825 = (_SymbolMap_FindStructUnion($821,$824)|0);
    $57 = $825;
   }
  }
  $826 = $57;
  $827 = ($826|0)!=(0|0);
  if ($827) {
   $828 = $57;
   $829 = ((($828)) + 24|0);
   $830 = HEAP32[$829>>2]|0;
   $831 = ($830|0)==(116);
   $833 = $831;
  } else {
   $833 = 0;
  }
  $832 = $833&1;
  $59 = $832;
  $834 = $57;
  $835 = ($834|0)!=(0|0);
  if ($835) {
   $836 = $57;
   $837 = ((($836)) + 4|0);
   $838 = ((($837)) + 4|0);
   $839 = HEAP32[$838>>2]|0;
   $840 = ($839|0)>(0);
   if ($840) {
    $841 = $20;
    $842 = ($841|0)==(2);
    do {
     if ($842) {
      $843 = $12;
      $844 = $13;
      $845 = $18;
      $846 = $23;
      _PrintIfNotNullLn($843,$844,$845,$846);
      $847 = $23;
      $848 = $13;
      $849 = ((($848)) + 20|0);
      $850 = HEAP32[$849>>2]|0;
      $851 = $850<<2;
      $852 = $18;
      HEAP32[$vararg_buffer128>>2] = $852;
      _StrBuilder_AppendFmtLn($847,$851,1502,$vararg_buffer128);
      $853 = $13;
      $854 = ((($853)) + 20|0);
      $855 = HEAP32[$854>>2]|0;
      $856 = (($855) + 1)|0;
      HEAP32[$854>>2] = $856;
     } else {
      $857 = $20;
      $858 = ($857|0)==(0);
      if (!($858)) {
       $906 = $20;
       $907 = ($906|0)==(3);
       if ($907) {
        $908 = $23;
        $909 = $13;
        $910 = ((($909)) + 20|0);
        $911 = HEAP32[$910>>2]|0;
        $912 = $911<<2;
        $913 = $57;
        $914 = ((($913)) + 16|0);
        $915 = HEAP32[$914>>2]|0;
        $916 = $57;
        $917 = ((($916)) + 16|0);
        $918 = HEAP32[$917>>2]|0;
        $919 = $12;
        $920 = (_GetMallocStr($919)|0);
        HEAP32[$vararg_buffer140>>2] = $915;
        $vararg_ptr143 = ((($vararg_buffer140)) + 4|0);
        HEAP32[$vararg_ptr143>>2] = $918;
        $vararg_ptr144 = ((($vararg_buffer140)) + 8|0);
        HEAP32[$vararg_ptr144>>2] = $920;
        _StrBuilder_AppendFmtLn($908,$912,2546,$vararg_buffer140);
        $921 = $12;
        $922 = $13;
        $923 = $18;
        $924 = $23;
        _PrintIfNotNullLn($921,$922,$923,$924);
        $925 = $23;
        $926 = $13;
        $927 = ((($926)) + 20|0);
        $928 = HEAP32[$927>>2]|0;
        $929 = $928<<2;
        _StrBuilder_AppendFmtLn($925,$929,1502,$vararg_buffer145);
        $930 = $13;
        $931 = ((($930)) + 20|0);
        $932 = HEAP32[$931>>2]|0;
        $933 = (($932) + 1)|0;
        HEAP32[$931>>2] = $933;
        break;
       }
       $934 = $20;
       $935 = ($934|0)==(6);
       if (!($935)) {
        break;
       }
       $936 = $23;
       $937 = $13;
       $938 = ((($937)) + 20|0);
       $939 = HEAP32[$938>>2]|0;
       $940 = $939<<2;
       (_StrBuilder_AppendIdent($936,$940,1502)|0);
       break;
      }
      $859 = $25;
      $860 = $859&1;
      if ($860) {
       $861 = $12;
       $862 = $13;
       $863 = $18;
       $864 = $23;
       _PrintIfNotNullLn($861,$862,$863,$864);
       $865 = $23;
       $866 = $13;
       $867 = ((($866)) + 20|0);
       $868 = HEAP32[$867>>2]|0;
       $869 = $868<<2;
       _StrBuilder_AppendFmtLn($865,$869,1502,$vararg_buffer131);
       $870 = $13;
       $871 = ((($870)) + 20|0);
       $872 = HEAP32[$871>>2]|0;
       $873 = (($872) + 1)|0;
       HEAP32[$871>>2] = $873;
       break;
      }
      $874 = $26;
      $875 = $874&1;
      if ($875) {
       $876 = $12;
       $877 = $13;
       $878 = $18;
       $879 = $23;
       _PrintIfNotNullLn($876,$877,$878,$879);
       $880 = $23;
       $881 = $13;
       $882 = ((($881)) + 20|0);
       $883 = HEAP32[$882>>2]|0;
       $884 = $883<<2;
       _StrBuilder_AppendFmtLn($880,$884,1502,$vararg_buffer133);
       $885 = $13;
       $886 = ((($885)) + 20|0);
       $887 = HEAP32[$886>>2]|0;
       $888 = (($887) + 1)|0;
       HEAP32[$886>>2] = $888;
       $889 = $19;
       $890 = ($889|0)!=(0|0);
       if ($890) {
        $891 = $23;
        $892 = $13;
        $893 = ((($892)) + 20|0);
        $894 = HEAP32[$893>>2]|0;
        $895 = $894<<2;
        $896 = $19;
        HEAP32[$vararg_buffer135>>2] = $896;
        _StrBuilder_AppendFmtLn($891,$895,2517,$vararg_buffer135);
        $897 = $23;
        $898 = $13;
        $899 = ((($898)) + 20|0);
        $900 = HEAP32[$899>>2]|0;
        $901 = $900<<2;
        _StrBuilder_AppendFmtLn($897,$901,1502,$vararg_buffer138);
        $902 = $13;
        $903 = ((($902)) + 20|0);
        $904 = HEAP32[$903>>2]|0;
        $905 = (($904) + 1)|0;
        HEAP32[$903>>2] = $905;
       }
      }
     }
    } while(0);
    $941 = $59;
    $942 = $941&1;
    L106: do {
     if ($942) {
      $943 = $20;
      $944 = ($943|0)==(2);
      if ($944) {
       $945 = $13;
       $946 = ((($945)) + 20|0);
       $947 = HEAP32[$946>>2]|0;
       $948 = (($947) + 1)|0;
       HEAP32[$946>>2] = $948;
       $949 = $12;
       $950 = $13;
       $951 = $57;
       $952 = ((($951)) + 16|0);
       $953 = HEAP32[$952>>2]|0;
       $954 = $18;
       $955 = $23;
       _UnionTypeDefault($949,$950,$953,0,$954,2590,$955);
       $956 = $13;
       $957 = ((($956)) + 20|0);
       $958 = HEAP32[$957>>2]|0;
       $959 = (($958) + -1)|0;
       HEAP32[$957>>2] = $959;
       break;
      }
      $960 = $20;
      $961 = ($960|0)==(1);
      $962 = $20;
      $963 = ($962|0)==(0);
      $or$cond9 = $961 | $963;
      if ($or$cond9) {
       $964 = $13;
       $965 = ((($964)) + 20|0);
       $966 = HEAP32[$965>>2]|0;
       $967 = (($966) + 1)|0;
       HEAP32[$965>>2] = $967;
       $968 = $12;
       $969 = $13;
       $970 = $57;
       $971 = ((($970)) + 16|0);
       $972 = HEAP32[$971>>2]|0;
       $973 = $18;
       $974 = $23;
       _UnionTypeDefault($968,$969,$972,0,$973,2597,$974);
       $975 = $13;
       $976 = ((($975)) + 20|0);
       $977 = HEAP32[$976>>2]|0;
       $978 = (($977) + -1)|0;
       HEAP32[$976>>2] = $978;
      }
     } else {
      $60 = 0;
      $61 = 0;
      while(1) {
       $979 = $61;
       $980 = $57;
       $981 = ((($980)) + 4|0);
       $982 = ((($981)) + 4|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = ($979|0)<($983|0);
       if (!($984)) {
        break L106;
       }
       $985 = $57;
       $986 = ((($985)) + 4|0);
       $987 = HEAP32[$986>>2]|0;
       $988 = $61;
       $989 = (($987) + ($988<<2)|0);
       $990 = HEAP32[$989>>2]|0;
       $62 = $990;
       $991 = $62;
       $992 = (_TAnyStructDeclaration_As_TStructDeclaration($991)|0);
       $63 = $992;
       $993 = $63;
       $994 = ($993|0)!=(0|0);
       if ($994) {
        $995 = $63;
        $996 = ((($995)) + 16|0);
        $997 = HEAP32[$996>>2]|0;
        $64 = $997;
        ;HEAP32[$65>>2]=0|0;HEAP32[$65+4>>2]=0|0;HEAP32[$65+8>>2]=0|0;
        ;HEAP32[$66>>2]=0|0;HEAP32[$66+4>>2]=0|0;HEAP32[$66+8>>2]=0|0;
        while(1) {
         $998 = $64;
         $999 = ($998|0)!=(0|0);
         if (!($999)) {
          break;
         }
         $1000 = $20;
         $1001 = ($1000|0)==(6);
         $1002 = $60;
         $1003 = ($1002|0)>(0);
         $or$cond11 = $1001 & $1003;
         if ($or$cond11) {
          $1004 = $23;
          (_StrBuilder_Append($1004,1436)|0);
         }
         $1005 = $60;
         $1006 = (($1005) + 1)|0;
         $60 = $1006;
         $1007 = $64;
         $1008 = ((($1007)) + 4|0);
         $1009 = HEAP32[$1008>>2]|0;
         $67 = $1009;
         _TPrimaryExpressionValue_Init($68);
         _StrBuilder_Clear($65);
         _StrBuilder_Clear($66);
         $1010 = $64;
         $1011 = HEAP32[$1010>>2]|0;
         $1012 = (_TDeclarator_GetName($1011)|0);
         $69 = $1012;
         $1013 = $20;
         $1014 = ($1013|0)!=(6);
         do {
          if ($1014) {
           $1015 = $18;
           $1016 = ($1015|0)!=(0|0);
           if ($1016) {
            $1017 = $18;
            (_StrBuilder_Set($65,$1017)|0);
           }
           $1018 = $26;
           $1019 = $1018&1;
           do {
            if ($1019) {
             $1020 = $19;
             $1021 = ($1020|0)!=(0|0);
             if ($1021) {
              (_StrBuilder_Append($65,2605)|0);
              break;
             } else {
              (_StrBuilder_Append($65,2609)|0);
              break;
             }
            }
           } while(0);
           $1022 = $28;
           $1023 = $1022&1;
           if ($1023) {
            (_StrBuilder_Append($65,2038)|0);
            break;
           } else {
            (_StrBuilder_Append($65,6966)|0);
            break;
           }
          } else {
           (_StrBuilder_Append($65,6966)|0);
          }
         } while(0);
         $1024 = $69;
         (_StrBuilder_Append($65,$1024)|0);
         $1025 = $20;
         $70 = $1025;
         $1026 = $20;
         $1027 = ($1026|0)==(1);
         $1028 = $20;
         $1029 = ($1028|0)==(2);
         $or$cond13 = $1027 | $1029;
         do {
          if ($or$cond13) {
           $70 = 0;
          } else {
           $1030 = $20;
           $1031 = ($1030|0)==(5);
           if ($1031) {
            $71 = 0;
            $1032 = $17;
            $1033 = ($1032|0)!=(0|0);
            do {
             if ($1033) {
              $1034 = $17;
              $1035 = $69;
              $1036 = (_TParameterTypeList_FindParameterByName($1034,$1035)|0);
              $71 = $1036;
              $1037 = $71;
              $1038 = ($1037|0)!=(0|0);
              if (!($1038)) {
               break;
              }
              $1039 = (_TPrimaryExpressionValue_As_TExpression($68)|0);
              $1040 = (_TExpression_As_TInitializer($1039)|0);
              $67 = $1040;
              $1041 = ((($68)) + 4|0);
              HEAP32[$1041>>2] = 7;
              $1042 = ((($68)) + 8|0);
              $1043 = $69;
              _String_Set($1042,$1043);
             }
            } while(0);
            $70 = 4;
            break;
           }
           $1044 = $20;
           $1045 = ($1044|0)==(3);
           if (!($1045)) {
            break;
           }
           $72 = 0;
           $1046 = $17;
           $1047 = ($1046|0)!=(0|0);
           do {
            if ($1047) {
             $1048 = $17;
             $1049 = $69;
             $1050 = (_TParameterTypeList_FindParameterByName($1048,$1049)|0);
             $72 = $1050;
             $1051 = $72;
             $1052 = ($1051|0)!=(0|0);
             if (!($1052)) {
              break;
             }
             $1053 = (_TPrimaryExpressionValue_As_TExpression($68)|0);
             $1054 = (_TExpression_As_TInitializer($1053)|0);
             $67 = $1054;
             $1055 = ((($68)) + 4|0);
             HEAP32[$1055>>2] = 7;
             $1056 = ((($68)) + 8|0);
             $1057 = $69;
             _String_Set($1056,$1057);
            }
           } while(0);
           $70 = 4;
          }
         } while(0);
         $1058 = $70;
         $1059 = ($1058|0)==(0);
         do {
          if ($1059) {
           $1060 = $64;
           $1061 = HEAP32[$1060>>2]|0;
           $1062 = (_TPointerList_GetSize($1061)|0);
           $73 = $1062;
           $1063 = $73;
           $1064 = ($1063|0)!=(0|0);
           if (!($1064)) {
            break;
           }
           $1065 = $18;
           $1066 = ($1065|0)!=(0|0);
           if ($1066) {
            $1067 = $18;
            (_StrBuilder_Set($66,$1067)|0);
           }
           $1068 = $24;
           $1069 = $1068&1;
           do {
            if ($1069) {
             label = 198;
            } else {
             $1070 = $25;
             $1071 = $1070&1;
             if ($1071) {
              label = 198;
              break;
             }
             $1072 = $26;
             $1073 = $1072&1;
             if ($1073) {
              label = 198;
              break;
             }
             (_StrBuilder_Append($66,6966)|0);
            }
           } while(0);
           if ((label|0) == 198) {
            label = 0;
            (_StrBuilder_Append($66,2038)|0);
           }
           $1074 = $73;
           (_StrBuilder_Append($66,$1074)|0);
          }
         } while(0);
         $1075 = $12;
         $1076 = $13;
         $1077 = $63;
         $1078 = ((($1077)) + 4|0);
         $1079 = $64;
         $1080 = HEAP32[$1079>>2]|0;
         $1081 = $67;
         $1082 = HEAP32[$65>>2]|0;
         $1083 = HEAP32[$66>>2]|0;
         $1084 = $70;
         $1085 = $22;
         $1086 = $23;
         _InstanciateDestroy2($1075,$1076,$1078,$1080,$1081,0,$1082,$1083,$1084,1,$1085,$1086);
         _TPrimaryExpressionValue_Destroy($68);
         $1087 = $64;
         $1088 = ((($1087)) + 8|0);
         $1089 = HEAP32[$1088>>2]|0;
         $64 = $1089;
        }
        _StrBuilder_Destroy($65);
        _StrBuilder_Destroy($66);
       }
       $1090 = $61;
       $1091 = (($1090) + 1)|0;
       $61 = $1091;
      }
     }
    } while(0);
    $1092 = $20;
    $1093 = ($1092|0)==(0);
    if ($1093) {
     $1094 = $25;
     $1095 = $1094&1;
     if ($1095) {
      $1096 = $23;
      $1097 = $13;
      $1098 = ((($1097)) + 20|0);
      $1099 = HEAP32[$1098>>2]|0;
      $1100 = $1099<<2;
      $1101 = $12;
      $1102 = (_GetFreeStr($1101)|0);
      $1103 = $18;
      HEAP32[$vararg_buffer147>>2] = $1102;
      $vararg_ptr150 = ((($vararg_buffer147)) + 4|0);
      HEAP32[$vararg_ptr150>>2] = $1103;
      _StrBuilder_AppendFmtLn($1096,$1100,2613,$vararg_buffer147);
      $1104 = $13;
      $1105 = ((($1104)) + 20|0);
      $1106 = HEAP32[$1105>>2]|0;
      $1107 = (($1106) + -1)|0;
      HEAP32[$1105>>2] = $1107;
      $1108 = $23;
      $1109 = $13;
      $1110 = ((($1109)) + 20|0);
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = $1111<<2;
      _StrBuilder_AppendFmtLn($1108,$1112,1449,$vararg_buffer151);
      STACKTOP = sp;return;
     }
     $1113 = $26;
     $1114 = $1113&1;
     if (!($1114)) {
      STACKTOP = sp;return;
     }
     $1115 = $19;
     $1116 = ($1115|0)!=(0|0);
     if ($1116) {
      $1117 = $13;
      $1118 = ((($1117)) + 20|0);
      $1119 = HEAP32[$1118>>2]|0;
      $1120 = (($1119) + -1)|0;
      HEAP32[$1118>>2] = $1120;
      $1121 = $23;
      $1122 = $13;
      $1123 = ((($1122)) + 20|0);
      $1124 = HEAP32[$1123>>2]|0;
      $1125 = $1124<<2;
      _StrBuilder_AppendFmtLn($1121,$1125,1449,$vararg_buffer153);
      $1126 = $23;
      $1127 = $13;
      $1128 = ((($1127)) + 20|0);
      $1129 = HEAP32[$1128>>2]|0;
      $1130 = $1129<<2;
      $1131 = $12;
      $1132 = (_GetFreeStr($1131)|0);
      $1133 = $18;
      HEAP32[$vararg_buffer155>>2] = $1132;
      $vararg_ptr158 = ((($vararg_buffer155)) + 4|0);
      HEAP32[$vararg_ptr158>>2] = $1133;
      _StrBuilder_AppendFmtLn($1126,$1130,2613,$vararg_buffer155);
      $1134 = $13;
      $1135 = ((($1134)) + 20|0);
      $1136 = HEAP32[$1135>>2]|0;
      $1137 = (($1136) + -1)|0;
      HEAP32[$1135>>2] = $1137;
      $1138 = $23;
      $1139 = $13;
      $1140 = ((($1139)) + 20|0);
      $1141 = HEAP32[$1140>>2]|0;
      $1142 = $1141<<2;
      _StrBuilder_AppendFmtLn($1138,$1142,1449,$vararg_buffer159);
      STACKTOP = sp;return;
     } else {
      $1143 = $23;
      $1144 = $13;
      $1145 = ((($1144)) + 20|0);
      $1146 = HEAP32[$1145>>2]|0;
      $1147 = $1146<<2;
      $1148 = $12;
      $1149 = (_GetFreeStr($1148)|0);
      $1150 = $18;
      HEAP32[$vararg_buffer161>>2] = $1149;
      $vararg_ptr164 = ((($vararg_buffer161)) + 4|0);
      HEAP32[$vararg_ptr164>>2] = $1150;
      _StrBuilder_AppendFmtLn($1143,$1147,2613,$vararg_buffer161);
      $1151 = $13;
      $1152 = ((($1151)) + 20|0);
      $1153 = HEAP32[$1152>>2]|0;
      $1154 = (($1153) + -1)|0;
      HEAP32[$1152>>2] = $1154;
      $1155 = $23;
      $1156 = $13;
      $1157 = ((($1156)) + 20|0);
      $1158 = HEAP32[$1157>>2]|0;
      $1159 = $1158<<2;
      _StrBuilder_AppendFmtLn($1155,$1159,1449,$vararg_buffer165);
      STACKTOP = sp;return;
     }
    }
    $1160 = $20;
    $1161 = ($1160|0)==(1);
    if ($1161) {
     STACKTOP = sp;return;
    }
    $1162 = $20;
    $1163 = ($1162|0)==(2);
    if ($1163) {
     $1164 = $59;
     $1165 = $1164&1;
     if (!($1165)) {
      $1166 = $23;
      $1167 = $13;
      $1168 = ((($1167)) + 20|0);
      $1169 = HEAP32[$1168>>2]|0;
      $1170 = $1169<<2;
      $1171 = $12;
      $1172 = (_GetFreeStr($1171)|0);
      $1173 = $18;
      HEAP32[$vararg_buffer167>>2] = $1172;
      $vararg_ptr170 = ((($vararg_buffer167)) + 4|0);
      HEAP32[$vararg_ptr170>>2] = $1173;
      _StrBuilder_AppendFmtLn($1166,$1170,2613,$vararg_buffer167);
     }
     $1174 = $13;
     $1175 = ((($1174)) + 20|0);
     $1176 = HEAP32[$1175>>2]|0;
     $1177 = (($1176) + -1)|0;
     HEAP32[$1175>>2] = $1177;
     $1178 = $23;
     $1179 = $13;
     $1180 = ((($1179)) + 20|0);
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = $1181<<2;
     _StrBuilder_AppendFmtLn($1178,$1182,1449,$vararg_buffer171);
     STACKTOP = sp;return;
    }
    $1183 = $20;
    $1184 = ($1183|0)==(3);
    if ($1184) {
     $1185 = $13;
     $1186 = ((($1185)) + 20|0);
     $1187 = HEAP32[$1186>>2]|0;
     $1188 = (($1187) + -1)|0;
     HEAP32[$1186>>2] = $1188;
     $1189 = $23;
     $1190 = $13;
     $1191 = ((($1190)) + 20|0);
     $1192 = HEAP32[$1191>>2]|0;
     $1193 = $1192<<2;
     _StrBuilder_AppendFmtLn($1189,$1193,1449,$vararg_buffer173);
     $1194 = $23;
     $1195 = $13;
     $1196 = ((($1195)) + 20|0);
     $1197 = HEAP32[$1196>>2]|0;
     $1198 = $1197<<2;
     _StrBuilder_AppendFmtLn($1194,$1198,2507,$vararg_buffer175);
     STACKTOP = sp;return;
    }
    $1199 = $20;
    $1200 = ($1199|0)==(6);
    if (!($1200)) {
     STACKTOP = sp;return;
    }
    $1201 = $23;
    $1202 = $13;
    $1203 = ((($1202)) + 20|0);
    $1204 = HEAP32[$1203>>2]|0;
    $1205 = $1204<<2;
    (_StrBuilder_AppendIdent($1201,$1205,1449)|0);
    STACKTOP = sp;return;
   }
  }
  $1206 = $23;
  $1207 = $18;
  HEAP32[$vararg_buffer177>>2] = $1207;
  _StrBuilder_AppendFmt($1206,2628,$vararg_buffer177);
  STACKTOP = sp;return;
 }
 $30 = $108;
 $109 = $30;
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(7);
 if ($112) {
  $31 = 0;
  _TDeclarator_Init($32);
  $113 = $12;
  $114 = ((($113)) + 24|0);
  $115 = $30;
  $116 = ((($115)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (_SymbolMap_FindTypedefFirstTarget($114,$117,$32)|0);
  $33 = $118;
  $119 = $33;
  $120 = ($119|0)!=(0|0);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $15;
  $122 = HEAP32[$121>>2]|0;
  $34 = $122;
  while(1) {
   $123 = $34;
   $124 = ($123|0)!=(0|0);
   if (!($124)) {
    break;
   }
   $125 = (_TPointer_Create()|0);
   $35 = $125;
   $126 = $35;
   $127 = $34;
   _TPointer_Copy($126,$127);
   $128 = $35;
   _TPointerList_PushBack($32,$128);
   $129 = $34;
   $130 = ((($129)) + 20|0);
   $131 = HEAP32[$130>>2]|0;
   $34 = $131;
  }
  $132 = $20;
  $133 = ($132|0)==(3);
  if ($133) {
   $134 = $23;
   $135 = $13;
   $136 = ((($135)) + 20|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $137<<2;
   $139 = $30;
   $140 = ((($139)) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $30;
   $143 = ((($142)) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $12;
   $146 = (_GetMallocStr($145)|0);
   HEAP32[$vararg_buffer>>2] = $141;
   $vararg_ptr14 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $144;
   $vararg_ptr15 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr15>>2] = $146;
   _StrBuilder_AppendFmtLn($134,$138,2458,$vararg_buffer);
   $147 = $12;
   $148 = $13;
   $149 = $23;
   _PrintIfNotNullLn($147,$148,2270,$149);
   $150 = $23;
   $151 = $13;
   $152 = ((($151)) + 20|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $153<<2;
   _StrBuilder_AppendFmtLn($150,$154,1502,$vararg_buffer16);
   $155 = $13;
   $156 = ((($155)) + 20|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (($157) + 1)|0;
   HEAP32[$156>>2] = $158;
   $159 = $12;
   $160 = ((($159)) + 24|0);
   $161 = $30;
   $162 = ((($161)) + 8|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (_SymbolMap_FindObjFunction($160,$163,2488)|0);
   $36 = $164;
   $165 = $36;
   $166 = ($165|0)!=(0|0);
   if ($166) {
    $167 = $23;
    $168 = $13;
    $169 = ((($168)) + 20|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $170<<2;
    $172 = $30;
    $173 = ((($172)) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    HEAP32[$vararg_buffer18>>2] = $174;
    _StrBuilder_AppendFmtIdent($167,$171,2493,$vararg_buffer18);
    $175 = $17;
    $176 = (_TParameterTypeList_HasNamedArgs($175)|0);
    if ($176) {
     $177 = $23;
     (_StrBuilder_Append($177,1436)|0);
     $178 = $17;
     $179 = $23;
     _TParameterTypeList_GetArgsString($178,$179);
    }
    $180 = $23;
    (_StrBuilder_Append($180,2503)|0);
    $31 = 1;
   }
   $181 = $31;
   $182 = $181&1;
   if (!($182)) {
    $183 = $12;
    $184 = $13;
    $185 = $33;
    $186 = $17;
    $187 = $22;
    $188 = $23;
    _InstanciateDestroy2($183,$184,$185,$32,0,$186,2270,0,5,0,$187,$188);
   }
   $189 = $13;
   $190 = ((($189)) + 20|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + -1)|0;
   HEAP32[$190>>2] = $192;
   $193 = $23;
   $194 = $13;
   $195 = ((($194)) + 20|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $196<<2;
   _StrBuilder_AppendFmtLn($193,$197,1449,$vararg_buffer21);
   $198 = $23;
   $199 = $13;
   $200 = ((($199)) + 20|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201<<2;
   _StrBuilder_AppendFmtLn($198,$202,2507,$vararg_buffer23);
  } else {
   $203 = $12;
   $204 = $13;
   $205 = $14;
   $206 = $15;
   $207 = $17;
   $208 = $16;
   $209 = $18;
   $210 = $19;
   $211 = $20;
   $212 = $21;
   $213 = $30;
   $214 = ((($213)) + 8|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $23;
   $217 = (_FindHighLevelFunction($203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$215,$216)|0);
   $218 = $217&1;
   $31 = $218;
   $219 = $31;
   $220 = $219&1;
   if (!($220)) {
    $221 = $20;
    $37 = $221;
    $222 = $12;
    $223 = $13;
    $224 = $33;
    $225 = $16;
    $226 = $17;
    $227 = $18;
    $228 = $19;
    $229 = $37;
    $230 = $21;
    $231 = $22;
    $232 = $23;
    _InstanciateDestroy2($222,$223,$224,$32,$225,$226,$227,$228,$229,$230,$231,$232);
   }
  }
  _TDeclarator_Destroy($32);
  STACKTOP = sp;return;
 }
 $233 = $30;
 $234 = ((($233)) + 4|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)==(112);
 if (!($236)) {
  $237 = $30;
  $238 = ((($237)) + 4|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = ($239|0)==(115);
  if (!($240)) {
   $653 = $30;
   $654 = ((($653)) + 4|0);
   $655 = HEAP32[$654>>2]|0;
   $656 = ($655|0)==(93);
   if ($656) {
    STACKTOP = sp;return;
   }
   $657 = $20;
   $658 = ($657|0)==(0);
   if ($658) {
    $659 = $25;
    $660 = $659&1;
    if ($660) {
     $661 = $23;
     $662 = $13;
     $663 = ((($662)) + 20|0);
     $664 = HEAP32[$663>>2]|0;
     $665 = $664<<2;
     $666 = $12;
     $667 = (_GetFreeStr($666)|0);
     $668 = $18;
     HEAP32[$vararg_buffer77>>2] = $667;
     $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
     HEAP32[$vararg_ptr80>>2] = $668;
     _StrBuilder_AppendFmtLn($661,$665,2613,$vararg_buffer77);
     STACKTOP = sp;return;
    }
    $669 = $26;
    $670 = $669&1;
    if (!($670)) {
     STACKTOP = sp;return;
    }
    $671 = $19;
    $672 = ($671|0)!=(0|0);
    $673 = $23;
    $674 = $13;
    $675 = ((($674)) + 20|0);
    $676 = HEAP32[$675>>2]|0;
    $677 = $676<<2;
    if ($672) {
     $678 = $19;
     HEAP32[$vararg_buffer81>>2] = $678;
     _StrBuilder_AppendFmtLn($673,$677,2517,$vararg_buffer81);
     $679 = $23;
     $680 = $13;
     $681 = ((($680)) + 20|0);
     $682 = HEAP32[$681>>2]|0;
     $683 = $682<<2;
     _StrBuilder_AppendFmtLn($679,$683,1502,$vararg_buffer84);
     $684 = $13;
     $685 = ((($684)) + 20|0);
     $686 = HEAP32[$685>>2]|0;
     $687 = (($686) + 1)|0;
     HEAP32[$685>>2] = $687;
     $688 = $23;
     $689 = $13;
     $690 = ((($689)) + 20|0);
     $691 = HEAP32[$690>>2]|0;
     $692 = $691<<2;
     $693 = $12;
     $694 = (_GetFreeStr($693)|0);
     $695 = $18;
     HEAP32[$vararg_buffer86>>2] = $694;
     $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
     HEAP32[$vararg_ptr89>>2] = $695;
     _StrBuilder_AppendFmtLn($688,$692,2652,$vararg_buffer86);
     $696 = $13;
     $697 = ((($696)) + 20|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = (($698) + -1)|0;
     HEAP32[$697>>2] = $699;
     $700 = $23;
     $701 = $13;
     $702 = ((($701)) + 20|0);
     $703 = HEAP32[$702>>2]|0;
     $704 = $703<<2;
     _StrBuilder_AppendFmtLn($700,$704,1449,$vararg_buffer90);
     $705 = $23;
     $706 = $13;
     $707 = ((($706)) + 20|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = $708<<2;
     $710 = $12;
     $711 = (_GetFreeStr($710)|0);
     $712 = $18;
     HEAP32[$vararg_buffer92>>2] = $711;
     $vararg_ptr95 = ((($vararg_buffer92)) + 4|0);
     HEAP32[$vararg_ptr95>>2] = $712;
     _StrBuilder_AppendFmtLn($705,$709,2613,$vararg_buffer92);
     STACKTOP = sp;return;
    } else {
     $713 = $12;
     $714 = (_GetFreeStr($713)|0);
     $715 = $18;
     HEAP32[$vararg_buffer96>>2] = $714;
     $vararg_ptr99 = ((($vararg_buffer96)) + 4|0);
     HEAP32[$vararg_ptr99>>2] = $715;
     _StrBuilder_AppendFmtLn($673,$677,2670,$vararg_buffer96);
     $716 = $23;
     $717 = $13;
     $718 = ((($717)) + 20|0);
     $719 = HEAP32[$718>>2]|0;
     $720 = $719<<2;
     $721 = $12;
     $722 = (_GetFreeStr($721)|0);
     $723 = $18;
     HEAP32[$vararg_buffer100>>2] = $722;
     $vararg_ptr103 = ((($vararg_buffer100)) + 4|0);
     HEAP32[$vararg_ptr103>>2] = $723;
     _StrBuilder_AppendFmtLn($716,$720,2613,$vararg_buffer100);
     STACKTOP = sp;return;
    }
   }
   $724 = $20;
   $725 = ($724|0)==(4);
   if (!($725)) {
    $765 = $20;
    $766 = ($765|0)==(6);
    if (!($766)) {
     STACKTOP = sp;return;
    }
    $767 = $16;
    $768 = ($767|0)!=(0|0);
    if ($768) {
     $769 = $23;
     $770 = $13;
     $771 = ((($770)) + 20|0);
     $772 = HEAP32[$771>>2]|0;
     $773 = $772<<2;
     $774 = $18;
     HEAP32[$vararg_buffer118>>2] = $774;
     _StrBuilder_AppendFmtIdent($769,$773,2714,$vararg_buffer118);
     $775 = $13;
     ;HEAP32[$56>>2]=HEAP32[$775>>2]|0;HEAP32[$56+4>>2]=HEAP32[$775+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$775+8>>2]|0;HEAP32[$56+12>>2]=HEAP32[$775+12>>2]|0;HEAP32[$56+16>>2]=HEAP32[$775+16>>2]|0;HEAP32[$56+20>>2]=HEAP32[$775+20>>2]|0;
     $776 = $12;
     $777 = $15;
     $778 = $14;
     $779 = $16;
     $780 = $23;
     _TInitializer_CodePrint($776,$56,$777,$778,$779,$780);
     STACKTOP = sp;return;
    }
    $781 = $24;
    $782 = $781&1;
    if (!($782)) {
     $783 = $25;
     $784 = $783&1;
     if (!($784)) {
      $785 = $26;
      $786 = $785&1;
      if (!($786)) {
       $791 = $23;
       $792 = $18;
       HEAP32[$vararg_buffer125>>2] = $792;
       _StrBuilder_AppendFmt($791,2732,$vararg_buffer125);
       STACKTOP = sp;return;
      }
     }
    }
    $787 = $23;
    $788 = $18;
    $789 = $12;
    $790 = (_GetNullStr($789)|0);
    HEAP32[$vararg_buffer121>>2] = $788;
    $vararg_ptr124 = ((($vararg_buffer121)) + 4|0);
    HEAP32[$vararg_ptr124>>2] = $790;
    _StrBuilder_AppendFmt($787,2722,$vararg_buffer121);
    STACKTOP = sp;return;
   }
   $726 = $16;
   $727 = ($726|0)!=(0|0);
   if ($727) {
    $728 = $23;
    $729 = $13;
    $730 = ((($729)) + 20|0);
    $731 = HEAP32[$730>>2]|0;
    $732 = $731<<2;
    $733 = $18;
    HEAP32[$vararg_buffer104>>2] = $733;
    _StrBuilder_AppendFmtIdent($728,$732,2688,$vararg_buffer104);
    $734 = $13;
    ;HEAP32[$55>>2]=HEAP32[$734>>2]|0;HEAP32[$55+4>>2]=HEAP32[$734+4>>2]|0;HEAP32[$55+8>>2]=HEAP32[$734+8>>2]|0;HEAP32[$55+12>>2]=HEAP32[$734+12>>2]|0;HEAP32[$55+16>>2]=HEAP32[$734+16>>2]|0;HEAP32[$55+20>>2]=HEAP32[$734+20>>2]|0;
    $735 = $12;
    $736 = $15;
    $737 = $14;
    $738 = $16;
    $739 = $23;
    _TInitializer_CodePrint($735,$55,$736,$737,$738,$739);
    $740 = $23;
    (_StrBuilder_Append($740,2694)|0);
    STACKTOP = sp;return;
   }
   $741 = $24;
   $742 = $741&1;
   if (!($742)) {
    $743 = $25;
    $744 = $743&1;
    if (!($744)) {
     $745 = $26;
     $746 = $745&1;
     if (!($746)) {
      $755 = $14;
      $756 = (_TSpecifierQualifierList_IsBool($755)|0);
      $757 = $23;
      $758 = $13;
      $759 = ((($758)) + 20|0);
      $760 = HEAP32[$759>>2]|0;
      $761 = $760<<2;
      $762 = $18;
      if ($756) {
       $763 = $12;
       $764 = (_GetFalseStr($763)|0);
       HEAP32[$vararg_buffer111>>2] = $762;
       $vararg_ptr114 = ((($vararg_buffer111)) + 4|0);
       HEAP32[$vararg_ptr114>>2] = $764;
       _StrBuilder_AppendFmtLn($757,$761,2697,$vararg_buffer111);
       STACKTOP = sp;return;
      } else {
       HEAP32[$vararg_buffer115>>2] = $762;
       _StrBuilder_AppendFmtLn($757,$761,2706,$vararg_buffer115);
       STACKTOP = sp;return;
      }
     }
    }
   }
   $747 = $23;
   $748 = $13;
   $749 = ((($748)) + 20|0);
   $750 = HEAP32[$749>>2]|0;
   $751 = $750<<2;
   $752 = $18;
   $753 = $12;
   $754 = (_GetNullStr($753)|0);
   HEAP32[$vararg_buffer107>>2] = $752;
   $vararg_ptr110 = ((($vararg_buffer107)) + 4|0);
   HEAP32[$vararg_ptr110>>2] = $754;
   _StrBuilder_AppendFmtLn($747,$751,2697,$vararg_buffer107);
   STACKTOP = sp;return;
  }
 }
 $38 = 0;
 $39 = 0;
 $241 = $12;
 $242 = $13;
 $243 = $14;
 $244 = $15;
 $245 = $17;
 $246 = $16;
 $247 = $18;
 $248 = $19;
 $249 = $20;
 $250 = $21;
 $251 = $30;
 $252 = ((($251)) + 8|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = $23;
 $255 = (_FindHighLevelFunction($241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$253,$254)|0);
 $256 = $255&1;
 $39 = $256;
 $257 = $39;
 $258 = $257&1;
 if ($258) {
  STACKTOP = sp;return;
 }
 $259 = $30;
 $260 = ($259|0)!=(0|0);
 if ($260) {
  $261 = $30;
  $262 = ((($261)) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($263|0)!=(0|0);
  if ($264) {
   $265 = $12;
   $266 = ((($265)) + 24|0);
   $267 = $30;
   $268 = ((($267)) + 8|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (_SymbolMap_FindStructUnion($266,$269)|0);
   $38 = $270;
  }
 }
 $271 = $38;
 $272 = ($271|0)!=(0|0);
 if ($272) {
  $273 = $38;
  $274 = ((($273)) + 24|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = ($275|0)==(116);
  $278 = $276;
 } else {
  $278 = 0;
 }
 $277 = $278&1;
 $40 = $277;
 $279 = $38;
 $280 = ($279|0)!=(0|0);
 if ($280) {
  $281 = $38;
  $282 = ((($281)) + 4|0);
  $283 = ((($282)) + 4|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = ($284|0)>(0);
  if ($285) {
   $286 = $20;
   $287 = ($286|0)==(2);
   do {
    if ($287) {
     $288 = $12;
     $289 = $13;
     $290 = $18;
     $291 = $23;
     _PrintIfNotNullLn($288,$289,$290,$291);
     $292 = $23;
     $293 = $13;
     $294 = ((($293)) + 20|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $295<<2;
     $297 = $18;
     HEAP32[$vararg_buffer25>>2] = $297;
     _StrBuilder_AppendFmtLn($292,$296,1502,$vararg_buffer25);
     $298 = $13;
     $299 = ((($298)) + 20|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = (($300) + 1)|0;
     HEAP32[$299>>2] = $301;
    } else {
     $302 = $20;
     $303 = ($302|0)==(0);
     if (!($303)) {
      $351 = $20;
      $352 = ($351|0)==(3);
      if ($352) {
       $353 = $23;
       $354 = $13;
       $355 = ((($354)) + 20|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = $356<<2;
       $358 = $38;
       $359 = ((($358)) + 16|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = $38;
       $362 = ((($361)) + 16|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = $12;
       $365 = (_GetMallocStr($364)|0);
       HEAP32[$vararg_buffer37>>2] = $360;
       $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
       HEAP32[$vararg_ptr40>>2] = $363;
       $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
       HEAP32[$vararg_ptr41>>2] = $365;
       _StrBuilder_AppendFmtLn($353,$357,2546,$vararg_buffer37);
       $366 = $12;
       $367 = $13;
       $368 = $18;
       $369 = $23;
       _PrintIfNotNullLn($366,$367,$368,$369);
       $370 = $23;
       $371 = $13;
       $372 = ((($371)) + 20|0);
       $373 = HEAP32[$372>>2]|0;
       $374 = $373<<2;
       _StrBuilder_AppendFmtLn($370,$374,1502,$vararg_buffer42);
       $375 = $13;
       $376 = ((($375)) + 20|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = (($377) + 1)|0;
       HEAP32[$376>>2] = $378;
       break;
      }
      $379 = $20;
      $380 = ($379|0)==(6);
      if (!($380)) {
       break;
      }
      $381 = $23;
      $382 = $13;
      $383 = ((($382)) + 20|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = $384<<2;
      (_StrBuilder_AppendIdent($381,$385,1502)|0);
      break;
     }
     $304 = $25;
     $305 = $304&1;
     if ($305) {
      $306 = $12;
      $307 = $13;
      $308 = $18;
      $309 = $23;
      _PrintIfNotNullLn($306,$307,$308,$309);
      $310 = $23;
      $311 = $13;
      $312 = ((($311)) + 20|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $313<<2;
      _StrBuilder_AppendFmtLn($310,$314,1502,$vararg_buffer28);
      $315 = $13;
      $316 = ((($315)) + 20|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = (($317) + 1)|0;
      HEAP32[$316>>2] = $318;
      break;
     }
     $319 = $26;
     $320 = $319&1;
     if ($320) {
      $321 = $12;
      $322 = $13;
      $323 = $18;
      $324 = $23;
      _PrintIfNotNullLn($321,$322,$323,$324);
      $325 = $23;
      $326 = $13;
      $327 = ((($326)) + 20|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = $328<<2;
      _StrBuilder_AppendFmtLn($325,$329,1502,$vararg_buffer30);
      $330 = $13;
      $331 = ((($330)) + 20|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = (($332) + 1)|0;
      HEAP32[$331>>2] = $333;
      $334 = $19;
      $335 = ($334|0)!=(0|0);
      if ($335) {
       $336 = $23;
       $337 = $13;
       $338 = ((($337)) + 20|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = $339<<2;
       $341 = $19;
       HEAP32[$vararg_buffer32>>2] = $341;
       _StrBuilder_AppendFmtLn($336,$340,2517,$vararg_buffer32);
       $342 = $23;
       $343 = $13;
       $344 = ((($343)) + 20|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = $345<<2;
       _StrBuilder_AppendFmtLn($342,$346,1502,$vararg_buffer35);
       $347 = $13;
       $348 = ((($347)) + 20|0);
       $349 = HEAP32[$348>>2]|0;
       $350 = (($349) + 1)|0;
       HEAP32[$348>>2] = $350;
      }
     }
    }
   } while(0);
   $386 = $40;
   $387 = $386&1;
   L318: do {
    if ($387) {
     $388 = $20;
     $389 = ($388|0)==(2);
     if ($389) {
      $390 = $13;
      $391 = ((($390)) + 20|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = (($392) + 1)|0;
      HEAP32[$391>>2] = $393;
      $394 = $12;
      $395 = $13;
      $396 = $38;
      $397 = ((($396)) + 16|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = $18;
      $400 = $23;
      _UnionTypeDefault($394,$395,$398,0,$399,2590,$400);
      $401 = $13;
      $402 = ((($401)) + 20|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = (($403) + -1)|0;
      HEAP32[$402>>2] = $404;
      break;
     }
     $405 = $20;
     $406 = ($405|0)==(1);
     $407 = $20;
     $408 = ($407|0)==(0);
     $or$cond3 = $406 | $408;
     if ($or$cond3) {
      $409 = $13;
      $410 = ((($409)) + 20|0);
      $411 = HEAP32[$410>>2]|0;
      $412 = (($411) + 1)|0;
      HEAP32[$410>>2] = $412;
      $413 = $12;
      $414 = $13;
      $415 = $38;
      $416 = ((($415)) + 16|0);
      $417 = HEAP32[$416>>2]|0;
      $418 = $18;
      $419 = $23;
      _UnionTypeDefault($413,$414,$417,0,$418,2597,$419);
      $420 = $13;
      $421 = ((($420)) + 20|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = (($422) + -1)|0;
      HEAP32[$421>>2] = $423;
     }
    } else {
     $41 = 0;
     $42 = 0;
     while(1) {
      $424 = $42;
      $425 = $38;
      $426 = ((($425)) + 4|0);
      $427 = ((($426)) + 4|0);
      $428 = HEAP32[$427>>2]|0;
      $429 = ($424|0)<($428|0);
      if (!($429)) {
       break L318;
      }
      $430 = $38;
      $431 = ((($430)) + 4|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = $42;
      $434 = (($432) + ($433<<2)|0);
      $435 = HEAP32[$434>>2]|0;
      $43 = $435;
      $436 = $43;
      $437 = (_TAnyStructDeclaration_As_TStructDeclaration($436)|0);
      $44 = $437;
      $438 = $44;
      $439 = ($438|0)!=(0|0);
      if ($439) {
       $440 = $44;
       $441 = ((($440)) + 16|0);
       $442 = HEAP32[$441>>2]|0;
       $45 = $442;
       ;HEAP32[$46>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;
       ;HEAP32[$47>>2]=0|0;HEAP32[$47+4>>2]=0|0;HEAP32[$47+8>>2]=0|0;
       while(1) {
        $443 = $45;
        $444 = ($443|0)!=(0|0);
        if (!($444)) {
         break;
        }
        $445 = $20;
        $446 = ($445|0)==(6);
        $447 = $41;
        $448 = ($447|0)>(0);
        $or$cond5 = $446 & $448;
        if ($or$cond5) {
         $449 = $23;
         (_StrBuilder_Append($449,1436)|0);
        }
        $450 = $41;
        $451 = (($450) + 1)|0;
        $41 = $451;
        $452 = $45;
        $453 = ((($452)) + 4|0);
        $454 = HEAP32[$453>>2]|0;
        $48 = $454;
        _TPrimaryExpressionValue_Init($49);
        _StrBuilder_Clear($46);
        _StrBuilder_Clear($47);
        $455 = $45;
        $456 = HEAP32[$455>>2]|0;
        $457 = (_TDeclarator_GetName($456)|0);
        $50 = $457;
        $458 = $20;
        $459 = ($458|0)!=(6);
        do {
         if ($459) {
          $460 = $18;
          $461 = ($460|0)!=(0|0);
          if ($461) {
           $462 = $18;
           (_StrBuilder_Set($46,$462)|0);
          }
          $463 = $26;
          $464 = $463&1;
          do {
           if ($464) {
            $465 = $19;
            $466 = ($465|0)!=(0|0);
            if ($466) {
             (_StrBuilder_Append($46,2605)|0);
             break;
            } else {
             (_StrBuilder_Append($46,2609)|0);
             break;
            }
           }
          } while(0);
          $467 = $28;
          $468 = $467&1;
          if ($468) {
           (_StrBuilder_Append($46,2038)|0);
           break;
          } else {
           (_StrBuilder_Append($46,6966)|0);
           break;
          }
         } else {
          (_StrBuilder_Append($46,6966)|0);
         }
        } while(0);
        $469 = $50;
        (_StrBuilder_Append($46,$469)|0);
        $470 = $20;
        $51 = $470;
        $471 = $20;
        $472 = ($471|0)==(1);
        $473 = $20;
        $474 = ($473|0)==(2);
        $or$cond7 = $472 | $474;
        do {
         if ($or$cond7) {
          $51 = 0;
         } else {
          $475 = $20;
          $476 = ($475|0)==(5);
          if ($476) {
           $52 = 0;
           $477 = $17;
           $478 = ($477|0)!=(0|0);
           do {
            if ($478) {
             $479 = $17;
             $480 = $50;
             $481 = (_TParameterTypeList_FindParameterByName($479,$480)|0);
             $52 = $481;
             $482 = $52;
             $483 = ($482|0)!=(0|0);
             if (!($483)) {
              break;
             }
             $484 = (_TPrimaryExpressionValue_As_TExpression($49)|0);
             $485 = (_TExpression_As_TInitializer($484)|0);
             $48 = $485;
             $486 = ((($49)) + 4|0);
             HEAP32[$486>>2] = 7;
             $487 = ((($49)) + 8|0);
             $488 = $50;
             _String_Set($487,$488);
            }
           } while(0);
           $51 = 4;
           break;
          }
          $489 = $20;
          $490 = ($489|0)==(3);
          if (!($490)) {
           break;
          }
          $53 = 0;
          $491 = $17;
          $492 = ($491|0)!=(0|0);
          do {
           if ($492) {
            $493 = $17;
            $494 = $50;
            $495 = (_TParameterTypeList_FindParameterByName($493,$494)|0);
            $53 = $495;
            $496 = $53;
            $497 = ($496|0)!=(0|0);
            if (!($497)) {
             break;
            }
            $498 = (_TPrimaryExpressionValue_As_TExpression($49)|0);
            $499 = (_TExpression_As_TInitializer($498)|0);
            $48 = $499;
            $500 = ((($49)) + 4|0);
            HEAP32[$500>>2] = 7;
            $501 = ((($49)) + 8|0);
            $502 = $50;
            _String_Set($501,$502);
           }
          } while(0);
          $51 = 4;
         }
        } while(0);
        $503 = $51;
        $504 = ($503|0)==(0);
        do {
         if ($504) {
          $505 = $45;
          $506 = HEAP32[$505>>2]|0;
          $507 = (_TPointerList_GetSize($506)|0);
          $54 = $507;
          $508 = $54;
          $509 = ($508|0)!=(0|0);
          if (!($509)) {
           break;
          }
          $510 = $18;
          $511 = ($510|0)!=(0|0);
          if ($511) {
           $512 = $18;
           (_StrBuilder_Set($47,$512)|0);
          }
          $513 = $24;
          $514 = $513&1;
          do {
           if ($514) {
            label = 85;
           } else {
            $515 = $25;
            $516 = $515&1;
            if ($516) {
             label = 85;
             break;
            }
            $517 = $26;
            $518 = $517&1;
            if ($518) {
             label = 85;
             break;
            }
            (_StrBuilder_Append($47,6966)|0);
           }
          } while(0);
          if ((label|0) == 85) {
           label = 0;
           (_StrBuilder_Append($47,2038)|0);
          }
          $519 = $54;
          (_StrBuilder_Append($47,$519)|0);
         }
        } while(0);
        $520 = $12;
        $521 = $13;
        $522 = $44;
        $523 = ((($522)) + 4|0);
        $524 = $45;
        $525 = HEAP32[$524>>2]|0;
        $526 = $48;
        $527 = HEAP32[$46>>2]|0;
        $528 = HEAP32[$47>>2]|0;
        $529 = $51;
        $530 = $22;
        $531 = $23;
        _InstanciateDestroy2($520,$521,$523,$525,$526,0,$527,$528,$529,1,$530,$531);
        _TPrimaryExpressionValue_Destroy($49);
        $532 = $45;
        $533 = ((($532)) + 8|0);
        $534 = HEAP32[$533>>2]|0;
        $45 = $534;
       }
       _StrBuilder_Destroy($46);
       _StrBuilder_Destroy($47);
      }
      $535 = $42;
      $536 = (($535) + 1)|0;
      $42 = $536;
     }
    }
   } while(0);
   $537 = $20;
   $538 = ($537|0)==(0);
   if ($538) {
    $539 = $25;
    $540 = $539&1;
    if ($540) {
     $541 = $23;
     $542 = $13;
     $543 = ((($542)) + 20|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = $544<<2;
     $546 = $12;
     $547 = (_GetFreeStr($546)|0);
     $548 = $18;
     HEAP32[$vararg_buffer44>>2] = $547;
     $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
     HEAP32[$vararg_ptr47>>2] = $548;
     _StrBuilder_AppendFmtLn($541,$545,2613,$vararg_buffer44);
     $549 = $13;
     $550 = ((($549)) + 20|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = (($551) + -1)|0;
     HEAP32[$550>>2] = $552;
     $553 = $23;
     $554 = $13;
     $555 = ((($554)) + 20|0);
     $556 = HEAP32[$555>>2]|0;
     $557 = $556<<2;
     _StrBuilder_AppendFmtLn($553,$557,1449,$vararg_buffer48);
     STACKTOP = sp;return;
    }
    $558 = $26;
    $559 = $558&1;
    if (!($559)) {
     STACKTOP = sp;return;
    }
    $560 = $19;
    $561 = ($560|0)!=(0|0);
    if ($561) {
     $562 = $13;
     $563 = ((($562)) + 20|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = (($564) + -1)|0;
     HEAP32[$563>>2] = $565;
     $566 = $23;
     $567 = $13;
     $568 = ((($567)) + 20|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = $569<<2;
     _StrBuilder_AppendFmtLn($566,$570,1449,$vararg_buffer50);
     $571 = $23;
     $572 = $13;
     $573 = ((($572)) + 20|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = $574<<2;
     $576 = $12;
     $577 = (_GetFreeStr($576)|0);
     $578 = $18;
     HEAP32[$vararg_buffer52>>2] = $577;
     $vararg_ptr55 = ((($vararg_buffer52)) + 4|0);
     HEAP32[$vararg_ptr55>>2] = $578;
     _StrBuilder_AppendFmtLn($571,$575,2613,$vararg_buffer52);
     $579 = $13;
     $580 = ((($579)) + 20|0);
     $581 = HEAP32[$580>>2]|0;
     $582 = (($581) + -1)|0;
     HEAP32[$580>>2] = $582;
     $583 = $23;
     $584 = $13;
     $585 = ((($584)) + 20|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = $586<<2;
     _StrBuilder_AppendFmtLn($583,$587,1449,$vararg_buffer56);
     STACKTOP = sp;return;
    } else {
     $588 = $23;
     $589 = $13;
     $590 = ((($589)) + 20|0);
     $591 = HEAP32[$590>>2]|0;
     $592 = $591<<2;
     $593 = $12;
     $594 = (_GetFreeStr($593)|0);
     $595 = $18;
     HEAP32[$vararg_buffer58>>2] = $594;
     $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
     HEAP32[$vararg_ptr61>>2] = $595;
     _StrBuilder_AppendFmtLn($588,$592,2613,$vararg_buffer58);
     $596 = $13;
     $597 = ((($596)) + 20|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = (($598) + -1)|0;
     HEAP32[$597>>2] = $599;
     $600 = $23;
     $601 = $13;
     $602 = ((($601)) + 20|0);
     $603 = HEAP32[$602>>2]|0;
     $604 = $603<<2;
     _StrBuilder_AppendFmtLn($600,$604,1449,$vararg_buffer62);
     STACKTOP = sp;return;
    }
   }
   $605 = $20;
   $606 = ($605|0)==(1);
   if ($606) {
    STACKTOP = sp;return;
   }
   $607 = $20;
   $608 = ($607|0)==(2);
   if ($608) {
    $609 = $40;
    $610 = $609&1;
    if (!($610)) {
     $611 = $23;
     $612 = $13;
     $613 = ((($612)) + 20|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = $614<<2;
     $616 = $12;
     $617 = (_GetFreeStr($616)|0);
     $618 = $18;
     HEAP32[$vararg_buffer64>>2] = $617;
     $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
     HEAP32[$vararg_ptr67>>2] = $618;
     _StrBuilder_AppendFmtLn($611,$615,2613,$vararg_buffer64);
    }
    $619 = $13;
    $620 = ((($619)) + 20|0);
    $621 = HEAP32[$620>>2]|0;
    $622 = (($621) + -1)|0;
    HEAP32[$620>>2] = $622;
    $623 = $23;
    $624 = $13;
    $625 = ((($624)) + 20|0);
    $626 = HEAP32[$625>>2]|0;
    $627 = $626<<2;
    _StrBuilder_AppendFmtLn($623,$627,1449,$vararg_buffer68);
    STACKTOP = sp;return;
   }
   $628 = $20;
   $629 = ($628|0)==(3);
   if ($629) {
    $630 = $13;
    $631 = ((($630)) + 20|0);
    $632 = HEAP32[$631>>2]|0;
    $633 = (($632) + -1)|0;
    HEAP32[$631>>2] = $633;
    $634 = $23;
    $635 = $13;
    $636 = ((($635)) + 20|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = $637<<2;
    _StrBuilder_AppendFmtLn($634,$638,1449,$vararg_buffer70);
    $639 = $23;
    $640 = $13;
    $641 = ((($640)) + 20|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = $642<<2;
    _StrBuilder_AppendFmtLn($639,$643,2507,$vararg_buffer72);
    STACKTOP = sp;return;
   }
   $644 = $20;
   $645 = ($644|0)==(6);
   if (!($645)) {
    STACKTOP = sp;return;
   }
   $646 = $23;
   $647 = $13;
   $648 = ((($647)) + 20|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = $649<<2;
   (_StrBuilder_AppendIdent($646,$650,1449)|0);
   STACKTOP = sp;return;
  }
 }
 $651 = $23;
 $652 = $18;
 HEAP32[$vararg_buffer74>>2] = $652;
 _StrBuilder_AppendFmt($651,2628,$vararg_buffer74);
 STACKTOP = sp;return;
}
function _SymbolMap_FindTypedefFirstTarget($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $113 = $6;
  STACKTOP = sp;return ($113|0);
 }
 $26 = $3;
 $27 = $4;
 $28 = (_SymbolMap_GetAssocAt($26,$27,$7,$8)|0);
 $9 = $28;
 while(1) {
  $29 = $9;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   label = 26;
   break;
  }
  $31 = $9;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(1);
  if ($35) {
   $36 = $9;
   $37 = ((($36)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $4;
   $40 = (_strcmp($38,$39)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    break;
   }
  }
  $111 = $9;
  $112 = HEAP32[$111>>2]|0;
  $9 = $112;
 }
 if ((label|0) == 26) {
  $113 = $6;
  STACKTOP = sp;return ($113|0);
 }
 $42 = $9;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $10 = $44;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 while(1) {
  $45 = $13;
  $46 = $10;
  $47 = ((($46)) + 4|0);
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($45|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $10;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $13;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $14 = $56;
  $57 = $14;
  $58 = HEAP32[$57>>2]|0;
  switch ($58|0) {
  case 9:  {
   $59 = $14;
   $15 = $59;
   $60 = $15;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(114);
   if ($63) {
    $11 = 1;
   }
   break;
  }
  case 6:  {
   $64 = $14;
   $16 = $64;
   $65 = $16;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(7);
   if ($68) {
    $69 = $16;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $12 = $71;
   }
   break;
  }
  default: {
  }
  }
  $72 = $13;
  $73 = (($72) + 1)|0;
  $13 = $73;
 }
 $74 = $11;
 $75 = $74&1;
 if (!($75)) {
  $113 = $6;
  STACKTOP = sp;return ($113|0);
 }
 $76 = $12;
 $77 = ($76|0)!=(0|0);
 $78 = $10;
 $79 = $4;
 $80 = (_TDeclaration_FindDeclarator($78,$79)|0);
 if (!($77)) {
  $20 = $80;
  $97 = $20;
  $98 = HEAP32[$97>>2]|0;
  $21 = $98;
  while(1) {
   $99 = $21;
   $100 = ($99|0)!=(0|0);
   if (!($100)) {
    break;
   }
   $101 = (_TPointer_Create()|0);
   $22 = $101;
   $102 = $22;
   $103 = $21;
   _TPointer_Copy($102,$103);
   $104 = $5;
   $105 = $22;
   _TPointerList_PushBack($104,$105);
   $106 = $21;
   $107 = ((($106)) + 20|0);
   $108 = HEAP32[$107>>2]|0;
   $21 = $108;
  }
  $109 = $10;
  $110 = ((($109)) + 4|0);
  $6 = $110;
  $113 = $6;
  STACKTOP = sp;return ($113|0);
 }
 $17 = $80;
 $81 = $17;
 $82 = ($81|0)!=(0|0);
 if (!($82)) {
  $113 = $6;
  STACKTOP = sp;return ($113|0);
 }
 $83 = $17;
 $84 = HEAP32[$83>>2]|0;
 $18 = $84;
 while(1) {
  $85 = $18;
  $86 = ($85|0)!=(0|0);
  if (!($86)) {
   break;
  }
  $87 = (_TPointer_Create()|0);
  $19 = $87;
  $88 = $19;
  $89 = $18;
  _TPointer_Copy($88,$89);
  $90 = $5;
  $91 = $19;
  _TPointerList_PushBack($90,$91);
  $92 = $18;
  $93 = ((($92)) + 20|0);
  $94 = HEAP32[$93>>2]|0;
  $18 = $94;
 }
 $95 = $10;
 $96 = ((($95)) + 4|0);
 $6 = $96;
 $113 = $6;
 STACKTOP = sp;return ($113|0);
}
function _StrBuilder_AppendFmtLn($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $7 = sp;
 $8 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  (_StrBuilder_Append($12,1441)|0);
  $13 = $6;
  $14 = (($13) + 1)|0;
  $6 = $14;
 }
 HEAP32[$7>>2] = $varargs;
 $15 = $5;
 (_vsnprintf($8,500,$15,$7)|0);
 $16 = $3;
 (_StrBuilder_Append($16,$8)|0);
 $17 = $3;
 (_StrBuilder_Append($17,1443)|0);
 STACKTOP = sp;return;
}
function _GetMallocStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = (_SymbolMap_FindFunction($4,5819)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $12 = 1;
 } else {
  $7 = $1;
  $8 = ((($7)) + 40|0);
  $9 = (_MacroMap_Find($8,5819)|0);
  $10 = ($9|0)!=(0|0);
  $12 = $10;
 }
 $11 = $12&1;
 $2 = $11;
 $13 = $2;
 $14 = $13&1;
 $15 = $14 ? 5819 : 5826;
 STACKTOP = sp;return ($15|0);
}
function _PrintIfNotNullLn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 40|0);
 $11 = (_MacroMap_Find($10,5833)|0);
 $12 = ($11|0)!=(0|0);
 $13 = $12&1;
 $8 = $13;
 $14 = $8;
 $15 = $14&1;
 $16 = $7;
 $17 = $5;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<2;
 $21 = $6;
 if ($15) {
  HEAP32[$vararg_buffer>>2] = $21;
  _StrBuilder_AppendFmtLn($16,$20,5838,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $21;
  _StrBuilder_AppendFmtLn($16,$20,5854,$vararg_buffer1);
  STACKTOP = sp;return;
 }
}
function _SymbolMap_FindObjFunction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $7 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ($9|0)==(0|0);
 $11 = $6;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 } else {
  _memset(($7|0),0,500)|0;
  $13 = $5;
  (_strcat($7,$13)|0);
  (_strcat($7,1778)|0);
  $14 = $6;
  (_strcat($7,$14)|0);
  $15 = $4;
  $16 = (_SymbolMap_FindFunction($15,$7)|0);
  $8 = $16;
  $17 = $8;
  $3 = $17;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _StrBuilder_AppendFmtIdent($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $7 = sp;
 $8 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  (_StrBuilder_Append($12,1441)|0);
  $13 = $6;
  $14 = (($13) + 1)|0;
  $6 = $14;
 }
 HEAP32[$7>>2] = $varargs;
 $15 = $5;
 (_vsnprintf($8,500,$15,$7)|0);
 $16 = $3;
 (_StrBuilder_Append($16,$8)|0);
 STACKTOP = sp;return;
}
function _FindHighLevelFunction($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$expand_i1_val = 0, $$expand_i1_val177 = 0, $$pre_trunc = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer102 = 0, $vararg_buffer106 = 0, $vararg_buffer110 = 0, $vararg_buffer114 = 0, $vararg_buffer118 = 0, $vararg_buffer122 = 0, $vararg_buffer126 = 0;
 var $vararg_buffer128 = 0, $vararg_buffer132 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer143 = 0, $vararg_buffer147 = 0, $vararg_buffer151 = 0, $vararg_buffer155 = 0, $vararg_buffer160 = 0, $vararg_buffer162 = 0, $vararg_buffer165 = 0, $vararg_buffer167 = 0, $vararg_buffer169 = 0, $vararg_buffer172 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer61 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer71 = 0, $vararg_buffer75 = 0, $vararg_buffer79 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer88 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_buffer98 = 0, $vararg_ptr101 = 0, $vararg_ptr105 = 0;
 var $vararg_ptr109 = 0, $vararg_ptr113 = 0, $vararg_ptr117 = 0, $vararg_ptr121 = 0, $vararg_ptr125 = 0, $vararg_ptr131 = 0, $vararg_ptr135 = 0, $vararg_ptr142 = 0, $vararg_ptr146 = 0, $vararg_ptr150 = 0, $vararg_ptr154 = 0, $vararg_ptr158 = 0, $vararg_ptr159 = 0, $vararg_ptr175 = 0, $vararg_ptr20 = 0, $vararg_ptr29 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0;
 var $vararg_ptr51 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr70 = 0, $vararg_ptr74 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, $vararg_ptr91 = 0, $vararg_ptr97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $vararg_buffer172 = sp + 368|0;
 $vararg_buffer169 = sp + 360|0;
 $vararg_buffer167 = sp + 352|0;
 $vararg_buffer165 = sp + 344|0;
 $vararg_buffer162 = sp + 336|0;
 $vararg_buffer160 = sp + 328|0;
 $vararg_buffer155 = sp + 312|0;
 $vararg_buffer151 = sp + 304|0;
 $vararg_buffer147 = sp + 296|0;
 $vararg_buffer143 = sp + 288|0;
 $vararg_buffer139 = sp + 280|0;
 $vararg_buffer136 = sp + 272|0;
 $vararg_buffer132 = sp + 264|0;
 $vararg_buffer128 = sp + 256|0;
 $vararg_buffer126 = sp + 248|0;
 $vararg_buffer122 = sp + 240|0;
 $vararg_buffer118 = sp + 232|0;
 $vararg_buffer114 = sp + 224|0;
 $vararg_buffer110 = sp + 216|0;
 $vararg_buffer106 = sp + 208|0;
 $vararg_buffer102 = sp + 200|0;
 $vararg_buffer98 = sp + 192|0;
 $vararg_buffer94 = sp + 184|0;
 $vararg_buffer92 = sp + 176|0;
 $vararg_buffer88 = sp + 168|0;
 $vararg_buffer86 = sp + 160|0;
 $vararg_buffer83 = sp + 152|0;
 $vararg_buffer79 = sp + 144|0;
 $vararg_buffer75 = sp + 136|0;
 $vararg_buffer71 = sp + 128|0;
 $vararg_buffer67 = sp + 120|0;
 $vararg_buffer65 = sp + 112|0;
 $vararg_buffer61 = sp + 104|0;
 $vararg_buffer57 = sp + 96|0;
 $vararg_buffer55 = sp + 88|0;
 $vararg_buffer52 = sp + 80|0;
 $vararg_buffer48 = sp + 72|0;
 $vararg_buffer44 = sp + 64|0;
 $vararg_buffer40 = sp + 56|0;
 $vararg_buffer36 = sp + 48|0;
 $vararg_buffer32 = sp + 40|0;
 $vararg_buffer30 = sp + 32|0;
 $vararg_buffer26 = sp + 24|0;
 $vararg_buffer24 = sp + 16|0;
 $vararg_buffer21 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 491|0;
 $41 = sp + 376|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $42 = $23;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$expand_i1_val = 0;
  HEAP8[$12>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$12>>0]|0;
  $550 = $$pre_trunc&1;
  STACKTOP = sp;return ($550|0);
 }
 $25 = 0;
 $44 = $16;
 $45 = (_TPointerList_IsPointerToObject($44)|0);
 $46 = $45&1;
 $26 = $46;
 $47 = $16;
 $48 = (_TPointerList_IsAutoPointerToObject($47)|0);
 $49 = $48&1;
 $27 = $49;
 $50 = $16;
 $51 = (_TPointerList_IsAutoPointerToAutoPointer($50)|0);
 $52 = $51&1;
 $28 = $52;
 $53 = $16;
 $54 = (_TPointerList_IsAutoPointerToPointer($53)|0);
 $55 = $54&1;
 $29 = $55;
 $56 = $16;
 $57 = (_TPointerList_IsPointer($56)|0);
 $58 = $57&1;
 $30 = $58;
 $59 = $16;
 $60 = (_TPointerList_IsAutoPointerSizeToObject($59)|0);
 $61 = $60&1;
 $31 = $61;
 $62 = $21;
 $63 = ($62|0)==(0);
 $64 = $21;
 $65 = ($64|0)==(1);
 $or$cond = $63 | $65;
 do {
  if ($or$cond) {
   $66 = $30;
   $67 = $66&1;
   if (!($67)) {
    $307 = $29;
    $308 = $307&1;
    if ($308) {
     break;
    }
    $309 = $22;
    $310 = ($309|0)==(1);
    $311 = $22;
    $312 = ($311|0)==(2);
    $or$cond7 = $310 | $312;
    if (!($or$cond7)) {
     break;
    }
    $313 = $13;
    $314 = ((($313)) + 24|0);
    $315 = $23;
    $316 = (_SymbolMap_FindObjFunction($314,$315,2597)|0);
    $34 = $316;
    $317 = $34;
    $318 = ($317|0)!=(0|0);
    if (!($318)) {
     break;
    }
    $319 = $24;
    $320 = $14;
    $321 = ((($320)) + 20|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $322<<2;
    $324 = $23;
    $325 = $19;
    HEAP32[$vararg_buffer110>>2] = $324;
    $vararg_ptr113 = ((($vararg_buffer110)) + 4|0);
    HEAP32[$vararg_ptr113>>2] = $325;
    _StrBuilder_AppendFmtLn($319,$323,5967,$vararg_buffer110);
    $25 = 1;
    break;
   }
   $68 = $31;
   $69 = $68&1;
   if (!($69)) {
    $70 = $27;
    $71 = $70&1;
    if (!($71)) {
     $72 = $28;
     $73 = $72&1;
     if (!($73)) {
      $295 = $29;
      $296 = $295&1;
      if ($296) {
       $297 = $24;
       $298 = $14;
       $299 = ((($298)) + 20|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = $300<<2;
       $302 = $13;
       $303 = (_GetFreeStr($302)|0);
       $304 = $19;
       HEAP32[$vararg_buffer106>>2] = $303;
       $vararg_ptr109 = ((($vararg_buffer106)) + 4|0);
       HEAP32[$vararg_ptr109>>2] = $304;
       _StrBuilder_AppendFmtLn($297,$301,2613,$vararg_buffer106);
       $25 = 1;
       break;
      }
      $305 = $21;
      $306 = ($305|0)!=(1);
      if (!($306)) {
       break;
      }
      $25 = 1;
      break;
     }
    }
   }
   $74 = $22;
   $75 = ($74|0)==(1);
   $76 = $22;
   $77 = ($76|0)==(4);
   $or$cond3 = $75 | $77;
   if ($or$cond3) {
    $78 = $13;
    $79 = ((($78)) + 24|0);
    $80 = $23;
    $81 = (_SymbolMap_FindObjFunction($79,$80,2590)|0);
    $32 = $81;
    $82 = $32;
    $83 = ($82|0)!=(0|0);
    if ($83) {
     $84 = $27;
     $85 = $84&1;
     if ($85) {
      $86 = $24;
      $87 = $14;
      $88 = ((($87)) + 20|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $89<<2;
      $91 = $23;
      $92 = $19;
      HEAP32[$vararg_buffer>>2] = $91;
      $vararg_ptr20 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr20>>2] = $92;
      _StrBuilder_AppendFmtLn($86,$90,5862,$vararg_buffer);
      $25 = 1;
      break;
     }
     $93 = $28;
     $94 = $93&1;
     if (!($94)) {
      break;
     }
     $95 = $20;
     $96 = ($95|0)!=(0|0);
     $97 = $24;
     $98 = $14;
     $99 = ((($98)) + 20|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100<<2;
     if ($96) {
      $102 = $20;
      HEAP32[$vararg_buffer21>>2] = $102;
      _StrBuilder_AppendFmtLn($97,$101,2517,$vararg_buffer21);
      $103 = $24;
      $104 = $14;
      $105 = ((($104)) + 20|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = $106<<2;
      _StrBuilder_AppendFmtLn($103,$107,1502,$vararg_buffer24);
      $108 = $14;
      $109 = ((($108)) + 20|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($110) + 1)|0;
      HEAP32[$109>>2] = $111;
      $112 = $24;
      $113 = $14;
      $114 = ((($113)) + 20|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $115<<2;
      $117 = $23;
      $118 = $19;
      HEAP32[$vararg_buffer26>>2] = $117;
      $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
      HEAP32[$vararg_ptr29>>2] = $118;
      _StrBuilder_AppendFmtLn($112,$116,5877,$vararg_buffer26);
      $119 = $14;
      $120 = ((($119)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (($121) + -1)|0;
      HEAP32[$120>>2] = $122;
      $123 = $24;
      $124 = $14;
      $125 = ((($124)) + 20|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $126<<2;
      _StrBuilder_AppendFmtLn($123,$127,1449,$vararg_buffer30);
      $128 = $24;
      $129 = $14;
      $130 = ((($129)) + 20|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = $131<<2;
      $133 = $13;
      $134 = (_GetFreeStr($133)|0);
      $135 = $19;
      HEAP32[$vararg_buffer32>>2] = $134;
      $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
      HEAP32[$vararg_ptr35>>2] = $135;
      _StrBuilder_AppendFmtLn($128,$132,2613,$vararg_buffer32);
     } else {
      $136 = $23;
      $137 = $19;
      HEAP32[$vararg_buffer36>>2] = $136;
      $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
      HEAP32[$vararg_ptr39>>2] = $137;
      _StrBuilder_AppendFmtLn($97,$101,5895,$vararg_buffer36);
      $138 = $24;
      $139 = $14;
      $140 = ((($139)) + 20|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $141<<2;
      $143 = $13;
      $144 = (_GetFreeStr($143)|0);
      $145 = $19;
      HEAP32[$vararg_buffer40>>2] = $144;
      $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
      HEAP32[$vararg_ptr43>>2] = $145;
      _StrBuilder_AppendFmtLn($138,$142,2613,$vararg_buffer40);
     }
     $25 = 1;
     break;
    }
    $146 = $22;
    $147 = ($146|0)==(1);
    $148 = $22;
    $149 = ($148|0)==(2);
    $or$cond5 = $147 | $149;
    if ($or$cond5) {
     $150 = $13;
     $151 = ((($150)) + 24|0);
     $152 = $23;
     $153 = (_SymbolMap_FindObjFunction($151,$152,2597)|0);
     $33 = $153;
     $154 = $33;
     $155 = ($154|0)!=(0|0);
     if ($155) {
      $156 = $27;
      $157 = $156&1;
      do {
       if ($157) {
        $158 = $24;
        $159 = $14;
        $160 = ((($159)) + 20|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = $161<<2;
        $163 = $23;
        $164 = $19;
        HEAP32[$vararg_buffer44>>2] = $163;
        $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
        HEAP32[$vararg_ptr47>>2] = $164;
        _StrBuilder_AppendFmtLn($158,$162,5913,$vararg_buffer44);
        $165 = $24;
        $166 = $14;
        $167 = ((($166)) + 20|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = $168<<2;
        $170 = $13;
        $171 = (_GetFreeStr($170)|0);
        $172 = $19;
        HEAP32[$vararg_buffer48>>2] = $171;
        $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
        HEAP32[$vararg_ptr51>>2] = $172;
        _StrBuilder_AppendFmtLn($165,$169,2613,$vararg_buffer48);
       } else {
        $173 = $28;
        $174 = $173&1;
        if ($174) {
         $175 = $20;
         $176 = ($175|0)!=(0|0);
         $177 = $24;
         $178 = $14;
         $179 = ((($178)) + 20|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = $180<<2;
         if ($176) {
          $182 = $20;
          HEAP32[$vararg_buffer52>>2] = $182;
          _StrBuilder_AppendFmtLn($177,$181,2517,$vararg_buffer52);
          $183 = $24;
          $184 = $14;
          $185 = ((($184)) + 20|0);
          $186 = HEAP32[$185>>2]|0;
          $187 = $186<<2;
          _StrBuilder_AppendFmtLn($183,$187,1502,$vararg_buffer55);
          $188 = $14;
          $189 = ((($188)) + 20|0);
          $190 = HEAP32[$189>>2]|0;
          $191 = (($190) + 1)|0;
          HEAP32[$189>>2] = $191;
          $192 = $24;
          $193 = $14;
          $194 = ((($193)) + 20|0);
          $195 = HEAP32[$194>>2]|0;
          $196 = $195<<2;
          $197 = $23;
          $198 = $19;
          HEAP32[$vararg_buffer57>>2] = $197;
          $vararg_ptr60 = ((($vararg_buffer57)) + 4|0);
          HEAP32[$vararg_ptr60>>2] = $198;
          _StrBuilder_AppendFmtLn($192,$196,5929,$vararg_buffer57);
          $199 = $24;
          $200 = $14;
          $201 = ((($200)) + 20|0);
          $202 = HEAP32[$201>>2]|0;
          $203 = $202<<2;
          $204 = $13;
          $205 = (_GetFreeStr($204)|0);
          $206 = $19;
          HEAP32[$vararg_buffer61>>2] = $205;
          $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
          HEAP32[$vararg_ptr64>>2] = $206;
          _StrBuilder_AppendFmtLn($199,$203,2652,$vararg_buffer61);
          $207 = $14;
          $208 = ((($207)) + 20|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = (($209) + -1)|0;
          HEAP32[$208>>2] = $210;
          $211 = $24;
          $212 = $14;
          $213 = ((($212)) + 20|0);
          $214 = HEAP32[$213>>2]|0;
          $215 = $214<<2;
          _StrBuilder_AppendFmtLn($211,$215,1449,$vararg_buffer65);
          $216 = $24;
          $217 = $14;
          $218 = ((($217)) + 20|0);
          $219 = HEAP32[$218>>2]|0;
          $220 = $219<<2;
          $221 = $13;
          $222 = (_GetFreeStr($221)|0);
          $223 = $19;
          HEAP32[$vararg_buffer67>>2] = $222;
          $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
          HEAP32[$vararg_ptr70>>2] = $223;
          _StrBuilder_AppendFmtLn($216,$220,2613,$vararg_buffer67);
          break;
         } else {
          $224 = $23;
          $225 = $19;
          HEAP32[$vararg_buffer71>>2] = $224;
          $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
          HEAP32[$vararg_ptr74>>2] = $225;
          _StrBuilder_AppendFmtLn($177,$181,5948,$vararg_buffer71);
          $226 = $24;
          $227 = $14;
          $228 = ((($227)) + 20|0);
          $229 = HEAP32[$228>>2]|0;
          $230 = $229<<2;
          $231 = $13;
          $232 = (_GetFreeStr($231)|0);
          $233 = $19;
          HEAP32[$vararg_buffer75>>2] = $232;
          $vararg_ptr78 = ((($vararg_buffer75)) + 4|0);
          HEAP32[$vararg_ptr78>>2] = $233;
          _StrBuilder_AppendFmtLn($226,$230,2670,$vararg_buffer75);
          $234 = $24;
          $235 = $14;
          $236 = ((($235)) + 20|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = $237<<2;
          $239 = $13;
          $240 = (_GetFreeStr($239)|0);
          $241 = $19;
          HEAP32[$vararg_buffer79>>2] = $240;
          $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
          HEAP32[$vararg_ptr82>>2] = $241;
          _StrBuilder_AppendFmtLn($234,$238,2613,$vararg_buffer79);
          break;
         }
        }
        $242 = $31;
        $243 = $242&1;
        if ($243) {
         $244 = $20;
         $245 = ($244|0)!=(0|0);
         $246 = $24;
         $247 = $14;
         $248 = ((($247)) + 20|0);
         $249 = HEAP32[$248>>2]|0;
         $250 = $249<<2;
         if ($245) {
          $251 = $20;
          HEAP32[$vararg_buffer83>>2] = $251;
          _StrBuilder_AppendFmtLn($246,$250,2517,$vararg_buffer83);
          $252 = $24;
          $253 = $14;
          $254 = ((($253)) + 20|0);
          $255 = HEAP32[$254>>2]|0;
          $256 = $255<<2;
          _StrBuilder_AppendFmtLn($252,$256,1502,$vararg_buffer86);
          $257 = $14;
          $258 = ((($257)) + 20|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = (($259) + 1)|0;
          HEAP32[$258>>2] = $260;
          $261 = $24;
          $262 = $14;
          $263 = ((($262)) + 20|0);
          $264 = HEAP32[$263>>2]|0;
          $265 = $264<<2;
          $266 = $23;
          $267 = $19;
          HEAP32[$vararg_buffer88>>2] = $266;
          $vararg_ptr91 = ((($vararg_buffer88)) + 4|0);
          HEAP32[$vararg_ptr91>>2] = $267;
          _StrBuilder_AppendFmtLn($261,$265,5929,$vararg_buffer88);
          $268 = $14;
          $269 = ((($268)) + 20|0);
          $270 = HEAP32[$269>>2]|0;
          $271 = (($270) + -1)|0;
          HEAP32[$269>>2] = $271;
          $272 = $24;
          $273 = $14;
          $274 = ((($273)) + 20|0);
          $275 = HEAP32[$274>>2]|0;
          $276 = $275<<2;
          _StrBuilder_AppendFmtLn($272,$276,1449,$vararg_buffer92);
          $277 = $24;
          $278 = $14;
          $279 = ((($278)) + 20|0);
          $280 = HEAP32[$279>>2]|0;
          $281 = $280<<2;
          $282 = $13;
          $283 = (_GetFreeStr($282)|0);
          $284 = $19;
          HEAP32[$vararg_buffer94>>2] = $283;
          $vararg_ptr97 = ((($vararg_buffer94)) + 4|0);
          HEAP32[$vararg_ptr97>>2] = $284;
          _StrBuilder_AppendFmtLn($277,$281,2613,$vararg_buffer94);
          break;
         } else {
          $285 = $23;
          $286 = $19;
          HEAP32[$vararg_buffer98>>2] = $285;
          $vararg_ptr101 = ((($vararg_buffer98)) + 4|0);
          HEAP32[$vararg_ptr101>>2] = $286;
          _StrBuilder_AppendFmtLn($246,$250,5948,$vararg_buffer98);
          $287 = $24;
          $288 = $14;
          $289 = ((($288)) + 20|0);
          $290 = HEAP32[$289>>2]|0;
          $291 = $290<<2;
          $292 = $13;
          $293 = (_GetFreeStr($292)|0);
          $294 = $19;
          HEAP32[$vararg_buffer102>>2] = $293;
          $vararg_ptr105 = ((($vararg_buffer102)) + 4|0);
          HEAP32[$vararg_ptr105>>2] = $294;
          _StrBuilder_AppendFmtLn($287,$291,2613,$vararg_buffer102);
          break;
         }
        }
       }
      } while(0);
      $25 = 1;
     }
    }
   }
  } else {
   $326 = $21;
   $327 = ($326|0)==(2);
   if ($327) {
    $328 = $22;
    $329 = ($328|0)==(1);
    $330 = $22;
    $331 = ($330|0)==(4);
    $or$cond9 = $329 | $331;
    if (!($or$cond9)) {
     $366 = $22;
     $367 = ($366|0)==(1);
     $368 = $22;
     $369 = ($368|0)==(2);
     $or$cond13 = $367 | $369;
     if (!($or$cond13)) {
      break;
     }
     $370 = $13;
     $371 = ((($370)) + 24|0);
     $372 = $23;
     $373 = (_SymbolMap_FindObjFunction($371,$372,2597)|0);
     $37 = $373;
     $374 = $37;
     $375 = ($374|0)!=(0|0);
     if (!($375)) {
      break;
     }
     $376 = $13;
     $377 = $14;
     $378 = $19;
     $379 = $24;
     _PrintIfNotNullLn($376,$377,$378,$379);
     $380 = $24;
     $381 = $14;
     $382 = ((($381)) + 20|0);
     $383 = HEAP32[$382>>2]|0;
     $384 = $383<<2;
     _StrBuilder_AppendFmtLn($380,$384,1502,$vararg_buffer126);
     $385 = $14;
     $386 = ((($385)) + 20|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = (($387) + 1)|0;
     HEAP32[$386>>2] = $388;
     $389 = $24;
     $390 = $14;
     $391 = ((($390)) + 20|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = $392<<2;
     $394 = $23;
     $395 = $19;
     HEAP32[$vararg_buffer128>>2] = $394;
     $vararg_ptr131 = ((($vararg_buffer128)) + 4|0);
     HEAP32[$vararg_ptr131>>2] = $395;
     _StrBuilder_AppendFmtLn($389,$393,5913,$vararg_buffer128);
     $396 = $24;
     $397 = $14;
     $398 = ((($397)) + 20|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = $399<<2;
     $401 = $13;
     $402 = (_GetFreeStr($401)|0);
     $403 = $19;
     HEAP32[$vararg_buffer132>>2] = $402;
     $vararg_ptr135 = ((($vararg_buffer132)) + 4|0);
     HEAP32[$vararg_ptr135>>2] = $403;
     _StrBuilder_AppendFmtLn($396,$400,2613,$vararg_buffer132);
     $404 = $14;
     $405 = ((($404)) + 20|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (($406) + -1)|0;
     HEAP32[$405>>2] = $407;
     $408 = $24;
     $409 = $14;
     $410 = ((($409)) + 20|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = $411<<2;
     $413 = $19;
     HEAP32[$vararg_buffer136>>2] = $413;
     _StrBuilder_AppendFmtLn($408,$412,1449,$vararg_buffer136);
     $25 = 1;
     break;
    }
    $332 = $13;
    $333 = ((($332)) + 24|0);
    $334 = $23;
    $335 = (_SymbolMap_FindObjFunction($333,$334,2590)|0);
    $35 = $335;
    $336 = $35;
    $337 = ($336|0)!=(0|0);
    if ($337) {
     $338 = $24;
     $339 = $14;
     $340 = ((($339)) + 20|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = $341<<2;
     $343 = $23;
     $344 = $19;
     HEAP32[$vararg_buffer114>>2] = $343;
     $vararg_ptr117 = ((($vararg_buffer114)) + 4|0);
     HEAP32[$vararg_ptr117>>2] = $344;
     _StrBuilder_AppendFmtLn($338,$342,5862,$vararg_buffer114);
     $25 = 1;
     break;
    }
    $345 = $22;
    $346 = ($345|0)==(1);
    $347 = $22;
    $348 = ($347|0)==(2);
    $or$cond11 = $346 | $348;
    if (!($or$cond11)) {
     break;
    }
    $349 = $13;
    $350 = ((($349)) + 24|0);
    $351 = $23;
    $352 = (_SymbolMap_FindObjFunction($350,$351,2597)|0);
    $36 = $352;
    $353 = $36;
    $354 = ($353|0)!=(0|0);
    if (!($354)) {
     break;
    }
    $355 = $24;
    $356 = $23;
    $357 = $19;
    HEAP32[$vararg_buffer118>>2] = $356;
    $vararg_ptr121 = ((($vararg_buffer118)) + 4|0);
    HEAP32[$vararg_ptr121>>2] = $357;
    _StrBuilder_AppendFmtLn($355,4,5913,$vararg_buffer118);
    $358 = $24;
    $359 = $14;
    $360 = ((($359)) + 20|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = $361<<2;
    $363 = $13;
    $364 = (_GetFreeStr($363)|0);
    $365 = $19;
    HEAP32[$vararg_buffer122>>2] = $364;
    $vararg_ptr125 = ((($vararg_buffer122)) + 4|0);
    HEAP32[$vararg_ptr125>>2] = $365;
    _StrBuilder_AppendFmtLn($358,$362,2613,$vararg_buffer122);
    $25 = 1;
    break;
   }
   $414 = $21;
   $415 = ($414|0)==(4);
   if ($415) {
    $416 = $30;
    $417 = $416&1;
    if ($417) {
     $418 = $24;
     $419 = $14;
     $420 = ((($419)) + 20|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = $421<<2;
     $423 = $19;
     $424 = $13;
     $425 = (_GetNullStr($424)|0);
     HEAP32[$vararg_buffer139>>2] = $423;
     $vararg_ptr142 = ((($vararg_buffer139)) + 4|0);
     HEAP32[$vararg_ptr142>>2] = $425;
     _StrBuilder_AppendFmtLn($418,$422,2697,$vararg_buffer139);
     $25 = 1;
     break;
    }
    $426 = $22;
    $427 = ($426|0)==(1);
    $428 = $22;
    $429 = ($428|0)==(3);
    $or$cond15 = $427 | $429;
    if (!($or$cond15)) {
     break;
    }
    $430 = $13;
    $431 = ((($430)) + 24|0);
    $432 = $23;
    $433 = (_SymbolMap_FindObjFunction($431,$432,2488)|0);
    $38 = $433;
    $434 = $38;
    $435 = ($434|0)!=(0|0);
    if (!($435)) {
     break;
    }
    $436 = $24;
    $437 = $14;
    $438 = ((($437)) + 20|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $439<<2;
    $441 = $23;
    $442 = $19;
    HEAP32[$vararg_buffer143>>2] = $441;
    $vararg_ptr146 = ((($vararg_buffer143)) + 4|0);
    HEAP32[$vararg_ptr146>>2] = $442;
    _StrBuilder_AppendFmtIdent($436,$440,5984,$vararg_buffer143);
    $443 = $17;
    $444 = $24;
    _TParameterTypeList_GetArgsString($443,$444);
    $445 = $24;
    (_StrBuilder_Append($445,2503)|0);
    $25 = 1;
    break;
   }
   $446 = $21;
   $447 = ($446|0)==(5);
   if ($447) {
    $448 = $22;
    $449 = ($448|0)==(1);
    $450 = $22;
    $451 = ($450|0)==(3);
    $or$cond17 = $449 | $451;
    if (!($or$cond17)) {
     break;
    }
    $452 = $13;
    $453 = ((($452)) + 24|0);
    $454 = $23;
    $455 = (_SymbolMap_FindObjFunction($453,$454,2488)|0);
    $39 = $455;
    $456 = $39;
    $457 = ($456|0)!=(0|0);
    if (!($457)) {
     break;
    }
    $458 = $30;
    $459 = $458&1;
    $460 = $24;
    $461 = $14;
    $462 = ((($461)) + 20|0);
    $463 = HEAP32[$462>>2]|0;
    $464 = $463<<2;
    $465 = $23;
    $466 = $19;
    if ($459) {
     HEAP32[$vararg_buffer147>>2] = $465;
     $vararg_ptr150 = ((($vararg_buffer147)) + 4|0);
     HEAP32[$vararg_ptr150>>2] = $466;
     _StrBuilder_AppendFmtLn($460,$464,5996,$vararg_buffer147);
    } else {
     HEAP32[$vararg_buffer151>>2] = $465;
     $vararg_ptr154 = ((($vararg_buffer151)) + 4|0);
     HEAP32[$vararg_ptr154>>2] = $466;
     _StrBuilder_AppendFmtLn($460,$464,6009,$vararg_buffer151);
    }
    $25 = 1;
    break;
   }
   $467 = $21;
   $468 = ($467|0)==(3);
   if ($468) {
    $469 = $22;
    $470 = ($469|0)==(1);
    $471 = $22;
    $472 = ($471|0)==(3);
    $or$cond19 = $470 | $472;
    if (!($or$cond19)) {
     break;
    }
    $473 = $13;
    $474 = ((($473)) + 24|0);
    $475 = $23;
    $476 = (_SymbolMap_FindObjFunction($474,$475,2488)|0);
    $40 = $476;
    $477 = $40;
    $478 = ($477|0)!=(0|0);
    if (!($478)) {
     break;
    }
    $479 = $24;
    $480 = $14;
    $481 = ((($480)) + 20|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = $482<<2;
    $484 = $23;
    $485 = $23;
    $486 = $13;
    $487 = (_GetMallocStr($486)|0);
    HEAP32[$vararg_buffer155>>2] = $484;
    $vararg_ptr158 = ((($vararg_buffer155)) + 4|0);
    HEAP32[$vararg_ptr158>>2] = $485;
    $vararg_ptr159 = ((($vararg_buffer155)) + 8|0);
    HEAP32[$vararg_ptr159>>2] = $487;
    _StrBuilder_AppendFmtLn($479,$483,6023,$vararg_buffer155);
    $488 = $13;
    $489 = $14;
    $490 = $24;
    _PrintIfNotNullLn($488,$489,2270,$490);
    $491 = $24;
    $492 = $14;
    $493 = ((($492)) + 20|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = $494<<2;
    _StrBuilder_AppendFmtLn($491,$495,1502,$vararg_buffer160);
    $496 = $14;
    $497 = ((($496)) + 20|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = (($498) + 1)|0;
    HEAP32[$497>>2] = $499;
    $500 = $24;
    $501 = $14;
    $502 = ((($501)) + 20|0);
    $503 = HEAP32[$502>>2]|0;
    $504 = $503<<2;
    $505 = $23;
    HEAP32[$vararg_buffer162>>2] = $505;
    _StrBuilder_AppendFmtIdent($500,$504,2493,$vararg_buffer162);
    $506 = $17;
    $507 = (_TParameterTypeList_HasNamedArgs($506)|0);
    if ($507) {
     $508 = $24;
     (_StrBuilder_Append($508,1436)|0);
     $509 = $17;
     $510 = $24;
     _TParameterTypeList_GetArgsString($509,$510);
    }
    $511 = $24;
    (_StrBuilder_Append($511,2503)|0);
    $512 = $14;
    $513 = ((($512)) + 20|0);
    $514 = HEAP32[$513>>2]|0;
    $515 = (($514) + -1)|0;
    HEAP32[$513>>2] = $515;
    $516 = $24;
    $517 = $14;
    $518 = ((($517)) + 20|0);
    $519 = HEAP32[$518>>2]|0;
    $520 = $519<<2;
    _StrBuilder_AppendFmtLn($516,$520,1449,$vararg_buffer165);
    $521 = $24;
    $522 = $14;
    $523 = ((($522)) + 20|0);
    $524 = HEAP32[$523>>2]|0;
    $525 = $524<<2;
    _StrBuilder_AppendFmtLn($521,$525,2507,$vararg_buffer167);
    $25 = 1;
    break;
   } else {
    $526 = $21;
    $527 = ($526|0)==(6);
    if (!($527)) {
     break;
    }
    $528 = $18;
    $529 = ($528|0)!=(0|0);
    if ($529) {
     $530 = $24;
     $531 = $14;
     $532 = ((($531)) + 20|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = $533<<2;
     $535 = $19;
     HEAP32[$vararg_buffer169>>2] = $535;
     _StrBuilder_AppendFmtIdent($530,$534,2714,$vararg_buffer169);
     $536 = $14;
     ;HEAP32[$41>>2]=HEAP32[$536>>2]|0;HEAP32[$41+4>>2]=HEAP32[$536+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$536+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$536+12>>2]|0;HEAP32[$41+16>>2]=HEAP32[$536+16>>2]|0;HEAP32[$41+20>>2]=HEAP32[$536+20>>2]|0;
     $537 = $13;
     $538 = $16;
     $539 = $15;
     $540 = $18;
     $541 = $24;
     _TInitializer_CodePrint($537,$41,$538,$539,$540,$541);
     $25 = 1;
     break;
    }
    $542 = $30;
    $543 = $542&1;
    if (!($543)) {
     break;
    }
    $544 = $24;
    $545 = $19;
    $546 = $13;
    $547 = (_GetNullStr($546)|0);
    HEAP32[$vararg_buffer172>>2] = $545;
    $vararg_ptr175 = ((($vararg_buffer172)) + 4|0);
    HEAP32[$vararg_ptr175>>2] = $547;
    _StrBuilder_AppendFmt($544,2722,$vararg_buffer172);
    $25 = 1;
    break;
   }
  }
 } while(0);
 $548 = $25;
 $549 = $548&1;
 $$expand_i1_val177 = $549&1;
 HEAP8[$12>>0] = $$expand_i1_val177;
 $$pre_trunc = HEAP8[$12>>0]|0;
 $550 = $$pre_trunc&1;
 STACKTOP = sp;return ($550|0);
}
function _StrBuilder_AppendIdent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $4;
  $9 = ($7|0)<($8|0);
  $10 = $3;
  if (!($9)) {
   break;
  }
  (_StrBuilder_Append($10,1441)|0);
  $11 = $6;
  $12 = (($11) + 1)|0;
  $6 = $12;
 }
 $13 = $5;
 $14 = (_StrBuilder_Append($10,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _TAnyStructDeclaration_As_TStructDeclaration($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(12);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _StrBuilder_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  _StrBuilder_Clear($8);
 } else {
  $9 = $3;
  $10 = (_strlen($9)|0);
  $5 = $10;
  $11 = $2;
  _StrBuilder_Clear($11);
  $12 = $5;
  $13 = ($12|0)>(0);
  if ($13) {
   $14 = $2;
   $15 = $3;
   $16 = $3;
   $17 = (_strlen($16)|0);
   $18 = (_StrBuilder_SetN($14,$15,$17)|0);
   $19 = $18&1;
   $4 = $19;
  }
 }
 $20 = $4;
 $21 = $20&1;
 STACKTOP = sp;return ($21|0);
}
function _TExpression_As_TInitializer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _TPrimaryExpressionValue_As_TExpression($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _GetFreeStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = (_SymbolMap_FindFunction($4,6068)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $12 = 1;
 } else {
  $7 = $1;
  $8 = ((($7)) + 40|0);
  $9 = (_MacroMap_Find($8,6068)|0);
  $10 = ($9|0)!=(0|0);
  $12 = $10;
 }
 $11 = $12&1;
 $2 = $11;
 $13 = $2;
 $14 = $13&1;
 $15 = $14 ? 6068 : 6073;
 STACKTOP = sp;return ($15|0);
}
function _StrBuilder_AppendFmt($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $4 = sp;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($5,500,$6,$4)|0);
 $7 = $2;
 (_StrBuilder_Append($7,$5)|0);
 STACKTOP = sp;return;
}
function _GetNullStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 40|0);
 $5 = (_MacroMap_Find($4,5833)|0);
 $6 = ($5|0)!=(0|0);
 $7 = $6&1;
 $2 = $7;
 $8 = $2;
 $9 = $8&1;
 $10 = $9 ? 5833 : 2741;
 STACKTOP = sp;return ($10|0);
}
function _GetFalseStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 40|0);
 $5 = (_MacroMap_Find($4,2202)|0);
 $6 = ($5|0)!=(0|0);
 $7 = $6&1;
 $2 = $7;
 $8 = $2;
 $9 = $8&1;
 $10 = $9 ? 2202 : 2741;
 STACKTOP = sp;return ($10|0);
}
function _TDeclarationSpecifier_As_TEnumSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(7);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _IsSuffix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = (_strlen($8)|0);
 $5 = $9;
 $10 = $3;
 $11 = (_strlen($10)|0);
 $6 = $11;
 $12 = $5;
 $13 = $6;
 $14 = ($12|0)>($13|0);
 if ($14) {
  $15 = $2;
  $16 = $5;
  $17 = $6;
  $18 = (($16) - ($17))|0;
  $19 = (($15) + ($18)|0);
  $7 = $19;
  $20 = $7;
  $21 = $3;
  $22 = (_strcmp($20,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $4 = 1;
  }
 }
 $24 = $4;
 $25 = $24&1;
 STACKTOP = sp;return ($25|0);
}
function _GetStructSpecifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
  $71 = $2;
  STACKTOP = sp;return ($71|0);
 }
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_TDeclarationSpecifier_As_TStructUnionSpecifier($13)|0);
 $5 = $14;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_TDeclarationSpecifier_As_TSingleTypeSpecifier($17)|0);
 $6 = $18;
 $19 = $5;
 $20 = ($19|0)==(0|0);
 $21 = $6;
 $22 = ($21|0)!=(0|0);
 $or$cond = $20 & $22;
 if ($or$cond) {
  $23 = $6;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(7);
  if ($26) {
   $27 = $6;
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $7 = $29;
   $30 = $3;
   $31 = $7;
   $32 = (_TProgram_GetFinalTypeDeclaration($30,$31)|0);
   $8 = $32;
   $33 = $8;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = $8;
    $36 = ((($35)) + 4|0);
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)>(1);
    if ($39) {
     $40 = $8;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (_TDeclarationSpecifier_As_TStructUnionSpecifier($44)|0);
     $5 = $45;
    }
   }
  }
 }
 $46 = $5;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $5;
  $49 = ((($48)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = $3;
   $53 = ((($52)) + 24|0);
   $54 = $5;
   $55 = ((($54)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_SymbolMap_FindStructUnion($53,$56)|0);
   $5 = $57;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $58 = $6;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = $6;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(112);
   if ($63) {
    $64 = $3;
    $65 = ((($64)) + 24|0);
    $66 = $6;
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (_SymbolMap_FindStructUnion($65,$68)|0);
    $5 = $69;
   }
  }
 }
 $70 = $5;
 $2 = $70;
 $71 = $2;
 STACKTOP = sp;return ($71|0);
}
function _SplitPath($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $5;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(58);
  if ($21) {
   $22 = $6;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $5;
    $25 = ((($24)) + 1|0);
    $5 = $25;
    $26 = HEAP8[$24>>0]|0;
    $27 = $6;
    $28 = ((($27)) + 1|0);
    $6 = $28;
    HEAP8[$27>>0] = $26;
    $29 = $5;
    $30 = ((($29)) + 1|0);
    $5 = $30;
    $31 = HEAP8[$29>>0]|0;
    $32 = $6;
    $33 = ((($32)) + 1|0);
    $6 = $33;
    HEAP8[$32>>0] = $31;
    $34 = $6;
    HEAP8[$34>>0] = 0;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $35 = $6;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $6;
   HEAP8[$37>>0] = 0;
  }
 }
 $38 = $5;
 $10 = $38;
 while(1) {
  $39 = $10;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $10;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = ($45|0)!=(58);
   $115 = $46;
  } else {
   $115 = 0;
  }
  $47 = $10;
  if (!($115)) {
   break;
  }
  $48 = ((($47)) + 1|0);
  $10 = $48;
 }
 $11 = $47;
 while(1) {
  $49 = $11;
  $50 = $5;
  $51 = ($49>>>0)>($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $11;
  $53 = ((($52)) + -1|0);
  $11 = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = ($55|0)!=(92);
  if (!($56)) {
   break;
  }
  $57 = $11;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58 << 24 >> 24;
  $60 = ($59|0)!=(47);
  if (!($60)) {
   break;
  }
  $61 = $11;
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(46);
  if ($64) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $65 = $11;
  $10 = $65;
 }
 $66 = $9;
 $67 = ($66|0)!=(0|0);
 L24: do {
  if ($67) {
   $68 = $10;
   $12 = $68;
   while(1) {
    $69 = $12;
    $70 = ((($69)) + 1|0);
    $12 = $70;
    $71 = HEAP8[$69>>0]|0;
    $72 = $9;
    HEAP8[$72>>0] = $71;
    $73 = ($71<<24>>24)!=(0);
    if (!($73)) {
     break L24;
    }
    $74 = $9;
    $75 = ((($74)) + 1|0);
    $9 = $75;
   }
  }
 } while(0);
 $76 = $10;
 $11 = $76;
 while(1) {
  $77 = $11;
  $78 = $5;
  $79 = ($77>>>0)>($78>>>0);
  if (!($79)) {
   break;
  }
  $80 = $11;
  $81 = ((($80)) + -1|0);
  $11 = $81;
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = ($83|0)==(92);
  if ($84) {
   label = 26;
   break;
  }
  $85 = $11;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 << 24 >> 24;
  $88 = ($87|0)==(47);
  if ($88) {
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  $89 = $11;
  $90 = ((($89)) + 1|0);
  $11 = $90;
 }
 $91 = $8;
 $92 = ($91|0)!=(0|0);
 if ($92) {
  $93 = $11;
  $12 = $93;
  while(1) {
   $94 = $12;
   $95 = $10;
   $96 = ($94>>>0)<($95>>>0);
   if (!($96)) {
    break;
   }
   $97 = $12;
   $98 = ((($97)) + 1|0);
   $12 = $98;
   $99 = HEAP8[$97>>0]|0;
   $100 = $8;
   $101 = ((($100)) + 1|0);
   $8 = $101;
   HEAP8[$100>>0] = $99;
  }
  $102 = $8;
  HEAP8[$102>>0] = 0;
 }
 $103 = $7;
 $104 = ($103|0)!=(0|0);
 if (!($104)) {
  STACKTOP = sp;return;
 }
 $105 = $5;
 $12 = $105;
 while(1) {
  $106 = $12;
  $107 = $11;
  $108 = ($106>>>0)<($107>>>0);
  if (!($108)) {
   break;
  }
  $109 = $12;
  $110 = ((($109)) + 1|0);
  $12 = $110;
  $111 = HEAP8[$109>>0]|0;
  $112 = $7;
  $113 = ((($112)) + 1|0);
  $7 = $113;
  HEAP8[$112>>0] = $111;
 }
 $114 = $7;
 HEAP8[$114>>0] = 0;
 STACKTOP = sp;return;
}
function _CompileText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp + 40|0;
 $6 = sp + 16|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 _TProgram_Init($5);
 $8 = $3;
 $9 = (_GetASTFromString($8,$5)|0);
 if (!($9)) {
  $17 = $4;
  STACKTOP = sp;return ($17|0);
 }
 ;HEAP32[$6>>2]=HEAP32[912>>2]|0;HEAP32[$6+4>>2]=HEAP32[912+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[912+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[912+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[912+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[912+20>>2]|0;
 $10 = $2;
 $11 = ((($6)) + 12|0);
 HEAP32[$11>>2] = $10;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 (_StrBuilder_Reserve($7,500)|0);
 $12 = ((($6)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(1);
 if ($14) {
  $15 = $3;
  _PrintPreprocessedToString2($7,$15,0);
 } else {
  _TProgram_PrintCodeToString($5,$6,$7);
 }
 $16 = HEAP32[$7>>2]|0;
 $4 = $16;
 $17 = $4;
 STACKTOP = sp;return ($17|0);
}
function _GetASTFromString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 (_Parser_InitString($5,3220,$6)|0);
 $7 = $3;
 _Parser_Main($5,$7);
 $8 = ((($5)) + 16|0);
 $9 = ((($8)) + 28|0);
 $10 = $3;
 $11 = ((($10)) + 12|0);
 _TFileMapToStrArray($9,$11);
 $12 = (_GetCompletationMessage($5)|0);
 HEAP32[$vararg_buffer>>2] = $12;
 (_printf(2763,$vararg_buffer)|0);
 $13 = ((($5)) + 124|0);
 $14 = $3;
 $15 = ((($14)) + 24|0);
 _SymbolMap_Swap($13,$15);
 $16 = (_Parser_HasError($5)|0);
 if ($16) {
  $17 = ((($5)) + 16|0);
  _Scanner_PrintDebug($17);
 }
 $18 = ((($5)) + 16|0);
 $19 = ((($18)) + 4|0);
 $20 = $3;
 $21 = ((($20)) + 40|0);
 _MacroMap_Swap($19,$21);
 $22 = (_Parser_HasError($5)|0);
 $23 = $22 ^ 1;
 $24 = $23&1;
 $4 = $24;
 _Parser_Destroy($5);
 $25 = $4;
 $26 = $25&1;
 STACKTOP = sp;return ($26|0);
}
function _PrintPreprocessedToString2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 4|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 (_Scanner_InitString($6,3570,$8)|0);
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  HEAP32[$7>>2] = 0;
  $11 = $5;
  _GetFullPath($11,$7);
  $12 = HEAP32[$7>>2]|0;
  _Scanner_IncludeFile($6,$12,2,1);
  _Scanner_Match($6);
  _String_Destroy($7);
 }
 $13 = $3;
 _PrintPreprocessedToStringCore2($13,$6);
 _Scanner_Destroy($6);
 STACKTOP = sp;return;
}
function _GetFullDir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1312|0);
 $4 = sp + 1040|0;
 $5 = sp + 785|0;
 $6 = sp + 530|0;
 $7 = sp + 275|0;
 $8 = sp + 20|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 (_realpath($10,$4)|0);
 _SplitPath($4,$5,$6,$7,$8);
 _StrBuilder_Init($9);
 (_StrBuilder_Append($9,$5)|0);
 (_StrBuilder_Append($9,$6)|0);
 $11 = $3;
 $12 = (_StrBuilder_Release($9)|0);
 _String_Attach($11,$12);
 _StrBuilder_Destroy($9);
 STACKTOP = sp;return;
}
function _GetFullPath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1312|0);
 $4 = sp + 1040|0;
 $5 = sp + 785|0;
 $6 = sp + 530|0;
 $7 = sp + 275|0;
 $8 = sp + 20|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 (_realpath($10,$4)|0);
 _SplitPath($4,$5,$6,$7,$8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 (_StrBuilder_Append($9,$5)|0);
 (_StrBuilder_Append($9,$6)|0);
 (_StrBuilder_Append($9,$7)|0);
 (_StrBuilder_Append($9,$8)|0);
 $11 = $3;
 $12 = (_StrBuilder_Release($9)|0);
 _String_Attach($11,$12);
 _StrBuilder_Destroy($9);
 STACKTOP = sp;return;
}
function _Macro_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(36)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = $0;
 _String_Init($4);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 HEAP8[$6>>0] = 0;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 _TokenArray_Init($8);
 $9 = $0;
 $10 = ((($9)) + 20|0);
 _TokenArray_Init($10);
 $11 = $0;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _TokenArray_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _Macro_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _String_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 _TokenArray_Destroy($4);
 $5 = $1;
 $6 = ((($5)) + 20|0);
 _TokenArray_Destroy($6);
 STACKTOP = sp;return;
}
function _TokenArray_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _PPToken_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _Macro_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _Macro_Destroy($4);
  $5 = $1;
  _free($5);
 }
 STACKTOP = sp;return;
}
function _HidenSetAdd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 _TokenArray_Clear($9);
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = $4;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = HEAP32[$15>>2]|0;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $7 = $19;
  $8 = 0;
  while(1) {
   $20 = $8;
   $21 = $3;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($20|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $7;
   $26 = ((($25)) + 8|0);
   $27 = $3;
   $28 = HEAP32[$27>>2]|0;
   $29 = $8;
   $30 = (($28) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_PPToken_Clone($31)|0);
   _TokenSet_PushBack($26,$32);
   $33 = $8;
   $34 = (($33) + 1)|0;
   $8 = $34;
  }
  $35 = $5;
  $36 = $7;
  $37 = (_PPToken_Clone($36)|0);
  _TokenArray_PushBack($35,$37);
  $38 = $6;
  $39 = (($38) + 1)|0;
  $6 = $39;
 }
 $40 = $5;
 _TokenArray_Print($40);
 STACKTOP = sp;return;
}
function _TokenArray_Clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Array_Clear($2,7);
 STACKTOP = sp;return;
}
function _TokenSet_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_TokenSet_Find($6,$9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $4 = 0;
  $20 = $3;
  _PPToken_Delete($20);
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $3;
 $15 = (_Array_Push($13,$14)|0);
 $16 = $15&1;
 $4 = $16;
 $17 = $4;
 $18 = ($17|0)==(-1);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $3;
 _PPToken_Delete($19);
 STACKTOP = sp;return;
}
function _PPToken_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_PPToken_Create($5,$7)|0);
 $2 = $8;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = $1;
 $12 = ((($11)) + 8|0);
 _TokenSetAppendCopy($10,$12);
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _TokenArray_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _TokenArray_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _TokenArray_Print($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _FindNoSpaceIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = -1;
 $6 = $3;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_PPToken_IsSpace($16)|0);
  $18 = $5;
  if (!($17)) {
   break;
  }
  $19 = (($18) + 1)|0;
  $5 = $19;
 }
 if ((label|0) == 6) {
  $20 = $4;
  STACKTOP = sp;return ($20|0);
 }
 $4 = $18;
 $20 = $4;
 STACKTOP = sp;return ($20|0);
}
function _PPToken_IsSpace($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(5);
 if ($5) {
  $$expand_i1_val = 1;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $6 = $$pre_trunc&1;
 STACKTOP = sp;return ($6|0);
}
function _AppendEscaped($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $3;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  switch ($9|0) {
  case 34: case 92:  {
   $10 = $2;
   (_StrBuilder_AppendChar($10,92)|0);
   break;
  }
  default: {
  }
  }
  $11 = $2;
  $12 = $3;
  $13 = HEAP8[$12>>0]|0;
  (_StrBuilder_AppendChar($11,$13)|0);
  $14 = $3;
  $15 = ((($14)) + 1|0);
  $3 = $15;
 }
 STACKTOP = sp;return;
}
function _AppendStringize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 (_StrBuilder_Append($7,1474)|0);
 $4 = 1;
 $5 = 0;
 while(1) {
  $8 = $5;
  $9 = $3;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = $5;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $6 = $17;
  $18 = $6;
  $19 = (_PPToken_IsSpace($18)|0);
  do {
   if ($19) {
    $20 = $4;
    $21 = $20&1;
    if (!($21)) {
     $4 = 1;
     $22 = $2;
     (_StrBuilder_Append($22,1441)|0);
    }
   } else {
    $23 = $6;
    $24 = (_PPToken_IsStringLit($23)|0);
    if ($24) {
     $4 = 0;
     $25 = $2;
     (_StrBuilder_Append($25,1476)|0);
     $26 = $2;
     $27 = $6;
     $28 = ((($27)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     _AppendEscaped($26,$29);
     $30 = $2;
     (_StrBuilder_Append($30,1476)|0);
     break;
    }
    $31 = $6;
    $32 = (_PPToken_IsCharLit($31)|0);
    $4 = 0;
    $33 = $2;
    if ($32) {
     (_StrBuilder_AppendChar($33,39)|0);
     $34 = $2;
     $35 = $6;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     _AppendEscaped($34,$37);
     $38 = $2;
     (_StrBuilder_AppendChar($38,39)|0);
     break;
    } else {
     $39 = $6;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     (_StrBuilder_Append($33,$41)|0);
     break;
    }
   }
  } while(0);
  $42 = $5;
  $43 = (($42) + 1)|0;
  $5 = $43;
 }
 $44 = $2;
 (_StrBuilder_Append($44,1474)|0);
 $45 = $2;
 _StrBuilder_Trim($45);
 STACKTOP = sp;return;
}
function _PPToken_IsStringLit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 STACKTOP = sp;return ($4|0);
}
function _PPToken_IsCharLit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 STACKTOP = sp;return ($4|0);
}
function _StrBuilder_Trim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 8|0;
 $1 = $0;
 _StrBuilder_Init($2);
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 (_StrBuilder_Reserve($2,$10)|0);
 $3 = 0;
 $4 = 0;
 while(1) {
  $11 = $4;
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = (($17) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $5 = $20;
  $21 = $3;
  $22 = $21&1;
  if (!($22)) {
   $23 = $5;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(32);
   if ($25) {
    $3 = 1;
   }
  }
  $26 = $3;
  $27 = $26&1;
  if ($27) {
   $28 = $5;
   (_StrBuilder_AppendChar($2,$28)|0);
  }
  $29 = $4;
  $30 = (($29) + 1)|0;
  $4 = $30;
 }
 $31 = ((($2)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) - 1)|0;
 $6 = $33;
 while(1) {
  $34 = $6;
  $35 = ($34|0)>=(0);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$2>>2]|0;
  $37 = $6;
  $38 = (($36) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $7 = $39;
  $40 = $7;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)!=(32);
  if ($42) {
   break;
  }
  $43 = $6;
  $44 = (($43) + -1)|0;
  $6 = $44;
 }
 $45 = HEAP32[$2>>2]|0;
 $46 = $6;
 $47 = (($46) + 1)|0;
 $48 = (($45) + ($47)|0);
 HEAP8[$48>>0] = 0;
 $49 = $6;
 $50 = (($49) + 1)|0;
 $51 = ((($2)) + 4|0);
 HEAP32[$51>>2] = $50;
 $52 = $1;
 _StrBuilder_Swap($2,$52);
 _StrBuilder_Destroy($2);
 STACKTOP = sp;return;
}
function _SubstituteArgs($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $18 = sp + 124|0;
 $19 = sp + 112|0;
 $22 = sp + 100|0;
 $23 = sp + 88|0;
 $25 = sp + 80|0;
 $26 = sp + 68|0;
 $27 = sp + 56|0;
 $28 = sp + 44|0;
 $30 = sp + 36|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $36 = $5&1;
 $14 = $36;
 $37 = $6&1;
 $15 = $37;
 $16 = $7;
 $17 = $8;
 $38 = $17;
 _TokenArray_Clear($38);
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
 $39 = $11;
 _TokenArray_AppendCopy($18,$39);
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $20 = 0;
 L1: while(1) {
  $40 = ((($18)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)>(0);
  if (!($42)) {
   break;
  }
  _TokenArray_Print($18);
  _TokenArray_Print($19);
  $43 = (_TokenArray_PopFront($18)|0);
  $20 = $43;
  $44 = $20;
  $45 = (_PPToken_IsStringizingOp($44)|0);
  do {
   if ($45) {
    $46 = (_FindNoSpaceIndex($18,0)|0);
    $21 = $46;
    $47 = $21;
    $48 = ($47|0)!=(-1);
    $49 = $12;
    $50 = ($49|0)!=(0|0);
    $or$cond = $48 & $50;
    if ($or$cond) {
     $51 = $12;
     $52 = HEAP32[$18>>2]|0;
     $53 = $21;
     $54 = (($52) + ($53<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (_TokenArrayMap_Lookup($51,$57,$22)|0);
     if ($58) {
      ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $59 = HEAP32[$22>>2]|0;
      _AppendStringize($23,$59);
      $60 = $21;
      $61 = (($60) + 1)|0;
      _TokenArray_Erase($18,0,$61);
      $62 = HEAP32[$23>>2]|0;
      $63 = (_PPToken_Create($62,6)|0);
      _TokenArray_PushBack($19,$63);
      _StrBuilder_Destroy($23);
      $64 = $20;
      _PPToken_Delete($64);
      $20 = 0;
      continue L1;
     }
    }
   } else {
    $65 = $20;
    $66 = (_PPToken_IsConcatOp($65)|0);
    $67 = (_FindNoSpaceIndex($18,0)|0);
    if ($66) {
     $24 = $67;
     $68 = $24;
     $69 = ($68|0)!=(-1);
     if (!($69)) {
      break;
     }
     $70 = $12;
     $71 = HEAP32[$18>>2]|0;
     $72 = $24;
     $73 = (($71) + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($74)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (_TokenArrayMap_Lookup($70,$76,$25)|0);
     if ($77) {
      $78 = $24;
      $79 = (($78) + 1)|0;
      _TokenArray_Erase($18,0,$79);
      $80 = HEAP32[$25>>2]|0;
      $81 = ((($80)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)>(0);
      if ($83) {
       ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
       $84 = HEAP32[$25>>2]|0;
       _Glue($19,$84,$26);
       _TokenArray_Swap($26,$19);
       _TokenArray_Destroy($26);
      }
     } else {
      ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $85 = HEAP32[$18>>2]|0;
      $86 = $24;
      $87 = (($85) + ($86<<2)|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (_PPToken_Clone($88)|0);
      _TokenArray_PushBack($27,$89);
      $90 = $24;
      $91 = (($90) + 1)|0;
      _TokenArray_Erase($18,0,$91);
      ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      _Glue($19,$27,$28);
      _TokenArray_Swap($28,$19);
      _TokenArray_Destroy($28);
      _TokenArray_Destroy($27);
     }
     $92 = $20;
     _PPToken_Delete($92);
     $20 = 0;
     continue L1;
    }
    $29 = $67;
    $93 = $29;
    $94 = ($93|0)!=(-1);
    if ($94) {
     $95 = HEAP32[$18>>2]|0;
     $96 = $29;
     $97 = (($95) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (_PPToken_IsConcatOp($98)|0);
     if ($99) {
      $100 = $12;
      $101 = $20;
      $102 = ((($101)) + 4|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (_TokenArrayMap_Lookup($100,$103,$30)|0);
      do {
       if ($104) {
        $106 = HEAP32[$30>>2]|0;
        $107 = ((($106)) + 4|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = ($108|0)==(0);
        if (!($109)) {
         _TokenArray_Print($18);
         $126 = $29;
         _TokenArray_Erase($18,0,$126);
         _TokenArray_Print($18);
         $127 = HEAP32[$30>>2]|0;
         _TokenArray_AppendCopy($19,$127);
         break;
        }
        $110 = $29;
        $111 = (($110) + 1)|0;
        _TokenArray_Erase($18,0,$111);
        $112 = (_FindNoSpaceIndex($18,0)|0);
        $31 = $112;
        $113 = $31;
        $114 = ($113|0)!=(-1);
        if ($114) {
         $115 = $12;
         $116 = HEAP32[$18>>2]|0;
         $117 = $31;
         $118 = (($116) + ($117<<2)|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = ((($119)) + 4|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = (_TokenArrayMap_Lookup($115,$121,$32)|0);
         if (!($122)) {
          $123 = $29;
          $124 = (($123) + 1)|0;
          _TokenArray_Erase($18,0,$124);
          $125 = HEAP32[$30>>2]|0;
          _TokenArray_AppendCopy($19,$125);
         }
        }
       } else {
        $105 = $20;
        _TokenArray_PushBack($19,$105);
        $20 = 0;
       }
      } while(0);
      $128 = $20;
      _PPToken_Delete($128);
      $20 = 0;
      continue L1;
     }
    }
    HEAP32[$33>>2] = 0;
    $129 = $12;
    $130 = ($129|0)!=(0|0);
    if ($130) {
     $131 = $12;
     $132 = $20;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (_TokenArrayMap_Lookup($131,$134,$33)|0);
     if ($135) {
      ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
      $136 = HEAP32[$33>>2]|0;
      $137 = $10;
      $138 = $14;
      $139 = $138&1;
      $140 = $15;
      $141 = $140&1;
      $142 = $16;
      _ExpandMacro($136,$137,0,$139,$141,$142,$34);
      _TokenArray_AppendMove($19,$34);
      _TokenArray_Destroy($34);
      $143 = $20;
      _PPToken_Delete($143);
      $20 = 0;
      continue L1;
     }
    }
   }
  } while(0);
  $144 = $20;
  _TokenArray_PushBack($19,$144);
  $20 = 0;
 }
 ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;
 $145 = $13;
 _HidenSetAdd($145,$19,$35);
 $146 = $17;
 _TokenArray_Swap($146,$35);
 _TokenArray_Destroy($19);
 _TokenArray_Destroy($35);
 _TokenArray_Destroy($18);
 STACKTOP = sp;return;
}
function _TokenArray_AppendCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_PPToken_Clone($15)|0);
  _TokenArray_PushBack($10,$16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _TokenArray_PopFront($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_Array_PopFront($3)|0);
 $2 = $4;
 $5 = $2;
 STACKTOP = sp;return ($5|0);
}
function _PPToken_IsStringizingOp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(35);
 if (!($7)) {
  $15 = 0;
  STACKTOP = sp;return ($15|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(0);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function _TokenArrayMap_Lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$expand_i1_val = 0;
  HEAP8[$3>>0] = $$expand_i1_val;
 } else {
  $9 = $4;
  $10 = $5;
  $11 = $6;
  $12 = (_Map2_Lookup($9,$10,$11)|0);
  $$expand_i1_val2 = $12&1;
  HEAP8[$3>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$3>>0]|0;
 $13 = $$pre_trunc&1;
 STACKTOP = sp;return ($13|0);
}
function _TokenArray_Erase($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $6 = $7;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $3;
  if (!($10)) {
   break;
  }
  $12 = HEAP32[$11>>2]|0;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _PPToken_Delete($15);
  $16 = $6;
  $17 = (($16) + 1)|0;
  $6 = $17;
 }
 $18 = ((($11)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(1);
 if ($20) {
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = (($22) + ($23<<2)|0);
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $5;
  $28 = (($26) + ($27<<2)|0);
  $29 = $3;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = (($31) - ($32))|0;
  $34 = $33<<2;
  _memmove(($24|0),($28|0),($34|0))|0;
 }
 $35 = $3;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = (($37) - ($38))|0;
 $40 = $3;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 STACKTOP = sp;return;
}
function _PPToken_Create($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_malloc(20)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $15 = $4;
  STACKTOP = sp;return ($15|0);
 }
 ;HEAP32[$5>>2]=HEAP32[864>>2]|0;HEAP32[$5+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[864+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[864+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[864+16>>2]|0;
 $9 = $4;
 ;HEAP32[$9>>2]=HEAP32[$5>>2]|0;HEAP32[$9+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$5+16>>2]|0;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = $2;
 _String_Set($11,$12);
 $13 = $3;
 $14 = $4;
 HEAP32[$14>>2] = $13;
 $15 = $4;
 STACKTOP = sp;return ($15|0);
}
function _PPToken_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _PPToken_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _PPToken_IsConcatOp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(35);
 if (!($7)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(35);
 if (!($14)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $15 = $1;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(0);
 $22 = $21;
 STACKTOP = sp;return ($22|0);
}
function _Glue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 28|0;
 $7 = sp + 16|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $10 = $3;
 _TokenArray_AppendCopy($6,$10);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $11 = $4;
 _TokenArray_AppendCopy($7,$11);
 $12 = $5;
 _TokenArray_Clear($12);
 $13 = ((($6)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $5;
  _TokenArray_Swap($16,$7);
  $63 = $5;
  _TokenArray_Print($63);
  _TokenArray_Destroy($6);
  _TokenArray_Destroy($7);
  STACKTOP = sp;return;
 }
 while(1) {
  $17 = ((($6)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)>(0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$6>>2]|0;
  $21 = ((($6)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - 1)|0;
  $24 = (($20) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_PPToken_IsSpace($25)|0);
  if (!($26)) {
   break;
  }
  _TokenArray_Pop($6);
 }
 while(1) {
  $27 = ((($7)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)>(0);
  if (!($29)) {
   break;
  }
  $30 = HEAP32[$7>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_PPToken_IsSpace($31)|0);
  if (!($32)) {
   break;
  }
  $33 = (_TokenArray_PopFront($7)|0);
  $8 = $33;
  $34 = $8;
  _PPToken_Delete($34);
  $8 = 0;
 }
 $35 = ((($6)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = ((($7)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = $5;
   _TokenArray_Swap($41,$6);
   $63 = $5;
   _TokenArray_Print($63);
   _TokenArray_Destroy($6);
   _TokenArray_Destroy($7);
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $42 = ((($6)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)>(0);
 if ($44) {
  $45 = HEAP32[$6>>2]|0;
  $46 = ((($6)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) - 1)|0;
  $49 = (($45) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  (_StrBuilder_Append($9,$52)|0);
  _TokenArray_Pop($6);
 }
 $53 = ((($7)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)>(0);
 if ($55) {
  $56 = HEAP32[$7>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  (_StrBuilder_Append($9,$59)|0);
  _TokenArray_Pop($7);
 }
 $60 = HEAP32[$9>>2]|0;
 $61 = (_PPToken_Create($60,6)|0);
 _TokenArray_PushBack($6,$61);
 _StrBuilder_Destroy($9);
 _TokenArray_AppendMove($6,$7);
 $62 = $5;
 _TokenArray_Swap($62,$6);
 $63 = $5;
 _TokenArray_Print($63);
 _TokenArray_Destroy($6);
 _TokenArray_Destroy($7);
 STACKTOP = sp;return;
}
function _TokenArray_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _ExpandMacro($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $14 = sp + 128|0;
 $15 = sp + 116|0;
 $17 = sp + 100|0;
 $20 = sp + 80|0;
 $21 = sp + 68|0;
 $22 = sp + 56|0;
 $23 = sp + 44|0;
 $24 = sp + 24|0;
 $25 = sp + 12|0;
 $26 = sp;
 $7 = $0;
 $8 = $1;
 $27 = $2&1;
 $9 = $27;
 $28 = $3&1;
 $10 = $28;
 $29 = $4&1;
 $11 = $29;
 $12 = $5;
 $13 = $6;
 $30 = $13;
 _TokenArray_Clear($30);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $31 = $7;
 _TokenArray_AppendCopy($15,$31);
 _TokenArray_Print($15);
 $16 = 0;
 L1: while(1) {
  $32 = ((($15)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)>(0);
  if (!($34)) {
   break;
  }
  _TokenArray_Print($14);
  $35 = (_TokenArray_PopFront($15)|0);
  $16 = $35;
  $36 = $16;
  $37 = (_PPToken_IsIdentifier($36)|0);
  if (!($37)) {
   $38 = $16;
   _TokenArray_PushBack($14,$38);
   $16 = 0;
   continue;
  }
  $39 = $10;
  $40 = $39&1;
  if ($40) {
   $41 = $16;
   $42 = (_PPToken_IsIdentifier($41)|0);
   if ($42) {
    $43 = $16;
    $44 = (_PPToken_IsLexeme($43,2755)|0);
    if ($44) {
     ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     $45 = $8;
     _GatherDefinedOperator($15,$45,$17);
     _TokenArray_AppendMove($14,$17);
     $46 = $16;
     _PPToken_Delete($46);
     $16 = 0;
     _TokenArray_Destroy($17);
     continue;
    }
   }
  }
  $47 = $8;
  $48 = $16;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_MacroMap_Find($47,$50)|0);
  $18 = $51;
  $52 = $18;
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = $11;
   $55 = $54&1;
   if ($55) {
    $56 = $16;
    $57 = ((($56)) + 4|0);
    _String_Set($57,2741);
    $58 = $16;
    HEAP32[$58>>2] = 1;
   }
   $59 = $16;
   _TokenArray_PushBack($14,$59);
   $16 = 0;
   continue;
  }
  $60 = $16;
  $61 = ((($60)) + 8|0);
  $62 = $18;
  $63 = HEAP32[$62>>2]|0;
  $64 = (_TokenSet_Find($61,$63)|0);
  $19 = $64;
  $65 = $19;
  $66 = ($65|0)!=(0|0);
  if ($66) {
   $67 = $16;
   _TokenArray_PushBack($14,$67);
   $16 = 0;
   continue;
  }
  ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
  _TokenArray_Print($15);
  $68 = $18;
  $69 = ((($68)) + 4|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&1;
  do {
   if ($71) {
    $91 = $9;
    $92 = $91&1;
    $93 = (_FillIn($15,$92,$20)|0);
    if ($93) {
     $94 = HEAP32[$15>>2]|0;
     $95 = HEAP32[$94>>2]|0;
     $96 = (_PPToken_IsOpenPar($95)|0);
     if ($96) {
      ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $97 = (_TokenArray_PopFront($15)|0);
      _PPToken_Delete($97);
      ;HEAP32[$24>>2]=HEAP32[864>>2]|0;HEAP32[$24+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[864+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[864+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[864+16>>2]|0;
      $98 = $16;
      $99 = ((($98)) + 4|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $18;
      $102 = ((($101)) + 20|0);
      $103 = $9;
      $104 = $103&1;
      $105 = (_GatherArgs($100,$15,$102,$23,$104,0,$24)|0);
      if ($105) {
       ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
       $107 = $16;
       $108 = ((($107)) + 8|0);
       $109 = ((($24)) + 8|0);
       _SetIntersection($108,$109,$25);
       $110 = $18;
       $111 = HEAP32[$110>>2]|0;
       $112 = (_PPToken_Create($111,0)|0);
       _TokenSet_PushBack($25,$112);
       $113 = $16;
       _PPToken_Delete($113);
       $16 = 0;
       ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
       $114 = $18;
       $115 = $8;
       $116 = $18;
       $117 = ((($116)) + 8|0);
       $118 = $10;
       $119 = $118&1;
       $120 = $11;
       $121 = $120&1;
       $122 = $12;
       _SubstituteArgs($114,$115,$117,$23,$25,$119,$121,$122,$26);
       _TokenArray_AppendMove($26,$15);
       _TokenArray_Swap($26,$15);
       $123 = $18;
       $12 = $123;
       _TokenSet_Destroy($25);
       _TokenArray_Destroy($26);
       _TokenArrayMap_Destroy($23);
       _PPToken_Destroy($24);
       break;
      } else {
       _PPToken_Destroy($24);
       $106 = $16;
       _PPToken_Delete($106);
       $16 = 0;
       continue L1;
      }
     }
    }
    _TokenArray_Print($20);
    _TokenArray_AppendMove($20,$15);
    _TokenArray_Swap($20,$15);
    $124 = $16;
    _TokenArray_PushBack($14,$124);
    $16 = 0;
   } else {
    ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
    $72 = $16;
    $73 = ((($72)) + 8|0);
    _TokenSetAppendCopy($21,$73);
    $74 = $16;
    $75 = ((($74)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $16;
    $78 = HEAP32[$77>>2]|0;
    $79 = (_PPToken_Create($76,$78)|0);
    _TokenSet_PushBack($21,$79);
    $80 = $16;
    _PPToken_Delete($80);
    $16 = 0;
    ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
    $81 = $18;
    $82 = $8;
    $83 = $18;
    $84 = ((($83)) + 8|0);
    $85 = $10;
    $86 = $85&1;
    $87 = $11;
    $88 = $87&1;
    $89 = $12;
    _SubstituteArgs($81,$82,$84,0,$21,$86,$88,$89,$22);
    _TokenArray_AppendMove($22,$15);
    _TokenArray_Swap($22,$15);
    _TokenArray_Destroy($22);
    _TokenSet_Destroy($21);
    $90 = $18;
    $12 = $90;
   }
  } while(0);
  _TokenArray_Destroy($20);
 }
 $125 = $13;
 _TokenArray_Swap($14,$125);
 _TokenArray_Destroy($14);
 _TokenArray_Destroy($15);
 STACKTOP = sp;return;
}
function _TokenArray_AppendMove($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _TokenArray_PushBack($10,$15);
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = $4;
  $21 = (($20) + 1)|0;
  $4 = $21;
 }
 STACKTOP = sp;return;
}
function _ArgToken($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $9 = $1&1;
 $5 = $9;
 $10 = $2&1;
 $6 = $10;
 $7 = $3;
 $11 = $4;
 $12 = (_TokenArray_PopFront($11)|0);
 $8 = $12;
 $13 = $8;
 $14 = $7;
 _PPToken_Swap($13,$14);
 $15 = $8;
 _PPToken_Delete($15);
 $8 = 0;
 STACKTOP = sp;return;
}
function _PPToken_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$5+16>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$7+16>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$4+16>>2]|0;
 STACKTOP = sp;return;
}
function _GatherArgs($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 59|0;
 $15 = sp + 16|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $21 = $4&1;
 $12 = $21;
 $22 = $5&1;
 $13 = $22;
 $14 = $6;
 ;HEAP32[$15>>2]=HEAP32[864>>2]|0;HEAP32[$15+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[864+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[864+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[864+16>>2]|0;
 $16 = 0;
 L1: while(1) {
  $23 = $16;
  $24 = $10;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = (_TokenArray_Create()|0);
  $17 = $28;
  $29 = $11;
  $30 = $10;
  $31 = HEAP32[$30>>2]|0;
  $32 = $16;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $17;
  (_TokenArrayMap_SetAt($29,$36,$37)|0);
  $38 = $16;
  $39 = (($38) + 1)|0;
  $40 = $10;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)==($42|0);
  do {
   if ($43) {
    $18 = 41;
   } else {
    $44 = $13;
    $45 = $44&1;
    if ($45) {
     $46 = $16;
     $47 = (($46) + 2)|0;
     $48 = $10;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($47|0)==($50|0);
     if ($51) {
      $18 = 46;
      break;
     }
    }
    $18 = 44;
   }
  } while(0);
  $19 = 0;
  while(1) {
   $52 = $9;
   $53 = $12;
   $54 = $53&1;
   _ArgToken($52,$54,1,$15);
   $55 = $9;
   _TokenArray_Print($55);
   $56 = $19;
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = $18;
    $59 = $58 << 24 >> 24;
    $60 = ($59|0)==(46);
    if ($60) {
     $61 = (_PPToken_IsChar($15,44)|0);
     if ($61) {
      break;
     }
     $62 = (_PPToken_IsChar($15,41)|0);
     if ($62) {
      break;
     }
    }
    $63 = $18;
    $64 = $63 << 24 >> 24;
    $65 = ($64|0)!=(46);
    if ($65) {
     $66 = $18;
     $67 = (_PPToken_IsChar($15,$66)|0);
     if ($67) {
      break;
     }
    }
   }
   $68 = (_PPToken_IsChar($15,40)|0);
   do {
    if ($68) {
     $69 = $19;
     $70 = (($69) + 1)|0;
     $19 = $70;
    } else {
     $71 = (_PPToken_IsChar($15,41)|0);
     if ($71) {
      $72 = $19;
      $73 = (($72) + -1)|0;
      $19 = $73;
      break;
     } else {
      $74 = (_PPToken_IsChar($15,0)|0);
      if ($74) {
       label = 21;
       break L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $75 = $17;
   $76 = (_PPToken_Clone($15)|0);
   _TokenArray_PushBack($75,$76);
  }
  $77 = $17;
  _TokenArray_Print($77);
  $78 = $18;
  $79 = $78 << 24 >> 24;
  $80 = ($79|0)==(46);
  if ($80) {
   $81 = (_PPToken_IsChar($15,41)|0);
   if ($81) {
    label = 25;
    break;
   }
  }
  $94 = $14;
  $95 = ((($94)) + 4|0);
  $96 = ((($15)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  _String_Set($95,$97);
  $98 = $16;
  $99 = (($98) + 1)|0;
  $16 = $99;
 }
 if ((label|0) == 21) {
  $$expand_i1_val = 0;
  HEAP8[$7>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$7>>0]|0;
  $108 = $$pre_trunc&1;
  STACKTOP = sp;return ($108|0);
 }
 else if ((label|0) == 25) {
  $82 = $16;
  $83 = (($82) + 1)|0;
  $16 = $83;
  $84 = (_TokenArray_Create()|0);
  $20 = $84;
  $85 = $11;
  $86 = $10;
  $87 = HEAP32[$86>>2]|0;
  $88 = $16;
  $89 = (($87) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $20;
  (_TokenArrayMap_SetAt($85,$92,$93)|0);
 }
 $100 = $10;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0);
 if ($103) {
  $104 = $9;
  $105 = $12;
  $106 = $105&1;
  _ArgToken($104,$106,0,$15);
  $107 = (_PPToken_IsChar($15,41)|0);
  if ($107) {
   $$expand_i1_val2 = 0;
   HEAP8[$7>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$7>>0]|0;
   $108 = $$pre_trunc&1;
   STACKTOP = sp;return ($108|0);
  }
 }
 _PPToken_Destroy($15);
 $$expand_i1_val4 = 1;
 HEAP8[$7>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$7>>0]|0;
 $108 = $$pre_trunc&1;
 STACKTOP = sp;return ($108|0);
}
function _TokenArray_Create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(12)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  _TokenArray_Init($4);
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TokenArrayMap_SetAt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (_Map2_SetAt($8,$9,$10,$6)|0);
 $7 = $11;
 $12 = HEAP32[$6>>2]|0;
 _TokenArray_Delete($12);
 $13 = $7;
 STACKTOP = sp;return ($13|0);
}
function _PPToken_IsChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = $3;
 $10 = $9 << 24 >> 24;
 $11 = ($8|0)==($10|0);
 if (!($11)) {
  $19 = 0;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(0);
 $19 = $18;
 STACKTOP = sp;return ($19|0);
}
function _PPToken_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _String_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _TokenSet_Destroy($5);
 STACKTOP = sp;return;
}
function _GatherDefinedOperator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_PPToken_IsSpace($15)|0);
  $17 = $3;
  if (!($16)) {
   break;
  }
  $18 = (_TokenArray_PopFront($17)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  _TokenArray_PushBack($19,$20);
 }
 $21 = HEAP32[$17>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_PPToken_IsIdentifier($22)|0);
 if ($23) {
  $24 = $4;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_MacroMap_Find($24,$29)|0);
  $31 = ($30|0)!=(0|0);
  $32 = $3;
  $33 = (_TokenArray_PopFront($32)|0);
  if ($31) {
   $7 = $33;
   $34 = $7;
   $35 = ((($34)) + 4|0);
   _String_Set($35,2753);
   $36 = $5;
   $37 = $7;
   _TokenArray_PushBack($36,$37);
   STACKTOP = sp;return;
  } else {
   $8 = $33;
   $38 = $8;
   $39 = ((($38)) + 4|0);
   _String_Set($39,2741);
   $40 = $5;
   $41 = $8;
   _TokenArray_PushBack($40,$41);
   STACKTOP = sp;return;
  }
 }
 $42 = $3;
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = (_PPToken_IsChar($44,40)|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $3;
 $47 = (_TokenArray_PopFront($46)|0);
 _PPToken_Delete($47);
 while(1) {
  $48 = $3;
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = (_PPToken_IsSpace($50)|0);
  $52 = $3;
  if (!($51)) {
   break;
  }
  $53 = (_TokenArray_PopFront($52)|0);
  $9 = $53;
  $54 = $5;
  $55 = $9;
  _TokenArray_PushBack($54,$55);
 }
 $56 = HEAP32[$52>>2]|0;
 $57 = HEAP32[$56>>2]|0;
 (_PPToken_IsIdentifier($57)|0);
 $58 = $4;
 $59 = $3;
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (_MacroMap_Find($58,$63)|0);
 $65 = ($64|0)!=(0|0);
 $66 = $3;
 $67 = (_TokenArray_PopFront($66)|0);
 if ($65) {
  $10 = $67;
  $68 = $10;
  $69 = ((($68)) + 4|0);
  _String_Set($69,2753);
  $70 = $5;
  $71 = $10;
  _TokenArray_PushBack($70,$71);
 } else {
  $11 = $67;
  $72 = $11;
  $73 = ((($72)) + 4|0);
  _String_Set($73,2741);
  $74 = $5;
  $75 = $11;
  _TokenArray_PushBack($74,$75);
 }
 while(1) {
  $76 = $3;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = (_PPToken_IsSpace($78)|0);
  $80 = $3;
  if (!($79)) {
   break;
  }
  $81 = (_TokenArray_PopFront($80)|0);
  $12 = $81;
  $82 = $5;
  $83 = $12;
  _TokenArray_PushBack($82,$83);
 }
 $84 = HEAP32[$80>>2]|0;
 $85 = HEAP32[$84>>2]|0;
 (_PPToken_IsChar($85,41)|0);
 $86 = $3;
 $87 = (_TokenArray_PopFront($86)|0);
 _PPToken_Delete($87);
 STACKTOP = sp;return;
}
function _PPToken_IsIdentifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function _MacroMap_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 $6 = $3;
 (_Map2_Lookup($5,$6,$4)|0);
 $7 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _PPToken_IsLexeme($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (_strcmp($6,$7)|0);
 $9 = ($8|0)==(0);
 STACKTOP = sp;return ($9|0);
}
function _TokenSet_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_strcmp($11,$18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   break;
  }
  $26 = $5;
  $27 = (($26) + 1)|0;
  $5 = $27;
 }
 if ((label|0) == 6) {
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = (($22) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $4 = $25;
 $28 = $4;
 STACKTOP = sp;return ($28|0);
}
function _TokenSetAppendCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_PPToken_Clone($15)|0);
  _TokenSet_PushBack($10,$16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _TokenSet_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _PPToken_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _FillIn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 9|0;
 $4 = $0;
 $7 = $1&1;
 $5 = $7;
 $6 = $2;
 while(1) {
  $8 = $4;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_PPToken_IsSpace($14)|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = $4;
  $18 = (_TokenArray_PopFront($17)|0);
  _TokenArray_PushBack($16,$18);
 }
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(0);
 if ($22) {
  $$expand_i1_val = 1;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$3>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _PPToken_IsOpenPar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(40);
 if (!($7)) {
  $15 = 0;
  STACKTOP = sp;return ($15|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(0);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function _SetIntersection($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $4;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $3;
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $6 = $20;
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $23 = $3;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($22) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $7 = $27;
   $28 = $4;
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $8 = $30;
   $31 = $4;
   $32 = HEAP32[$31>>2]|0;
   $33 = $4;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($32) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $9 = $37;
   while(1) {
    $38 = $6;
    $39 = $7;
    $40 = ($38|0)!=($39|0);
    if (!($40)) {
     label = 15;
     break;
    }
    $41 = $8;
    $42 = $9;
    $43 = ($41|0)!=($42|0);
    if (!($43)) {
     label = 15;
     break;
    }
    $44 = $6;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $8;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_strcmp($46,$49)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $52 = $6;
     $53 = ((($52)) + 20|0);
     $6 = $53;
     continue;
    }
    $54 = $8;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $6;
    $58 = ((($57)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (_strcmp($56,$59)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $5;
     $63 = $6;
     $64 = (_PPToken_Clone($63)|0);
     _TokenSet_PushBack($62,$64);
     $65 = $6;
     $66 = ((($65)) + 20|0);
     $6 = $66;
    }
    $67 = $8;
    $68 = ((($67)) + 20|0);
    $8 = $68;
   }
   if ((label|0) == 15) {
    STACKTOP = sp;return;
   }
  }
 }
 $69 = $3;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  $73 = $5;
  $74 = $3;
  _TokenSetAppendCopy($73,$74);
  STACKTOP = sp;return;
 }
 $75 = $4;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0);
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $79 = $5;
 $80 = $4;
 _TokenSetAppendCopy($79,$80);
 STACKTOP = sp;return;
}
function _TokenArrayMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Map2_Destroy($2,8);
 STACKTOP = sp;return;
}
function _TokenArray_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Array_Pop($2,7);
 STACKTOP = sp;return;
}
function _ExpandMacroToText($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $14 = sp + 4|0;
 $7 = $0;
 $8 = $1;
 $16 = $2&1;
 $9 = $16;
 $17 = $3&1;
 $10 = $17;
 $18 = $4&1;
 $11 = $18;
 $12 = $5;
 $13 = $6;
 $19 = $13;
 _StrBuilder_Clear($19);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $22&1;
 $24 = $10;
 $25 = $24&1;
 $26 = $11;
 $27 = $26&1;
 $28 = $12;
 _ExpandMacro($20,$21,$23,$25,$27,$28,$14);
 $15 = 0;
 while(1) {
  $29 = $15;
  $30 = ((($14)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$14>>2]|0;
  $34 = $15;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(5);
  $39 = $13;
  if ($38) {
   (_StrBuilder_Append($39,1441)|0);
  } else {
   $40 = HEAP32[$14>>2]|0;
   $41 = $15;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   (_StrBuilder_Append($39,$45)|0);
  }
  $46 = $15;
  $47 = (($46) + 1)|0;
  $15 = $47;
 }
 _TokenArray_Destroy($14);
 STACKTOP = sp;return;
}
function _MacroMap_SetAt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (_Map2_SetAt($8,$9,$10,$6)|0);
 $7 = $11;
 $12 = HEAP32[$6>>2]|0;
 _Macro_Delete($12);
 $13 = $7;
 STACKTOP = sp;return ($13|0);
}
function _Map2_Lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $3;
 $11 = $4;
 $12 = (_Map2_GetAssocAt($10,$11,$7,$8)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $19 = $6;
  $20 = $19&1;
  STACKTOP = sp;return ($20|0);
 }
 $15 = $9;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 HEAP32[$18>>2] = $17;
 $6 = 1;
 $19 = $6;
 $20 = $19&1;
 STACKTOP = sp;return ($20|0);
}
function _MacroMap_RemoveKey($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_Map2_RemoveKey($6,$7,$4)|0);
 $9 = $8&1;
 $5 = $9;
 $10 = $5;
 $11 = $10&1;
 if ($11) {
  $12 = HEAP32[$4>>2]|0;
  _Macro_Delete($12);
 }
 $13 = $5;
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _Map2_RemoveKey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 HEAP32[$10>>2] = 0;
 $6 = 0;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $50 = $6;
  $51 = $50&1;
  STACKTOP = sp;return ($51|0);
 }
 $14 = $4;
 $15 = (_String2_HashKey($14)|0);
 $7 = $15;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $18 = $7;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18>>>0) % ($21>>>0))&-1;
 $23 = (($17) + ($22<<2)|0);
 $8 = $23;
 $24 = $8;
 $25 = HEAP32[$24>>2]|0;
 $9 = $25;
 while(1) {
  $26 = $9;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   label = 8;
   break;
  }
  $28 = $9;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $7;
  $32 = ($30|0)==($31|0);
  if ($32) {
   $33 = $9;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $4;
   $37 = (_strcmp($35,$36)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    break;
   }
  }
  $47 = $9;
  $8 = $47;
  $48 = $9;
  $49 = HEAP32[$48>>2]|0;
  $9 = $49;
 }
 if ((label|0) == 8) {
  $50 = $6;
  $51 = $50&1;
  STACKTOP = sp;return ($51|0);
 }
 $39 = $9;
 $40 = HEAP32[$39>>2]|0;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $9;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 HEAP32[$45>>2] = $44;
 $46 = $9;
 _KeyValue_Delete($46);
 $6 = 1;
 $50 = $6;
 $51 = $50&1;
 STACKTOP = sp;return ($51|0);
}
function _Macro_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Macro_Delete($2);
 STACKTOP = sp;return;
}
function _MacroMap_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _BucketItem_InitMoveKey($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $5;
 $12 = $4;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = $11;
 $14 = $4;
 _String_InitWith($14,0);
 $15 = $4;
 $16 = $6;
 _String_Swap($15,$16);
 STACKTOP = sp;return 1;
}
function _String_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $4 = $6;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _BucketItem_CreateMoveKey($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $10 = (_malloc(12)|0);
 $9 = $10;
 $11 = $9;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $19 = $8;
  $20 = $19&1;
  STACKTOP = sp;return ($20|0);
 }
 $13 = $9;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 (_BucketItem_InitMoveKey($13,$14,$15,$16)|0);
 $17 = $9;
 $18 = $4;
 HEAP32[$18>>2] = $17;
 $8 = 1;
 $19 = $8;
 $20 = $19&1;
 STACKTOP = sp;return ($20|0);
}
function _BucketItem_Change($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return 1;
}
function _BucketItem_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 _String_Destroy($4);
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $3;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$7 & 15]($10);
 STACKTOP = sp;return;
}
function _BucketItem_Delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = $3;
 _BucketItem_Destroy($6,$7);
 $8 = $2;
 _free($8);
 STACKTOP = sp;return;
}
function _Bucket_Init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $5 = $2;
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $2;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ($10|0)>(0);
 if (!($11)) {
  $16 = $4;
  $17 = $16&1;
  STACKTOP = sp;return ($17|0);
 }
 $12 = $2;
 $13 = $3;
 $14 = (_Bucket_Reserve($12,$13)|0);
 $15 = $14&1;
 $4 = $15;
 $16 = $4;
 $17 = $16&1;
 STACKTOP = sp;return ($17|0);
}
function _Bucket_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 do {
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = $3;
   $14 = (($13) + 1)|0;
   $15 = $14<<2;
   $16 = (_realloc($12,$15)|0);
   $5 = $16;
   $17 = $5;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    $4 = 0;
    break;
   }
   $19 = $2;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = $5;
    HEAP32[$22>>2] = 0;
   }
   $23 = $5;
   $24 = $2;
   HEAP32[$24>>2] = $23;
   $25 = $3;
   $26 = $2;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = $25;
  }
 } while(0);
 $28 = $4;
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _Bucket_Create($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = (_malloc(12)|0);
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $17 = $2;
  $18 = $17&1;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $3;
 $8 = (_Bucket_Init($7,0)|0);
 $9 = $8&1;
 $2 = $9;
 $10 = $2;
 $11 = $10&1;
 $12 = $11&1;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = $3;
  $15 = $1;
  HEAP32[$15>>2] = $14;
  $3 = 0;
 }
 $16 = $3;
 _free($16);
 $17 = $2;
 $18 = $17&1;
 STACKTOP = sp;return ($18|0);
}
function _Bucket_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $2;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  if (!($9)) {
   break;
  }
  $12 = $4;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  _BucketItem_Delete($14,$15);
  $16 = $4;
  $17 = (($16) + 1)|0;
  $4 = $17;
 }
 _free($11);
 STACKTOP = sp;return;
}
function _Bucket_Delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = $3;
 _Bucket_Destroy($6,$7);
 $8 = $2;
 _free($8);
 STACKTOP = sp;return;
}
function _Bucket_Append($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = (_Grow($5,$9)|0);
 $11 = $10&1;
 $4 = $11;
 $12 = $4;
 $13 = $12&1;
 $14 = $13&1;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $27 = $4;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $3;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21<<2)|0);
 HEAP32[$22>>2] = $16;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 $27 = $4;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _Grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 if (!($10)) {
  $27 = $4;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16|0) / 2)&-1;
 $18 = (($13) + ($17))|0;
 $5 = $18;
 $19 = $5;
 $20 = $3;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $22 = $3;
  $5 = $22;
 }
 $23 = $2;
 $24 = $5;
 $25 = (_Bucket_Reserve($23,$24)|0);
 $26 = $25&1;
 $4 = $26;
 $27 = $4;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _FindNodeIndex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $9 = $7;
  $10 = $4;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   label = 7;
   break;
  }
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = $7;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $8 = $18;
  $19 = $8;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = ($21|0)==($22|0);
  if ($23) {
   $24 = $8;
   $25 = HEAP32[$24>>2]|0;
   $26 = $6;
   $27 = (_strcmp($25,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
    break;
   }
  }
  $30 = $7;
  $31 = (($30) + 1)|0;
  $7 = $31;
 }
 if ((label|0) == 5) {
  $29 = $7;
  $3 = $29;
  $32 = $3;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 7) {
  $3 = -1;
  $32 = $3;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _Buckets_Init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $3;
 $11 = $10<<2;
 $12 = (_malloc($11)|0);
 $13 = $2;
 HEAP32[$13>>2] = $12;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $26 = $4;
  $27 = $26&1;
  STACKTOP = sp;return ($27|0);
 }
 $5 = 0;
 while(1) {
  $17 = $5;
  $18 = $3;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $5;
  $25 = (($24) + 1)|0;
  $5 = $25;
 }
 $4 = 1;
 $26 = $4;
 $27 = $26&1;
 STACKTOP = sp;return ($27|0);
}
function _Buckets_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $2;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  if (!($9)) {
   break;
  }
  $12 = $4;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  _Bucket_Delete($14,$15);
  $16 = $4;
  $17 = (($16) + 1)|0;
  $4 = $17;
 }
 _free($11);
 STACKTOP = sp;return;
}
function _Map_Init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = $3;
 $9 = (_Buckets_Init($7,$8)|0);
 $10 = $9&1;
 $4 = $10;
 $11 = $4;
 $12 = $11&1;
 STACKTOP = sp;return ($12|0);
}
function _Map_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Buckets_Destroy($4,$5);
 STACKTOP = sp;return;
}
function _Map_FindNode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 $12 = $4;
 $13 = (_HashFunc($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14>>>0) % ($17>>>0))&-1;
 $6 = $18;
 $19 = $3;
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = (($20) + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $7 = $23;
 $24 = $7;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $2 = 0;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 $26 = $7;
 $27 = $5;
 $28 = $4;
 $29 = (_FindNodeIndex($26,$27,$28)|0);
 $8 = $29;
 $30 = $8;
 $31 = ($30|0)==(-1);
 if ($31) {
  $2 = 0;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 } else {
  $32 = $7;
  $33 = HEAP32[$32>>2]|0;
  $34 = $8;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $2 = $36;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _HashFunc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = (_strlen($6)|0);
 $2 = $7;
 $8 = $1;
 $3 = $8;
 $4 = 0;
 $5 = 0;
 while(1) {
  $9 = $5;
  $10 = $2;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = $5;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = $4;
  $18 = (($17) + ($16))|0;
  $4 = $18;
  $19 = $4;
  $20 = $19 << 10;
  $21 = $4;
  $22 = (($21) + ($20))|0;
  $4 = $22;
  $23 = $4;
  $24 = $23 >>> 6;
  $25 = $4;
  $26 = $25 ^ $24;
  $4 = $26;
  $27 = $5;
  $28 = (($27) + 1)|0;
  $5 = $28;
 }
 $29 = $4;
 $30 = $29 << 3;
 $31 = $4;
 $32 = (($31) + ($30))|0;
 $4 = $32;
 $33 = $4;
 $34 = $33 >>> 11;
 $35 = $4;
 $36 = $35 ^ $34;
 $4 = $36;
 $37 = $4;
 $38 = $37 << 15;
 $39 = $4;
 $40 = (($39) + ($38))|0;
 $4 = $40;
 $41 = $4;
 STACKTOP = sp;return ($41|0);
}
function _Map_SetMoveKey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 33|0;
 $11 = sp + 4|0;
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = $5;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_Map_FindNode($13,$15)|0);
 $8 = $16;
 $17 = $8;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $8;
  $20 = $6;
  $21 = (_BucketItem_Change($19,$20)|0);
  $$expand_i1_val = $21&1;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $80 = $$pre_trunc&1;
  STACKTOP = sp;return ($80|0);
 }
 $22 = $4;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $4;
  (_Buckets_Init($26,100)|0);
 }
 $27 = $5;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_HashFunc($28)|0);
 $9 = $29;
 $30 = $9;
 $31 = $4;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($30>>>0) % ($33>>>0))&-1;
 $10 = $34;
 $35 = $4;
 $36 = HEAP32[$35>>2]|0;
 $37 = $10;
 $38 = (($36) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$11>>2] = $39;
 $40 = HEAP32[$11>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $42 = (_Bucket_Create($11)|0);
  $43 = $42&1;
  $7 = $43;
  $44 = $7;
  $45 = $44&1;
  $46 = $45&1;
  $47 = ($46|0)==(1);
  if ($47) {
   $48 = HEAP32[$11>>2]|0;
   $49 = $4;
   $50 = HEAP32[$49>>2]|0;
   $51 = $10;
   $52 = (($50) + ($51<<2)|0);
   HEAP32[$52>>2] = $48;
  }
 } else {
  $7 = 1;
 }
 $53 = $7;
 $54 = $53&1;
 $55 = $54&1;
 $56 = ($55|0)==(1);
 if ($56) {
  $57 = $9;
  $58 = $5;
  $59 = $6;
  $60 = (_BucketItem_CreateMoveKey($12,$57,$58,$59)|0);
  $61 = $60&1;
  $7 = $61;
  $62 = $7;
  $63 = $62&1;
  $64 = $63&1;
  $65 = ($64|0)==(1);
  if ($65) {
   $66 = HEAP32[$11>>2]|0;
   $67 = HEAP32[$12>>2]|0;
   $68 = (_Bucket_Append($66,$67)|0);
   $69 = $68&1;
   $7 = $69;
  }
 }
 $70 = $7;
 $71 = $70&1;
 $72 = $71&1;
 $73 = ($72|0)==(1);
 if ($73) {
  $74 = $4;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
 }
 $78 = $7;
 $79 = $78&1;
 $$expand_i1_val2 = $79&1;
 HEAP8[$3>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $80 = $$pre_trunc&1;
 STACKTOP = sp;return ($80|0);
}
function _Map_Set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 21|0;
 $7 = sp + 4|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = $5;
 $12 = (_Map_Find($10,$11,$7)|0);
 $13 = $12&1;
 $8 = $13;
 $14 = $8;
 $15 = $14&1;
 $16 = $15&1;
 $17 = ($16|0)==(1);
 if ($17) {
  $$expand_i1_val = 0;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $25 = $$pre_trunc&1;
  STACKTOP = sp;return ($25|0);
 } else {
  $18 = $5;
  _String_InitWith($9,$18);
  $19 = $4;
  $20 = $6;
  $21 = (_Map_SetMoveKey($19,$9,$20)|0);
  $22 = $21&1;
  $8 = $22;
  _String_Destroy($9);
  $23 = $8;
  $24 = $23&1;
  $$expand_i1_val2 = $24&1;
  HEAP8[$3>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $25 = $$pre_trunc&1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _Map_Find($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (_Map_FindNode($8,$9)|0);
 $6 = $10;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 $13 = $12 ? 1 : 0;
 $14 = ($13|0)!=(0);
 $15 = $14&1;
 $7 = $15;
 $16 = $7;
 $17 = $16&1;
 $18 = $17&1;
 $19 = ($18|0)==(1);
 if (!($19)) {
  $24 = $7;
  $25 = $24&1;
  STACKTOP = sp;return ($25|0);
 }
 $20 = $6;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 HEAP32[$23>>2] = $22;
 $24 = $7;
 $25 = $24&1;
 STACKTOP = sp;return ($25|0);
}
function _Map_Find2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_Map_Find($6,$7,$4)|0);
 $9 = $8&1;
 $5 = $9;
 $10 = $5;
 $11 = $10&1;
 $12 = $11&1;
 $13 = ($12|0)==(1);
 $14 = HEAP32[$4>>2]|0;
 $15 = $13 ? $14 : 0;
 STACKTOP = sp;return ($15|0);
}
function _KeyValue_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _String_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _String2_HashKey($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = -2128831035;
 $3 = 0;
 $6 = $1;
 $7 = (_strlen($6)|0);
 $4 = $7;
 $8 = $4;
 $9 = (($8>>>0) / 10)&-1;
 $10 = (1 + ($9))|0;
 $5 = $10;
 while(1) {
  $11 = $3;
  $12 = $4;
  $13 = ($11>>>0)<($12>>>0);
  $14 = $2;
  if (!($13)) {
   break;
  }
  $15 = Math_imul(16777619, $14)|0;
  $16 = $1;
  $17 = $3;
  $18 = (($16) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = $15 ^ $20;
  $2 = $21;
  $22 = $5;
  $23 = $3;
  $24 = (($23) + ($22))|0;
  $3 = $24;
 }
 STACKTOP = sp;return ($14|0);
}
function _Map2_RemoveAll($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10>>>0)<($13>>>0);
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  if (!($14)) {
   break;
  }
  $17 = $4;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $5 = $19;
  while(1) {
   $20 = $5;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    break;
   }
   $22 = $5;
   $6 = $22;
   $23 = $3;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = $3;
    $26 = $6;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vi[$25 & 15]($28);
   }
   $29 = $5;
   $30 = HEAP32[$29>>2]|0;
   $5 = $30;
   $31 = $6;
   _KeyValue_Delete($31);
  }
  $32 = $4;
  $33 = (($32) + 1)|0;
  $4 = $33;
 }
 _free($16);
 $34 = $2;
 HEAP32[$34>>2] = 0;
 $35 = $2;
 $36 = ((($35)) + 8|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _Map2_GetAssocAt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $8;
  HEAP32[$14>>2] = 0;
  $15 = $7;
  HEAP32[$15>>2] = 0;
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $6;
 $17 = (_String2_HashKey($16)|0);
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $8;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20>>>0) % ($23>>>0))&-1;
 $25 = $7;
 HEAP32[$25>>2] = $24;
 $9 = 0;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $10 = $31;
 while(1) {
  $32 = $10;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $8;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)==($38|0);
  if ($39) {
   $40 = $10;
   $41 = ((($40)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $6;
   $44 = (_strcmp($42,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    label = 7;
    break;
   }
  }
  $47 = $10;
  $48 = HEAP32[$47>>2]|0;
  $10 = $48;
 }
 if ((label|0) == 7) {
  $46 = $10;
  $9 = $46;
 }
 $49 = $9;
 $4 = $49;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _Parser_InitString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 116|0);
 _TScannerItemList_Init($8);
 $9 = $3;
 $10 = ((($9)) + 144|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 $12 = ((($11)) + 124|0);
 _SymbolMap_Init($12);
 $13 = $3;
 $14 = ((($13)) + 124|0);
 $15 = $3;
 $16 = ((($15)) + 140|0);
 HEAP32[$16>>2] = $14;
 $17 = $3;
 $18 = ((($17)) + 148|0);
 HEAP8[$18>>0] = 0;
 $19 = $3;
 HEAP8[$19>>0] = 0;
 $20 = $3;
 $21 = ((($20)) + 4|0);
 _StrBuilder_Init($21);
 $22 = $3;
 $23 = ((($22)) + 16|0);
 $24 = $4;
 $25 = $5;
 (_Scanner_InitString($23,$24,$25)|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;
 $26 = $3;
 (_Parser_Match($26,$6)|0);
 _TScannerItemList_Destroy($6);
 STACKTOP = sp;return 1;
}
function _Scanner_InitString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 (_Scanner_InitCore($8)|0);
 $9 = $4;
 $10 = $5;
 $11 = (_BasicScanner_Create($6,$9,$10,0)|0);
 $12 = $11&1;
 $7 = $12;
 $13 = $3;
 $14 = HEAP32[$6>>2]|0;
 _BasicScannerStack_Push($13,$14);
 $15 = $7;
 $16 = $15&1;
 STACKTOP = sp;return ($16|0);
}
function _Parser_Match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_Parser_MatchEx($4,$5,1)|0);
 STACKTOP = sp;return ($6|0);
}
function _Scanner_IncludeFile($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 28|0;
 $12 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $3&1;
 $7 = $14;
 $15 = $4;
 $16 = ((($15)) + 88|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  STACKTOP = sp;return;
 }
 $8 = 0;
 HEAP32[$9>>2] = 0;
 _String_InitWith($9,9460);
 $10 = 0;
 $19 = $6;
 switch ($19|0) {
 case 1: case 0:  {
  $20 = $4;
  $21 = $5;
  $22 = $6;
  $23 = ($22|0)==(0);
  $24 = (_Scanner_GetFullPath($20,$21,$23,$9)|0);
  $25 = $24&1;
  $10 = $25;
  break;
 }
 case 2:  {
  $26 = $5;
  _String_Set($9,$26);
  $10 = 1;
  break;
 }
 default: {
 }
 }
 $27 = $10;
 $28 = $27&1;
 $29 = $4;
 do {
  if ($28) {
   $30 = ((($29)) + 28|0);
   $31 = HEAP32[$9>>2]|0;
   $32 = (_TFileMap_Find($30,$31)|0);
   $11 = $32;
   $33 = $11;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = $11;
    $36 = ((($35)) + 12|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&1;
    if ($38) {
     $39 = $4;
     _Scanner_PushToken($39,150,3290,1);
     break;
    }
   }
   $40 = $11;
   $41 = ($40|0)==(0|0);
   if ($41) {
    $42 = (_TFile_Create()|0);
    $11 = $42;
    $43 = $8;
    $44 = $43&1;
    $45 = $11;
    $46 = ((($45)) + 13|0);
    $47 = $44&1;
    HEAP8[$46>>0] = $47;
    $48 = $6;
    $49 = ($48|0)==(1);
    $50 = $11;
    $51 = ((($50)) + 14|0);
    $52 = $49&1;
    HEAP8[$51>>0] = $52;
    $53 = $11;
    $54 = ((($53)) + 4|0);
    $55 = $5;
    _String_Set($54,$55);
    $56 = $4;
    $57 = ((($56)) + 28|0);
    $58 = HEAP32[$9>>2]|0;
    $59 = $11;
    (_TFileMap_Set($57,$58,$59)|0);
   }
   HEAP32[$12>>2] = 0;
   $60 = HEAP32[$9>>2]|0;
   $61 = (_BasicScanner_CreateFile($60,$12)|0);
   $62 = $61&1;
   $13 = $62;
   $63 = $13;
   $64 = $63&1;
   $65 = $64&1;
   $66 = ($65|0)==(1);
   if (!($66)) {
    $80 = $4;
    $81 = HEAP32[$9>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $81;
    _Scanner_SetError($80,3311,$vararg_buffer1);
    break;
   }
   $67 = $11;
   $68 = ($67|0)!=(0|0);
   if (!($68)) {
    $79 = $4;
    _Scanner_SetError($79,3307,$vararg_buffer);
    break;
   }
   $69 = $11;
   $70 = ((($69)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$12>>2]|0;
   $73 = ((($72)) + 80|0);
   HEAP32[$73>>2] = $71;
   $74 = $7;
   $75 = $74&1;
   if ($75) {
    $76 = HEAP32[$12>>2]|0;
    _BasicScanner_Match($76);
   }
   $77 = $4;
   $78 = HEAP32[$12>>2]|0;
   _BasicScannerStack_Push($77,$78);
  } else {
   $82 = $5;
   HEAP32[$vararg_buffer3>>2] = $82;
   _Scanner_SetError($29,3368,$vararg_buffer3);
  }
 } while(0);
 _String_Destroy($9);
 STACKTOP = sp;return;
}
function _Parser_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 116|0);
 _TScannerItemList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 124|0);
 _SymbolMap_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 _StrBuilder_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 16|0);
 _Scanner_Destroy($9);
 STACKTOP = sp;return;
}
function _Scanner_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _BasicScannerStack_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 4|0);
 _MacroMap_Destroy($4);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 _StackInts_Destroy($6);
 $7 = $1;
 $8 = ((($7)) + 28|0);
 _TFileMap_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 40|0);
 _StrArray_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 52|0);
 _StrArray_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 64|0);
 _StrBuilder_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 76|0);
 _StrBuilder_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 92|0);
 _TScannerItemList_Destroy($18);
 STACKTOP = sp;return;
}
function _Parser_HasError($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $10 = 1;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = ((($6)) + 88|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _SetWarning($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $6 = $2;
 $7 = ((($6)) + 16|0);
 _Scanner_GetFilePositionString($7,$4);
 HEAP32[$5>>2] = $varargs;
 $8 = $3;
 _StrBuilder_AppendFmtV($4,$8,$5);
 $9 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 (_printf(2763,$vararg_buffer)|0);
 _StrBuilder_Destroy($4);
 STACKTOP = sp;return;
}
function _Scanner_GetFilePositionString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Scanner_Top($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  (_StrBuilder_Set($9,$12)|0);
 }
 $13 = $4;
 $14 = ($13|0)!=(0|0);
 $15 = $3;
 if ($14) {
  $16 = $4;
  $17 = ((($16)) + 4|0);
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  _StrBuilder_AppendFmt($15,3230,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  (_StrBuilder_Append($15,3237)|0);
  STACKTOP = sp;return;
 }
}
function _StrBuilder_AppendFmtV($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = $5;
 (_vsnprintf($6,500,$7,$8)|0);
 $9 = $3;
 (_StrBuilder_Append($9,$6)|0);
 STACKTOP = sp;return;
}
function _SetError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_HasError($5)|0);
 $7 = $2;
 if ($6) {
  HEAP8[$7>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $8 = ((($7)) + 16|0);
  $9 = $2;
  $10 = ((($9)) + 4|0);
  _Scanner_GetFilePositionString($8,$10);
  $11 = $2;
  HEAP8[$11>>0] = 1;
  HEAP32[$4>>2] = $varargs;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = $3;
  _StrBuilder_AppendFmtV($13,$14,$4);
  STACKTOP = sp;return;
 }
}
function _GetCurrentLine($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_Parser_HasError($3)|0);
 if ($4) {
  $1 = -1;
 } else {
  $5 = $2;
  $6 = ((($5)) + 16|0);
  $7 = (_Scanner_LineAt($6,0)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _Scanner_LineAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _GetFileIndex($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_Parser_HasError($3)|0);
 if ($4) {
  $1 = -1;
 } else {
  $5 = $2;
  $6 = ((($5)) + 16|0);
  $7 = (_Scanner_FileIndexAt($6,0)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _Scanner_FileIndexAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _Parser_LookAheadToken($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 19;
 $5 = $1;
 $6 = (_Parser_HasError($5)|0);
 if ($6) {
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 $3 = 1;
 while(1) {
  $7 = $3;
  $8 = ($7|0)<(10);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 16|0);
  $11 = $3;
  $12 = (_Scanner_TokenAt($10,$11)|0);
  $2 = $12;
  $13 = $1;
  $14 = ((($13)) + 16|0);
  $15 = $3;
  $16 = (_Scanner_IsActiveAt($14,$15)|0);
  $17 = $16&1;
  $4 = $17;
  $18 = $4;
  $19 = $18&1;
  if ($19) {
   $20 = $2;
   $21 = (_IsPreprocessorTokenPhase($20)|0);
   if (!($21)) {
    label = 7;
    break;
   }
  }
  $22 = $3;
  $23 = (($22) + 1)|0;
  $3 = $23;
 }
 if ((label|0) == 7) {
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _Scanner_TokenAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 2;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _Scanner_IsActiveAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 32|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&1;
  $$expand_i1_val = $14&1;
  HEAP8[$2>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$2>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$2>>0]|0;
 $15 = $$pre_trunc&1;
 STACKTOP = sp;return ($15|0);
}
function _IsPreprocessorTokenPhase($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(8);
 $4 = $1;
 $5 = ($4|0)==(5);
 $or$cond = $3 | $5;
 $6 = $1;
 $7 = ($6|0)==(4);
 $or$cond3 = $or$cond | $7;
 $8 = $1;
 $9 = ($8|0)==(14);
 $or$cond5 = $or$cond3 | $9;
 $10 = $1;
 $11 = ($10|0)==(15);
 $or$cond7 = $or$cond5 | $11;
 $12 = $1;
 $13 = ($12|0)==(136);
 $or$cond9 = $or$cond7 | $13;
 $14 = $1;
 $15 = ($14|0)==(137);
 $or$cond11 = $or$cond9 | $15;
 $16 = $1;
 $17 = ($16|0)==(138);
 $or$cond13 = $or$cond11 | $17;
 $18 = $1;
 $19 = ($18|0)==(139);
 $or$cond15 = $or$cond13 | $19;
 $20 = $1;
 $21 = ($20|0)==(140);
 $or$cond17 = $or$cond15 | $21;
 $22 = $1;
 $23 = ($22|0)==(141);
 $or$cond19 = $or$cond17 | $23;
 $24 = $1;
 $25 = ($24|0)==(142);
 $or$cond21 = $or$cond19 | $25;
 $26 = $1;
 $27 = ($26|0)==(143);
 $or$cond23 = $or$cond21 | $27;
 $28 = $1;
 $29 = ($28|0)==(144);
 $or$cond25 = $or$cond23 | $29;
 $30 = $1;
 $31 = ($30|0)==(145);
 $or$cond27 = $or$cond25 | $31;
 $32 = $1;
 $33 = ($32|0)==(146);
 $or$cond29 = $or$cond27 | $33;
 $34 = $1;
 $35 = ($34|0)==(147);
 $or$cond31 = $or$cond29 | $35;
 $36 = $1;
 $37 = ($36|0)==(148);
 $or$cond33 = $or$cond31 | $37;
 $38 = $1;
 $39 = ($38|0)==(149);
 $or$cond35 = $or$cond33 | $39;
 if ($or$cond35) {
  $42 = 1;
  STACKTOP = sp;return ($42|0);
 }
 $40 = $1;
 $41 = ($40|0)==(150);
 $42 = $41;
 STACKTOP = sp;return ($42|0);
}
function _Parser_LookAheadLexeme($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = (_Parser_HasError($7)|0);
 if ($8) {
  $1 = 9460;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $3 = 0;
 $9 = $2;
 $10 = (_Parser_HasError($9)|0);
 L5: do {
  if (!($10)) {
   $4 = 1;
   while(1) {
    $11 = $4;
    $12 = ($11|0)<(10);
    if (!($12)) {
     break L5;
    }
    $13 = $2;
    $14 = ((($13)) + 16|0);
    $15 = $4;
    $16 = (_Scanner_TokenAt($14,$15)|0);
    $5 = $16;
    $17 = $2;
    $18 = ((($17)) + 16|0);
    $19 = $4;
    $20 = (_Scanner_IsActiveAt($18,$19)|0);
    $21 = $20&1;
    $6 = $21;
    $22 = $6;
    $23 = $22&1;
    if ($23) {
     $24 = $5;
     $25 = (_IsPreprocessorTokenPhase($24)|0);
     if (!($25)) {
      break;
     }
    }
    $30 = $4;
    $31 = (($30) + 1)|0;
    $4 = $31;
   }
   $26 = $2;
   $27 = ((($26)) + 16|0);
   $28 = $4;
   $29 = (_Scanner_LexemeAt($27,$28)|0);
   $3 = $29;
  }
 } while(0);
 $32 = $3;
 $1 = $32;
 $33 = $1;
 STACKTOP = sp;return ($33|0);
}
function _Scanner_LexemeAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $2 = $12;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $2 = 9460;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _Parser_CurrentToken($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_Parser_HasError($4)|0);
 if ($5) {
  $1 = 19;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 $6 = $2;
 $7 = ((($6)) + 16|0);
 $8 = (_Scanner_TokenAt($7,0)|0);
 $3 = $8;
 $9 = $3;
 $10 = (_IsPreprocessorTokenPhase($9)|0);
 if ($10) {
  $11 = $2;
  _SetError($11,2767,$vararg_buffer);
 }
 $12 = $3;
 $1 = $12;
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _Parser_MatchEx($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $11 = $2&1;
 $5 = $11;
 $6 = 2;
 $12 = $3;
 $13 = (_Parser_HasError($12)|0);
 if ($13) {
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $4;
  $17 = $3;
  $18 = ((($17)) + 116|0);
  _TScannerItemList_Swap($16,$18);
 }
 $19 = $3;
 $20 = ((($19)) + 16|0);
 _Scanner_Match($20);
 $21 = $3;
 $22 = ((($21)) + 16|0);
 $23 = (_Scanner_TokenAt($22,0)|0);
 $6 = $23;
 while(1) {
  $24 = $6;
  $25 = ($24|0)!=(2);
  $26 = $6;
  $27 = ($26|0)!=(0);
  $or$cond = $25 & $27;
  if (!($or$cond)) {
   label = 19;
   break;
  }
  $28 = $3;
  $29 = ((($28)) + 16|0);
  $30 = (_Scanner_IsActiveAt($29,0)|0);
  if ($30) {
   $31 = $6;
   $32 = (_IsPreprocessorTokenPhase($31)|0);
   if (!($32)) {
    label = 19;
    break;
   }
  }
  $33 = $6;
  $34 = ($33|0)==(136);
  do {
   if ($34) {
    $35 = $3;
    $36 = ((($35)) + 144|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$36>>2] = $38;
    $39 = $3;
    $40 = ((($39)) + 144|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(1);
    if ($42) {
     $43 = (_ScannerItem_Create()|0);
     $7 = $43;
     $44 = $7;
     $45 = $3;
     $46 = ((($45)) + 16|0);
     $47 = (_Scanner_LexemeAt($46,0)|0);
     _LocalStrBuilder_Set($44,$47);
     $48 = $3;
     $49 = ((($48)) + 16|0);
     $50 = (_Scanner_TokenAt($49,0)|0);
     $51 = $7;
     $52 = ((($51)) + 20|0);
     HEAP32[$52>>2] = $50;
     $53 = $3;
     $54 = ((($53)) + 116|0);
     $55 = $7;
     _TScannerItemList_PushBack($54,$55);
    }
   } else {
    $56 = $6;
    $57 = ($56|0)==(150);
    $58 = $3;
    $59 = ((($58)) + 144|0);
    $60 = HEAP32[$59>>2]|0;
    if ($57) {
     $61 = (($60) + -1)|0;
     HEAP32[$59>>2] = $61;
     $62 = $3;
     $63 = ((($62)) + 144|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==(0);
     if (!($65)) {
      break;
     }
     $66 = (_ScannerItem_Create()|0);
     $8 = $66;
     $67 = $8;
     $68 = $3;
     $69 = ((($68)) + 16|0);
     $70 = (_Scanner_LexemeAt($69,0)|0);
     _LocalStrBuilder_Set($67,$70);
     $71 = $3;
     $72 = ((($71)) + 16|0);
     $73 = (_Scanner_TokenAt($72,0)|0);
     $74 = $8;
     $75 = ((($74)) + 20|0);
     HEAP32[$75>>2] = $73;
     $76 = $3;
     $77 = ((($76)) + 116|0);
     $78 = $8;
     _TScannerItemList_PushBack($77,$78);
     break;
    }
    $79 = ($60|0)==(0);
    if ($79) {
     $80 = (_ScannerItem_Create()|0);
     $9 = $80;
     $81 = $9;
     $82 = $3;
     $83 = ((($82)) + 16|0);
     $84 = (_Scanner_LexemeAt($83,0)|0);
     _LocalStrBuilder_Set($81,$84);
     $85 = $3;
     $86 = ((($85)) + 16|0);
     $87 = (_Scanner_TokenAt($86,0)|0);
     $88 = $9;
     $89 = ((($88)) + 20|0);
     HEAP32[$89>>2] = $87;
     $90 = $3;
     $91 = ((($90)) + 116|0);
     $92 = $9;
     _TScannerItemList_PushBack($91,$92);
     break;
    }
    $93 = $5;
    $94 = $93&1;
    $95 = $6;
    $96 = ($95|0)==(5);
    $or$cond4 = $94 & $96;
    if ($or$cond4) {
     $97 = (_ScannerItem_Create()|0);
     $10 = $97;
     $98 = $10;
     $99 = $3;
     $100 = ((($99)) + 16|0);
     $101 = (_Scanner_LexemeAt($100,0)|0);
     _LocalStrBuilder_Set($98,$101);
     $102 = $3;
     $103 = ((($102)) + 16|0);
     $104 = (_Scanner_TokenAt($103,0)|0);
     $105 = $10;
     $106 = ((($105)) + 20|0);
     HEAP32[$106>>2] = $104;
     $107 = $3;
     $108 = ((($107)) + 116|0);
     $109 = $10;
     _TScannerItemList_PushBack($108,$109);
    }
   }
  } while(0);
  $110 = $3;
  $111 = ((($110)) + 16|0);
  _Scanner_Match($111);
  $112 = $3;
  $113 = ((($112)) + 16|0);
  $114 = (_Scanner_TokenAt($113,0)|0);
  $6 = $114;
 }
 if ((label|0) == 19) {
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 return (0)|0;
}
function _TScannerItemList_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _Scanner_Match($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 92|0);
 _TScannerItemList_PopFront($7);
 $8 = $1;
 $9 = ((($8)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 _Scanner_BuyTokens($12);
 STACKTOP = sp;return;
}
function _TScannerItemList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $$sink = $9;$$sink2 = $10;
 } else {
  $11 = ((($8)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 36|0);
  HEAP32[$13>>2] = $7;
  $14 = $3;
  $15 = $2;
  $$sink = $14;$$sink2 = $15;
 }
 $16 = ((($$sink2)) + 4|0);
 HEAP32[$16>>2] = $$sink;
 STACKTOP = sp;return;
}
function _Parser_MatchToken($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_Parser_HasError($8)|0);
 if ($9) {
  $3 = 2;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 $10 = $4;
 $11 = (_Parser_CurrentToken($10)|0);
 $7 = $11;
 $12 = $5;
 $13 = $7;
 $14 = ($12|0)!=($13|0);
 $15 = $4;
 if ($14) {
  $16 = $5;
  $17 = (_TokenToString($16)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  _SetError($15,2793,$vararg_buffer);
  $3 = 2;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $18 = $6;
  (_Parser_Match($15,$18)|0);
  $19 = $4;
  $20 = (_Parser_CurrentToken($19)|0);
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _GetCompletationMessage($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 2815;
 $3 = $1;
 $4 = (_Parser_HasError($3)|0);
 do {
  if ($4) {
   $5 = $1;
   $6 = ((($5)) + 16|0);
   $7 = ((($6)) + 88|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&1;
   $10 = $1;
   if ($9) {
    $11 = ((($10)) + 16|0);
    $12 = ((($11)) + 76|0);
    $13 = HEAP32[$12>>2]|0;
    $2 = $13;
    break;
   } else {
    $14 = ((($10)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $2 = $15;
    break;
   }
  }
 } while(0);
 $16 = $2;
 STACKTOP = sp;return ($16|0);
}
function _Lexeme($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_Parser_HasError($3)|0);
 if ($4) {
  $1 = 9460;
 } else {
  $5 = $2;
  $6 = ((($5)) + 16|0);
  $7 = (_Scanner_LexemeAt($6,0)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _ErrorOrEof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_Parser_HasError($2)|0);
 if ($3) {
  $7 = 1;
 } else {
  $4 = $1;
  $5 = (_Parser_CurrentToken($4)|0);
  $6 = ($5|0)==(2);
  $7 = $6;
 }
 STACKTOP = sp;return ($7|0);
}
function _IsFirstOfPrimaryExpression($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 132: case 43: case 27: case 12: case 10: case 9: case 82: case 6: case 7:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _PrimaryExpressionLiteral($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Parser_CurrentToken($9)|0);
 $4 = $10;
 $11 = $2;
 $12 = (_Lexeme($11)|0);
 $5 = $12;
 $13 = (_TPrimaryExpressionLiteral_Create()|0);
 $6 = $13;
 $14 = $6;
 $15 = $3;
 HEAP32[$15>>2] = $14;
 while(1) {
  $16 = $4;
  $17 = ($16|0)==(6);
  if (!($17)) {
   break;
  }
  $18 = (_TPrimaryExpressionLiteralItem_Create()|0);
  $7 = $18;
  $19 = $2;
  $20 = (_Lexeme($19)|0);
  $8 = $20;
  $21 = $7;
  $22 = ((($21)) + 4|0);
  $23 = $8;
  _String_Set($22,$23);
  $24 = $2;
  $25 = $7;
  $26 = ((($25)) + 8|0);
  $27 = (_Parser_Match($24,$26)|0);
  $4 = $27;
  $28 = $6;
  $29 = ((($28)) + 4|0);
  $30 = $7;
  _TPrimaryExpressionLiteralItemList_Add($29,$30);
 }
 STACKTOP = sp;return;
}
function _LambdaExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_TPrimaryExpressionLambda_Create()|0);
 $4 = $6;
 $7 = $4;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = $4;
 $11 = ((($10)) + 12|0);
 (_Parser_MatchToken($9,43,$11)|0);
 $12 = $2;
 $13 = $4;
 $14 = ((($13)) + 20|0);
 (_Parser_MatchToken($12,45,$14)|0);
 $15 = $2;
 $16 = (_Parser_CurrentToken($15)|0);
 $5 = $16;
 $17 = $5;
 $18 = ($17|0)==(27);
 if (!($18)) {
  $35 = $2;
  $36 = $4;
  $37 = ((($36)) + 4|0);
  _Compound_Statement($35,$37);
  STACKTOP = sp;return;
 }
 $19 = $2;
 $20 = $4;
 $21 = ((($20)) + 28|0);
 $22 = (_Parser_MatchToken($19,27,$21)|0);
 $5 = $22;
 $23 = (_TParameterTypeList_Create()|0);
 $24 = $4;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $5;
 $27 = ($26|0)!=(28);
 if ($27) {
  $28 = $2;
  $29 = $4;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  _Parameter_Type_List($28,$31);
 }
 $32 = $2;
 $33 = $4;
 $34 = ((($33)) + 36|0);
 (_Parser_MatchToken($32,28,$34)|0);
 $35 = $2;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 _Compound_Statement($35,$37);
 STACKTOP = sp;return;
}
function _Parameter_Type_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _Parameter_List($5,$6);
 $7 = $2;
 $8 = (_Parser_CurrentToken($7)|0);
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)==(78);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ((($11)) + 24|0);
 HEAP8[$12>>0] = 1;
 $13 = $2;
 $14 = $3;
 $15 = ((($14)) + 16|0);
 (_Parser_Match($13,$15)|0);
 STACKTOP = sp;return;
}
function _Compound_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = (_TCompoundStatement_Create()|0);
 $4 = $7;
 $8 = $4;
 $9 = $3;
 HEAP32[$9>>2] = $8;
 ;HEAP32[$5>>2]=HEAP32[884>>2]|0;HEAP32[$5+4>>2]=HEAP32[884+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[884+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[884+12>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($5)) + 12|0);
 HEAP32[$13>>2] = $12;
 $14 = $2;
 $15 = ((($14)) + 140|0);
 HEAP32[$15>>2] = $5;
 $16 = $2;
 $17 = $4;
 $18 = ((($17)) + 16|0);
 (_Parser_MatchToken($16,49,$18)|0);
 $19 = $2;
 $20 = (_Parser_CurrentToken($19)|0);
 $6 = $20;
 $21 = $6;
 $22 = ($21|0)!=(51);
 if ($22) {
  $23 = $2;
  $24 = $4;
  $25 = ((($24)) + 4|0);
  _Block_Item_List($23,$25);
 }
 $26 = $2;
 $27 = $4;
 $28 = ((($27)) + 24|0);
 (_Parser_MatchToken($26,51,$28)|0);
 $29 = ((($5)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = ((($31)) + 140|0);
 HEAP32[$32>>2] = $30;
 _SymbolMap_Destroy($5);
 STACKTOP = sp;return;
}
function _PrimaryExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $10 = $3;
 HEAP32[$10>>2] = 0;
 $11 = $3;
 HEAP32[$11>>2] = 0;
 $12 = $2;
 $13 = (_Parser_CurrentToken($12)|0);
 $4 = $13;
 $14 = $2;
 $15 = (_Lexeme($14)|0);
 $5 = $15;
 $16 = $4;
 $17 = (_IsFirstOfPrimaryExpression($16)|0);
 if (!($17)) {
  $18 = $2;
  _SetError($18,2818,$vararg_buffer);
 }
 $19 = $4;
 switch ($19|0) {
 case 43:  {
  $20 = $2;
  $21 = $3;
  _LambdaExpression($20,$21);
  break;
 }
 case 6:  {
  $22 = $2;
  $23 = $3;
  _PrimaryExpressionLiteral($22,$23);
  break;
 }
 case 7:  {
  $24 = $2;
  $25 = ((($24)) + 140|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $5;
  $28 = (_SymbolMap_Find($26,$27)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = $2;
   $31 = ((($30)) + 148|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&1;
   if (!($33)) {
    $34 = $5;
    $35 = (_strcmp($34,2862)|0);
    $36 = ($35|0)==(0);
    if (!($36)) {
     $37 = $2;
     $38 = $5;
     HEAP32[$vararg_buffer1>>2] = $38;
     _SetWarning($37,2875,$vararg_buffer1);
    }
   }
  }
  $39 = (_TPrimaryExpressionValue_Create()|0);
  $6 = $39;
  $40 = $4;
  $41 = $6;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = $40;
  $43 = $6;
  $44 = ((($43)) + 8|0);
  $45 = $5;
  _String_Set($44,$45);
  $46 = $2;
  $47 = $6;
  $48 = ((($47)) + 16|0);
  (_Parser_Match($46,$48)|0);
  $49 = $6;
  $50 = $3;
  HEAP32[$50>>2] = $49;
  break;
 }
 case 12: case 10: case 9: case 82:  {
  $51 = (_TPrimaryExpressionValue_Create()|0);
  $7 = $51;
  $52 = $4;
  $53 = $7;
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = $52;
  $55 = $7;
  $56 = ((($55)) + 8|0);
  $57 = $2;
  $58 = (_Lexeme($57)|0);
  _String_Set($56,$58);
  $59 = $2;
  $60 = $7;
  $61 = ((($60)) + 16|0);
  (_Parser_Match($59,$61)|0);
  $62 = $7;
  $63 = $3;
  HEAP32[$63>>2] = $62;
  break;
 }
 case 27:  {
  $64 = (_TPrimaryExpressionValue_Create()|0);
  $8 = $64;
  $65 = $2;
  $66 = $8;
  $67 = ((($66)) + 16|0);
  (_Parser_Match($65,$67)|0);
  $68 = $2;
  _Expression0($68,$9);
  $69 = $2;
  $70 = $8;
  $71 = ((($70)) + 24|0);
  (_Parser_MatchToken($69,28,$71)|0);
  $72 = $4;
  $73 = $8;
  $74 = ((($73)) + 4|0);
  HEAP32[$74>>2] = $72;
  $75 = $8;
  $76 = ((($75)) + 8|0);
  $77 = $2;
  $78 = (_Lexeme($77)|0);
  _String_Set($76,$78);
  $79 = HEAP32[$9>>2]|0;
  $80 = $8;
  $81 = ((($80)) + 12|0);
  HEAP32[$81>>2] = $79;
  $82 = $8;
  $83 = $3;
  HEAP32[$83>>2] = $82;
  break;
 }
 case 132:  {
  $84 = $2;
  _GenericSelection($84);
  break;
 }
 default: {
  $85 = $2;
  _SetError($85,2913,$vararg_buffer3);
 }
 }
 $86 = $3;
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  STACKTOP = sp;return;
 }
 $89 = $2;
 _SetError($89,2930,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _Expression0($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $6 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 HEAP32[$8>>2] = 0;
 $9 = $2;
 _AssignmentExpression($9,$4);
 $10 = HEAP32[$4>>2]|0;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = (_Parser_CurrentToken($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = ($14|0)==(31);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 (_Parser_Match($16,0)|0);
 $17 = $2;
 _Expression0($17,$6);
 $18 = (_TBinaryExpression_Create()|0);
 $7 = $18;
 $19 = $2;
 $20 = $7;
 $21 = ((($20)) + 16|0);
 _GetPosition($19,$21);
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $24 = $7;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[$6>>2]|0;
 $27 = $7;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $7;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = 31;
 $31 = $7;
 $32 = $3;
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _GenericSelection($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _TTypeName_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 dest=$4; src=$5; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = $2;
 $7 = $3;
 dest=$6; src=$7; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = $3;
 dest=$8; src=$4; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _TypeName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 _Specifier_Qualifier_List($5,$7);
 HEAP32[$4>>2] = 0;
 $8 = $2;
 _Declarator($8,1,$4);
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$4>>2]|0;
 _TDeclarator_Swap($12,$13);
 $14 = HEAP32[$4>>2]|0;
 _TDeclarator_Delete($14);
 STACKTOP = sp;return;
}
function _Specifier_Qualifier_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_Parser_CurrentToken($8)|0);
 $4 = $9;
 $10 = $2;
 $11 = (_Lexeme($10)|0);
 $5 = $11;
 $12 = $2;
 $13 = $4;
 $14 = $5;
 $15 = (_TTypeSpecifier_IsFirst($12,$13,$14)|0);
 do {
  if ($15) {
   $16 = $3;
   $17 = $4;
   $18 = $5;
   $19 = (_TSpecifierQualifierList_CanAdd($16,$17,$18)|0);
   if (!($19)) {
    $25 = $2;
    _SetError($25,2952,$vararg_buffer);
    break;
   }
   HEAP32[$6>>2] = 0;
   $20 = $2;
   _Type_Specifier($20,$6);
   $21 = HEAP32[$6>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $3;
    $24 = HEAP32[$6>>2]|0;
    _TSpecifierQualifierList_PushBack($23,$24);
   }
  } else {
   $26 = $4;
   $27 = (_TTypeQualifier_IsFirst($26)|0);
   if ($27) {
    $28 = (_TTypeQualifier_Create()|0);
    $7 = $28;
    $29 = $2;
    $30 = $7;
    (_Type_Qualifier($29,$30)|0);
    $31 = $3;
    $32 = $7;
    $33 = (_TTypeQualifier_As_TSpecifierQualifier($32)|0);
    _TSpecifierQualifierList_PushBack($31,$33);
    break;
   } else {
    $34 = $2;
    $35 = $4;
    $36 = (_TokenToString($35)|0);
    HEAP32[$vararg_buffer1>>2] = $36;
    _SetError($34,2985,$vararg_buffer1);
    break;
   }
  }
 } while(0);
 $37 = $2;
 $38 = (_Parser_CurrentToken($37)|0);
 $4 = $38;
 $39 = $2;
 $40 = (_Lexeme($39)|0);
 $5 = $40;
 $41 = $4;
 $42 = (_TTypeQualifier_IsFirst($41)|0);
 $43 = $2;
 if ($42) {
  $44 = $3;
  _Specifier_Qualifier_List($43,$44);
  STACKTOP = sp;return;
 }
 $45 = $4;
 $46 = $5;
 $47 = (_TTypeSpecifier_IsFirst($43,$45,$46)|0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = $3;
 $49 = $4;
 $50 = $5;
 $51 = (_TSpecifierQualifierList_CanAdd($48,$49,$50)|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = $2;
 $53 = $3;
 _Specifier_Qualifier_List($52,$53);
 STACKTOP = sp;return;
}
function _Declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $8 = $1&1;
 $4 = $8;
 $5 = $2;
 $9 = $5;
 HEAP32[$9>>2] = 0;
 $10 = (_TDeclarator_Create()|0);
 $6 = $10;
 $11 = $3;
 $12 = (_Parser_CurrentToken($11)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)==(29);
 if ($14) {
  $15 = $3;
  $16 = $6;
  _Pointer($15,$16);
 }
 $17 = $3;
 $18 = $4;
 $19 = $18&1;
 $20 = $6;
 $21 = ((($20)) + 8|0);
 _Direct_Declarator($17,$19,$21);
 $22 = $6;
 $23 = $5;
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function _PostfixExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $13 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $16 = $3;
 HEAP32[$16>>2] = 0;
 $17 = $2;
 $18 = (_Parser_CurrentToken($17)|0);
 $4 = $18;
 $19 = $4;
 $20 = ($19|0)==(27);
 $21 = $2;
 do {
  if ($20) {
   $22 = (_Parser_LookAheadLexeme($21)|0);
   $5 = $22;
   $23 = $2;
   $24 = (_Parser_LookAheadToken($23)|0);
   $6 = $24;
   $25 = $2;
   $26 = $6;
   $27 = $5;
   $28 = (_IsTypeName($25,$26,$27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    $55 = $2;
    _PrimaryExpression($55,$9);
    $56 = HEAP32[$9>>2]|0;
    $57 = $3;
    HEAP32[$57>>2] = $56;
    break;
   }
   $30 = (_TPostfixExpressionCore_Create()|0);
   $7 = $30;
   $31 = $2;
   $32 = $7;
   $33 = ((($32)) + 40|0);
   (_Parser_MatchToken($31,27,$33)|0);
   _TTypeName_Init($8);
   $34 = $2;
   _TypeName($34,$8);
   _TTypeName_Destroy($8);
   $35 = $2;
   $36 = $7;
   $37 = ((($36)) + 48|0);
   (_Parser_MatchToken($35,28,$37)|0);
   $38 = $2;
   $39 = $7;
   $40 = ((($39)) + 56|0);
   (_Parser_MatchToken($38,49,$40)|0);
   $41 = $2;
   $42 = $7;
   $43 = ((($42)) + 24|0);
   _Initializer_List($41,$43);
   $44 = $2;
   $45 = $7;
   $46 = ((($45)) + 64|0);
   (_Parser_MatchToken($44,51,$46)|0);
   $47 = $2;
   $48 = (_Parser_CurrentToken($47)|0);
   $49 = ($48|0)==(31);
   if ($49) {
    $50 = $2;
    $51 = $7;
    $52 = ((($51)) + 72|0);
    (_Parser_Match($50,$52)|0);
   }
   $53 = $7;
   $54 = $3;
   HEAP32[$54>>2] = $53;
  } else {
   _PrimaryExpression($21,$10);
   $58 = HEAP32[$10>>2]|0;
   $59 = $3;
   HEAP32[$59>>2] = $58;
  }
 } while(0);
 $60 = $2;
 $61 = (_Parser_CurrentToken($60)|0);
 $4 = $61;
 $62 = $4;
 $63 = (_IsFirstOfPrimaryExpression($62)|0);
 if ($63) {
  $64 = (_TPostfixExpressionCore_Create()|0);
  $11 = $64;
  $65 = $3;
  $66 = HEAP32[$65>>2]|0;
  $67 = $11;
  $68 = ((($67)) + 12|0);
  HEAP32[$68>>2] = $66;
  $69 = $2;
  $70 = $11;
  _PostfixExpressionCore($69,$70);
  $71 = $11;
  $72 = $3;
  HEAP32[$72>>2] = $71;
  STACKTOP = sp;return;
 }
 $73 = $4;
 switch ($73|0) {
 case 27:  {
  $74 = (_TPostfixExpressionCore_Create()|0);
  $12 = $74;
  $75 = $3;
  $76 = HEAP32[$75>>2]|0;
  $77 = $12;
  $78 = ((($77)) + 12|0);
  HEAP32[$78>>2] = $76;
  HEAP32[$13>>2] = 0;
  $79 = $3;
  $80 = HEAP32[$79>>2]|0;
  $81 = (_TExpression_As_TPrimaryExpressionValue($80)|0);
  $14 = $81;
  $82 = $14;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = $14;
   $85 = ((($84)) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   _String_Set($13,$86);
  }
  $87 = $2;
  $88 = $12;
  _PostfixExpressionCore($87,$88);
  $89 = $12;
  $90 = $3;
  HEAP32[$90>>2] = $89;
  _String_Destroy($13);
  STACKTOP = sp;return;
  break;
 }
 case 55: case 54: case 53: case 34: case 43:  {
  $91 = (_TPostfixExpressionCore_Create()|0);
  $15 = $91;
  $92 = $3;
  $93 = HEAP32[$92>>2]|0;
  $94 = $15;
  $95 = ((($94)) + 12|0);
  HEAP32[$95>>2] = $93;
  $96 = $2;
  $97 = $15;
  _PostfixExpressionCore($96,$97);
  $98 = $15;
  $99 = $3;
  HEAP32[$99>>2] = $98;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _IsTypeName($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 $10 = $5;
 switch ($10|0) {
 case 7:  {
  $11 = $4;
  $12 = ((($11)) + 140|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $6;
  $15 = (_SymbolMap_IsTypeName($13,$14)|0);
  $16 = $15&1;
  $7 = $16;
  break;
 }
 case 93: case 115: case 112: case 123: case 122: case 117: case 109: case 91: case 95: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 108: case 86: case 118: case 83: case 124: case 119: case 125: case 87:  {
  $7 = 1;
  break;
 }
 default: {
 }
 }
 $17 = $7;
 $3 = $17;
 $18 = $3;
 STACKTOP = sp;return ($18|0);
}
function _Initializer_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $6 = $2;
  $7 = (_ErrorOrEof($6)|0);
  if ($7) {
   label = 11;
   break;
  }
  $8 = $2;
  $9 = (_Parser_CurrentToken($8)|0);
  $4 = $9;
  $10 = $4;
  $11 = ($10|0)==(51);
  if ($11) {
   label = 11;
   break;
  }
  $12 = (_TInitializerListItem_Create()|0);
  $5 = $12;
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  $16 = $5;
  $17 = $3;
  if ($15) {
   HEAP32[$17>>2] = $16;
   $18 = $5;
   $19 = $3;
   $$sink = $18;$$sink2 = $19;
  } else {
   $20 = ((($17)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   HEAP32[$22>>2] = $16;
   $23 = $5;
   $24 = $3;
   $$sink = $23;$$sink2 = $24;
  }
  $25 = ((($$sink2)) + 4|0);
  HEAP32[$25>>2] = $$sink;
  $26 = $4;
  $27 = ($26|0)==(43);
  $28 = $4;
  $29 = ($28|0)==(34);
  $or$cond = $27 | $29;
  if ($or$cond) {
   $30 = $2;
   $31 = $5;
   _Designation($30,$31);
  }
  $32 = $2;
  $33 = $5;
  $34 = ((($33)) + 8|0);
  _Initializer($32,$34,31,51);
  $35 = $2;
  $36 = (_Parser_CurrentToken($35)|0);
  $4 = $36;
  $37 = $4;
  $38 = ($37|0)==(31);
  if (!($38)) {
   label = 11;
   break;
  }
  $39 = $2;
  $40 = $5;
  $41 = ((($40)) + 16|0);
  (_Parser_Match($39,$41)|0);
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _PostfixExpressionCore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_Parser_CurrentToken($6)|0);
 $4 = $7;
 $8 = $4;
 switch ($8|0) {
 case 27:  {
  $9 = $4;
  $10 = $3;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = $3;
  $14 = ((($13)) + 40|0);
  $15 = (_Parser_Match($12,$14)|0);
  $4 = $15;
  $16 = $4;
  $17 = ($16|0)!=(28);
  if ($17) {
   $18 = $2;
   $19 = $3;
   $20 = ((($19)) + 16|0);
   _ArgumentExpressionList($18,$20);
  }
  $21 = $2;
  $22 = $3;
  $23 = ((($22)) + 48|0);
  (_Parser_MatchToken($21,28,$23)|0);
  break;
 }
 case 43:  {
  $24 = $4;
  $25 = $3;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = $2;
  $28 = $3;
  $29 = ((($28)) + 40|0);
  (_Parser_MatchToken($27,43,$29)|0);
  $30 = $2;
  $31 = $3;
  $32 = ((($31)) + 16|0);
  _Expression0($30,$32);
  $33 = $2;
  $34 = $3;
  $35 = ((($34)) + 48|0);
  (_Parser_MatchToken($33,45,$35)|0);
  break;
 }
 case 34:  {
  $36 = $4;
  $37 = $3;
  $38 = ((($37)) + 4|0);
  HEAP32[$38>>2] = $36;
  $39 = $2;
  $40 = $3;
  $41 = ((($40)) + 40|0);
  (_Parser_Match($39,$41)|0);
  $42 = $3;
  $43 = ((($42)) + 32|0);
  $44 = $2;
  $45 = (_Lexeme($44)|0);
  _String_Set($43,$45);
  $46 = $2;
  $47 = $3;
  $48 = ((($47)) + 48|0);
  (_Parser_MatchToken($46,7,$48)|0);
  break;
 }
 case 53:  {
  $49 = $4;
  $50 = $3;
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $2;
  $53 = $3;
  $54 = ((($53)) + 40|0);
  (_Parser_Match($52,$54)|0);
  $55 = $3;
  $56 = ((($55)) + 32|0);
  $57 = $2;
  $58 = (_Lexeme($57)|0);
  _String_Set($56,$58);
  $59 = $2;
  $60 = $3;
  $61 = ((($60)) + 48|0);
  (_Parser_MatchToken($59,7,$61)|0);
  break;
 }
 case 54:  {
  $62 = $4;
  $63 = $3;
  $64 = ((($63)) + 4|0);
  HEAP32[$64>>2] = $62;
  $65 = $2;
  $66 = $3;
  $67 = ((($66)) + 40|0);
  (_Parser_Match($65,$67)|0);
  break;
 }
 case 55:  {
  $68 = $4;
  $69 = $3;
  $70 = ((($69)) + 4|0);
  HEAP32[$70>>2] = $68;
  $71 = $2;
  $72 = $3;
  $73 = ((($72)) + 40|0);
  (_Parser_Match($71,$73)|0);
  break;
 }
 default: {
 }
 }
 $74 = $2;
 $75 = (_Parser_CurrentToken($74)|0);
 $4 = $75;
 $76 = $4;
 switch ($76|0) {
 case 55: case 54: case 53: case 34: case 43: case 27:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $77 = (_TPostfixExpressionCore_Create()|0);
 $5 = $77;
 $78 = $2;
 $79 = $5;
 _PostfixExpressionCore($78,$79);
 $80 = $3;
 $81 = ((($80)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0|0);
 if ($83) {
  $84 = $2;
  _SetError($84,2913,$vararg_buffer);
 }
 $85 = $5;
 $86 = $3;
 $87 = ((($86)) + 20|0);
 HEAP32[$87>>2] = $85;
 STACKTOP = sp;return;
}
function _TExpression_As_TPrimaryExpressionValue($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(32);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _ArgumentExpressionList($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _AssignmentExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)==(31);
 if ($16) {
  $17 = (_TBinaryExpression_Create()|0);
  $6 = $17;
  $18 = $2;
  $19 = $6;
  $20 = ((($19)) + 24|0);
  (_Parser_Match($18,$20)|0);
  $21 = $2;
  _AssignmentExpression($21,$7);
  $22 = $2;
  $23 = $6;
  $24 = ((($23)) + 16|0);
  _GetPosition($22,$24);
  $25 = $6;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 31;
  $27 = HEAP32[$4>>2]|0;
  $28 = $6;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
  $30 = HEAP32[$7>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 12|0);
  HEAP32[$32>>2] = $30;
  $33 = $6;
  $34 = $3;
  HEAP32[$34>>2] = $33;
 }
 $35 = $2;
 $36 = (_Parser_CurrentToken($35)|0);
 $5 = $36;
 $37 = $5;
 $38 = ($37|0)==(31);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $2;
 $41 = $8;
 $42 = ((($41)) + 24|0);
 (_Parser_Match($40,$42)|0);
 $43 = $2;
 $44 = $8;
 $45 = ((($44)) + 16|0);
 _GetPosition($43,$45);
 $46 = $8;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = 31;
 $48 = $3;
 $49 = HEAP32[$48>>2]|0;
 $50 = $8;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = $49;
 $52 = $2;
 _ArgumentExpressionList($52,$9);
 $53 = HEAP32[$9>>2]|0;
 $54 = $8;
 $55 = ((($54)) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $8;
 $57 = $3;
 HEAP32[$57>>2] = $56;
 STACKTOP = sp;return;
}
function _AssignmentExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 _ConditionalExpression($8,$4);
 $9 = HEAP32[$4>>2]|0;
 $10 = $3;
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = (_Parser_CurrentToken($11)|0);
 $5 = $12;
 $13 = $5;
 switch ($13|0) {
 case 71: case 70: case 69: case 79: case 80: case 68: case 67: case 66: case 65: case 64: case 39:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $14 = (_TBinaryExpression_Create()|0);
 $6 = $14;
 $15 = $2;
 $16 = $6;
 $17 = ((($16)) + 24|0);
 (_Parser_Match($15,$17)|0);
 $18 = $2;
 _AssignmentExpression($18,$7);
 $19 = $2;
 $20 = $6;
 $21 = ((($20)) + 16|0);
 _GetPosition($19,$21);
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[$7>>2]|0;
 $27 = $6;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $30 = $6;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = $6;
 $33 = $3;
 HEAP32[$33>>2] = $32;
 STACKTOP = sp;return;
}
function _GetPosition($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (_GetCurrentLine($4)|0);
 $6 = $3;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = $2;
 $9 = (_GetFileIndex($8)|0);
 $10 = $3;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _SymbolMap_IsTypeName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $11 = $2;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 17;
   break;
  }
  $13 = $2;
  $14 = $3;
  $15 = (_SymbolMap_FindBucket($13,$14)|0);
  $6 = $15;
  while(1) {
   $16 = $6;
   $17 = ($16|0)!=(0|0);
   if (!($17)) {
    break;
   }
   $18 = $6;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(1);
   L7: do {
    if ($22) {
     $23 = $6;
     $24 = ((($23)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $3;
     $27 = (_strcmp($25,$26)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $5 = 1;
      $29 = $6;
      $30 = ((($29)) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $7 = $31;
      $8 = 0;
      while(1) {
       $32 = $8;
       $33 = $7;
       $34 = ((($33)) + 4|0);
       $35 = ((($34)) + 4|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($32|0)<($36|0);
       if (!($37)) {
        break L7;
       }
       $38 = $7;
       $39 = ((($38)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $8;
       $42 = (($40) + ($41<<2)|0);
       $43 = HEAP32[$42>>2]|0;
       $9 = $43;
       $44 = $9;
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)==(9);
       if ($46) {
        $47 = $9;
        $10 = $47;
        $48 = $10;
        $49 = ((($48)) + 4|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($50|0)==(114);
        if ($51) {
         break;
        }
       }
       $52 = $8;
       $53 = (($52) + 1)|0;
       $8 = $53;
      }
      $4 = 1;
     }
    }
   } while(0);
   $54 = $5;
   $55 = $54&1;
   if ($55) {
    break;
   }
   $56 = $6;
   $57 = HEAP32[$56>>2]|0;
   $6 = $57;
  }
  $58 = $5;
  $59 = $58&1;
  if ($59) {
   label = 17;
   break;
  }
  $60 = $2;
  $61 = ((($60)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $2 = $62;
 }
 if ((label|0) == 17) {
  $63 = $4;
  $64 = $63&1;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _UnaryExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $10 = sp + 28|0;
 $12 = sp + 20|0;
 $16 = sp + 4|0;
 $17 = sp;
 $2 = $0;
 $3 = $1;
 $18 = $3;
 HEAP32[$18>>2] = 0;
 $19 = $2;
 $20 = (_Parser_CurrentToken($19)|0);
 $4 = $20;
 $21 = $2;
 $22 = (_Parser_LookAheadToken($21)|0);
 $5 = $22;
 $23 = $2;
 $24 = (_Parser_LookAheadLexeme($23)|0);
 $6 = $24;
 $25 = $2;
 $26 = $5;
 $27 = $6;
 $28 = (_IsTypeName($25,$26,$27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $2;
  _PostfixExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $3;
  HEAP32[$32>>2] = $31;
  STACKTOP = sp;return;
 }
 $33 = $4;
 $34 = (_IsFirstOfPrimaryExpression($33)|0);
 if ($34) {
  $35 = $2;
  _PostfixExpression($35,$8);
  $36 = HEAP32[$8>>2]|0;
  $37 = $3;
  HEAP32[$37>>2] = $36;
  STACKTOP = sp;return;
 }
 $38 = $4;
 switch ($38|0) {
 case 55: case 54:  {
  $39 = (_TUnaryExpressionOperator_Create()|0);
  $9 = $39;
  $40 = $2;
  $41 = $9;
  $42 = ((($41)) + 48|0);
  (_Parser_Match($40,$42)|0);
  $43 = $2;
  _UnaryExpression($43,$10);
  $44 = $4;
  $45 = $9;
  $46 = ((($45)) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = HEAP32[$10>>2]|0;
  $48 = $9;
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $47;
  $50 = $9;
  $51 = $3;
  HEAP32[$51>>2] = $50;
  STACKTOP = sp;return;
  break;
 }
 case 20: case 52: case 32: case 30: case 29: case 25:  {
  $52 = (_TUnaryExpressionOperator_Create()|0);
  $11 = $52;
  $53 = $2;
  $54 = $11;
  $55 = ((($54)) + 48|0);
  (_Parser_Match($53,$55)|0);
  $56 = $2;
  _CastExpression($56,$12);
  $57 = $4;
  $58 = $11;
  $59 = ((($58)) + 4|0);
  HEAP32[$59>>2] = $57;
  $60 = HEAP32[$12>>2]|0;
  $61 = $11;
  $62 = ((($61)) + 8|0);
  HEAP32[$62>>2] = $60;
  $63 = $11;
  $64 = $3;
  HEAP32[$64>>2] = $63;
  STACKTOP = sp;return;
  break;
 }
 case 110:  {
  $65 = (_TUnaryExpressionOperator_Create()|0);
  $13 = $65;
  $66 = $13;
  $67 = $3;
  HEAP32[$67>>2] = $66;
  $68 = $4;
  $69 = $13;
  $70 = ((($69)) + 4|0);
  HEAP32[$70>>2] = $68;
  $71 = $2;
  $72 = $13;
  $73 = ((($72)) + 48|0);
  (_Parser_MatchToken($71,110,$73)|0);
  $74 = $2;
  $75 = (_Parser_CurrentToken($74)|0);
  $76 = ($75|0)==(27);
  $77 = $2;
  if (!($76)) {
   _UnaryExpression($77,$17);
   $98 = HEAP32[$17>>2]|0;
   $99 = $13;
   $100 = ((($99)) + 8|0);
   HEAP32[$100>>2] = $98;
   STACKTOP = sp;return;
  }
  $78 = (_Parser_LookAheadLexeme($77)|0);
  $14 = $78;
  $79 = $2;
  $80 = (_Parser_LookAheadToken($79)|0);
  $15 = $80;
  $81 = $2;
  $82 = $15;
  $83 = $14;
  $84 = (_IsTypeName($81,$82,$83)|0);
  $85 = ($84|0)!=(0);
  $86 = $2;
  if ($85) {
   $87 = $13;
   $88 = ((($87)) + 56|0);
   (_Parser_MatchToken($86,27,$88)|0);
   $89 = $2;
   $90 = $13;
   $91 = ((($90)) + 12|0);
   _TypeName($89,$91);
   $92 = $2;
   $93 = $13;
   $94 = ((($93)) + 64|0);
   (_Parser_MatchToken($92,28,$94)|0);
   STACKTOP = sp;return;
  } else {
   _UnaryExpression($86,$16);
   $95 = HEAP32[$16>>2]|0;
   $96 = $13;
   $97 = ((($96)) + 8|0);
   HEAP32[$97>>2] = $95;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _CastExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 72|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $2 = $0;
 $3 = $1;
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = (_Parser_CurrentToken($16)|0);
 $4 = $17;
 $18 = $4;
 $19 = ($18|0)==(27);
 $20 = $2;
 if (!($19)) {
  _UnaryExpression($20,$14);
  $69 = HEAP32[$14>>2]|0;
  $70 = $3;
  HEAP32[$70>>2] = $69;
  STACKTOP = sp;return;
 }
 $21 = (_Parser_LookAheadLexeme($20)|0);
 $5 = $21;
 $22 = $2;
 $23 = (_Parser_LookAheadToken($22)|0);
 $6 = $23;
 $24 = $2;
 $25 = $6;
 $26 = $5;
 $27 = (_IsTypeName($24,$25,$26)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $66 = $2;
  _UnaryExpression($66,$13);
  $67 = HEAP32[$13>>2]|0;
  $68 = $3;
  HEAP32[$68>>2] = $67;
  STACKTOP = sp;return;
 }
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $29 = $2;
 (_Parser_MatchToken($29,27,$7)|0);
 _TTypeName_Init($8);
 $30 = $2;
 _TypeName($30,$8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $31 = $2;
 $32 = (_Parser_MatchToken($31,28,$9)|0);
 $4 = $32;
 $33 = $4;
 $34 = ($33|0)==(49);
 if ($34) {
  $35 = $2;
  (_Parser_MatchToken($35,49,0)|0);
  $36 = (_TPostfixExpressionCore_Create()|0);
  $10 = $36;
  $37 = (_TTypeName_Create()|0);
  $38 = $10;
  $39 = ((($38)) + 36|0);
  HEAP32[$39>>2] = $37;
  $40 = $10;
  $41 = ((($40)) + 36|0);
  $42 = HEAP32[$41>>2]|0;
  _TTypeName_Swap($42,$8);
  $43 = $2;
  $44 = $10;
  $45 = ((($44)) + 24|0);
  _Initializer_List($43,$45);
  $46 = $2;
  $47 = (_Parser_CurrentToken($46)|0);
  $48 = ($47|0)==(31);
  if ($48) {
   $49 = $2;
   (_Parser_Match($49,0)|0);
  }
  $50 = $2;
  (_Parser_MatchToken($50,51,0)|0);
  $51 = $10;
  $52 = $3;
  HEAP32[$52>>2] = $51;
 } else {
  $53 = (_TCastExpressionType_Create()|0);
  $11 = $53;
  $54 = $11;
  $55 = ((($54)) + 44|0);
  _TScannerItemList_Swap($7,$55);
  $56 = $11;
  $57 = ((($56)) + 52|0);
  _TScannerItemList_Swap($9,$57);
  $58 = $2;
  _CastExpression($58,$12);
  $59 = $11;
  $60 = ((($59)) + 8|0);
  _TTypeName_Swap($60,$8);
  $61 = HEAP32[$12>>2]|0;
  $62 = $11;
  $63 = ((($62)) + 4|0);
  HEAP32[$63>>2] = $61;
  $64 = $11;
  $65 = $3;
  HEAP32[$65>>2] = $64;
 }
 _TTypeName_Destroy($8);
 _TScannerItemList_Destroy($7);
 _TScannerItemList_Destroy($9);
 STACKTOP = sp;return;
}
function _MultiplicativeExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _CastExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 switch ($15|0) {
 case 29: case 35: case 24:  {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $2;
  $18 = $6;
  $19 = ((($18)) + 16|0);
  _GetPosition($17,$19);
  $20 = $5;
  $21 = $6;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _CastExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
  break;
 }
 default: {
 }
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 switch ($38|0) {
 case 29: case 35: case 24:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _MultiplicativeExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _AdditiveExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _MultiplicativeExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 switch ($15|0) {
 case 32: case 30:  {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $2;
  $18 = $6;
  $19 = ((($18)) + 16|0);
  _GetPosition($17,$19);
  $20 = $5;
  $21 = $6;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _MultiplicativeExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
  break;
 }
 default: {
 }
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 switch ($38|0) {
 case 32: case 30:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _AdditiveExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _ShiftExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$off1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0;
 var $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _AdditiveExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $$off = (($15) + -56)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _AdditiveExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $$off1 = (($38) + -56)|0;
 $switch2 = ($$off1>>>0)<(2);
 if (!($switch2)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _ShiftExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _RelationalExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _ShiftExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 switch ($15|0) {
 case 58: case 59: case 40: case 38:  {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _ShiftExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
  break;
 }
 default: {
 }
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 switch ($38|0) {
 case 58: case 59: case 40: case 38:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _RelationalExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _EqualityExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$off1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0;
 var $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _RelationalExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $$off = (($15) + -60)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _RelationalExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $$off1 = (($38) + -60)|0;
 $switch2 = ($$off1>>>0)<(2);
 if (!($switch2)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _EqualityExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _AndExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _EqualityExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $cond = ($15|0)==(25);
 if ($cond) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _EqualityExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $cond1 = ($38|0)==(25);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _AndExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _ExclusiveOrExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _AndExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $cond = ($15|0)==(46);
 if ($cond) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _AndExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $cond1 = ($38|0)==(46);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _ExclusiveOrExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _InclusiveOrExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _ExclusiveOrExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $cond = ($15|0)==(50);
 if ($cond) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _ExclusiveOrExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $cond1 = ($38|0)==(50);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $5;
 $41 = $8;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 $45 = $8;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 _GetPosition($47,$49);
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _InclusiveOrExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _LogicalAndExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _InclusiveOrExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $cond = ($15|0)==(62);
 if ($cond) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 16|0);
  _GetPosition($24,$26);
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _InclusiveOrExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $cond1 = ($38|0)==(62);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $2;
 $41 = $8;
 $42 = ((($41)) + 16|0);
 _GetPosition($40,$42);
 $43 = $5;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = HEAP32[$46>>2]|0;
 $48 = $8;
 $49 = ((($48)) + 8|0);
 HEAP32[$49>>2] = $47;
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _LogicalAndExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _LogicalOrExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 _LogicalAndExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $5 = $14;
 $15 = $5;
 $cond = ($15|0)==(63);
 if ($cond) {
  $16 = (_TBinaryExpression_Create()|0);
  $6 = $16;
  $17 = $2;
  $18 = $6;
  $19 = ((($18)) + 16|0);
  _GetPosition($17,$19);
  $20 = $5;
  $21 = $6;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = $2;
  $28 = $6;
  $29 = ((($28)) + 24|0);
  (_Parser_Match($27,$29)|0);
  $30 = $2;
  _LogicalAndExpression($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $35 = $3;
  HEAP32[$35>>2] = $34;
 }
 $36 = $2;
 $37 = (_Parser_CurrentToken($36)|0);
 $5 = $37;
 $38 = $5;
 $cond1 = ($38|0)==(63);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 $39 = (_TBinaryExpression_Create()|0);
 $8 = $39;
 $40 = $2;
 $41 = $8;
 $42 = ((($41)) + 16|0);
 _GetPosition($40,$42);
 $43 = $5;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = HEAP32[$46>>2]|0;
 $48 = $8;
 $49 = ((($48)) + 8|0);
 HEAP32[$49>>2] = $47;
 $50 = $2;
 $51 = $8;
 $52 = ((($51)) + 24|0);
 (_Parser_Match($50,$52)|0);
 $53 = $2;
 _LogicalOrExpression($53,$9);
 $54 = HEAP32[$9>>2]|0;
 $55 = $8;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $3;
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function _ConditionalExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $6 = sp + 4|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 _LogicalOrExpression($8,$4);
 $9 = HEAP32[$4>>2]|0;
 $10 = $3;
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = (_Parser_CurrentToken($11)|0);
 $13 = ($12|0)==(41);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (_TTernaryExpression_Create()|0);
 $5 = $14;
 $15 = $2;
 $16 = $5;
 $17 = ((($16)) + 20|0);
 (_Parser_Match($15,$17)|0);
 $18 = $2;
 _Expression0($18,$6);
 $19 = $2;
 $20 = $5;
 $21 = ((($20)) + 28|0);
 (_Parser_MatchToken($19,36,$21)|0);
 $22 = $2;
 _ConditionalExpression($22,$7);
 $23 = $5;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 41;
 $25 = HEAP32[$4>>2]|0;
 $26 = $5;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = $25;
 $28 = HEAP32[$6>>2]|0;
 $29 = $5;
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = $28;
 $31 = HEAP32[$7>>2]|0;
 $32 = $5;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = $31;
 $34 = $5;
 $35 = $3;
 HEAP32[$35>>2] = $34;
 STACKTOP = sp;return;
}
function _ConstantExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 $6 = $3;
 _ConditionalExpression($5,$6);
 STACKTOP = sp;return;
}
function _Expression_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_TExpressionStatement_Create()|0);
 $4 = $6;
 $7 = $4;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = (_Parser_CurrentToken($9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(37);
 if ($12) {
  $13 = $2;
  $14 = $4;
  $15 = ((($14)) + 4|0);
  _Expression0($13,$15);
 }
 $16 = $2;
 $17 = $4;
 $18 = ((($17)) + 8|0);
 (_Parser_MatchToken($16,37,$18)|0);
 STACKTOP = sp;return;
}
function _Selection_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_Parser_CurrentToken($7)|0);
 $4 = $8;
 $9 = $4;
 switch ($9|0) {
 case 98:  {
  $10 = (_TIfStatement_Create()|0);
  $5 = $10;
  $11 = $5;
  $12 = $3;
  HEAP32[$12>>2] = $11;
  $13 = $2;
  $14 = $5;
  $15 = ((($14)) + 16|0);
  (_Parser_Match($13,$15)|0);
  $16 = $2;
  $17 = $5;
  $18 = ((($17)) + 24|0);
  (_Parser_MatchToken($16,27,$18)|0);
  $19 = $2;
  $20 = $5;
  $21 = ((($20)) + 4|0);
  _Expression0($19,$21);
  $22 = $2;
  $23 = $5;
  $24 = ((($23)) + 32|0);
  (_Parser_MatchToken($22,28,$24)|0);
  $25 = $2;
  $26 = $5;
  $27 = ((($26)) + 8|0);
  (_Statement($25,$27)|0);
  $28 = $2;
  $29 = (_Parser_CurrentToken($28)|0);
  $4 = $29;
  $30 = $4;
  $31 = ($30|0)==(92);
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $32 = $2;
  $33 = $5;
  $34 = ((($33)) + 40|0);
  (_Parser_Match($32,$34)|0);
  $35 = $2;
  $36 = $5;
  $37 = ((($36)) + 12|0);
  (_Statement($35,$37)|0);
  STACKTOP = sp;return;
  break;
 }
 case 113:  {
  $38 = (_TSwitchStatement_Create()|0);
  $6 = $38;
  $39 = $6;
  $40 = $3;
  HEAP32[$40>>2] = $39;
  $41 = $2;
  $42 = $6;
  $43 = ((($42)) + 12|0);
  (_Parser_Match($41,$43)|0);
  $44 = $2;
  $45 = $6;
  $46 = ((($45)) + 20|0);
  (_Parser_MatchToken($44,27,$46)|0);
  $47 = $2;
  $48 = $6;
  $49 = ((($48)) + 4|0);
  _Expression0($47,$49);
  $50 = $2;
  $51 = $6;
  $52 = ((($51)) + 28|0);
  (_Parser_MatchToken($50,28,$52)|0);
  $53 = $2;
  $54 = $6;
  $55 = ((($54)) + 8|0);
  (_Statement($53,$55)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 21|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_Parser_HasError($8)|0);
 if ($9) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 $5 = 0;
 $10 = $3;
 $11 = (_Parser_CurrentToken($10)|0);
 $6 = $11;
 $12 = $3;
 $13 = (_Lexeme($12)|0);
 $7 = $13;
 $14 = $6;
 do {
  switch ($14|0) {
  case 135:  {
   $5 = 1;
   $15 = $3;
   $16 = $4;
   _Asm_Statement($15,$16);
   break;
  }
  case 49:  {
   $5 = 1;
   $17 = $3;
   $18 = $4;
   _Compound_Statement($17,$18);
   break;
  }
  case 89: case 85:  {
   $5 = 1;
   $19 = $3;
   $20 = $4;
   _Labeled_Statement($19,$20);
   break;
  }
  case 113:  {
   $5 = 1;
   $21 = $3;
   $22 = $4;
   _Selection_Statement($21,$22);
   break;
  }
  case 98:  {
   $5 = 1;
   $23 = $3;
   $24 = $4;
   _Selection_Statement($23,$24);
   break;
  }
  case 90: case 96: case 120:  {
   $5 = 1;
   $25 = $3;
   $26 = $4;
   _Iteration_Statement($25,$26);
   break;
  }
  case 107: case 84: case 88: case 97:  {
   $5 = 1;
   $27 = $3;
   $28 = $4;
   _Jump_Statement($27,$28);
   break;
  }
  case 62: case 20: case 52: case 32: case 30: case 29: case 25: case 110: case 55: case 54: case 6: case 12: case 9: case 37: case 27: case 43:  {
   $5 = 1;
   $29 = $3;
   $30 = $4;
   _Expression_Statement($29,$30);
   break;
  }
  case 7:  {
   $31 = $3;
   $32 = $7;
   $33 = (_IsTypeName($31,7,$32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $35 = $3;
    $36 = (_Parser_LookAheadToken($35)|0);
    $37 = ($36|0)==(36);
    $38 = $3;
    $39 = $4;
    if ($37) {
     _Labeled_Statement($38,$39);
    } else {
     _Expression_Statement($38,$39);
    }
    $5 = 1;
   }
   break;
  }
  case 93: case 115: case 112: case 123: case 122: case 117: case 109: case 91: case 95: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 108: case 86: case 118: case 106: case 83: case 121: case 111: case 94: case 114: case 124: case 119: case 125: case 87: case 131: case 130: case 128: case 127:  {
   $5 = 0;
   break;
  }
  default: {
   $40 = $3;
   _SetError($40,2913,$vararg_buffer);
  }
  }
 } while(0);
 $41 = $5;
 $42 = $41&1;
 $$expand_i1_val2 = $42&1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $43 = $$pre_trunc&1;
 STACKTOP = sp;return ($43|0);
}
function _Jump_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Parser_CurrentToken($9)|0);
 $4 = $10;
 $11 = $4;
 switch ($11|0) {
 case 97:  {
  $12 = (_TJumpStatement_Create()|0);
  $5 = $12;
  $13 = $4;
  $14 = $5;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $13;
  $16 = $5;
  $17 = $3;
  HEAP32[$17>>2] = $16;
  $18 = $2;
  $19 = $5;
  $20 = ((($19)) + 16|0);
  (_Parser_Match($18,$20)|0);
  $21 = $5;
  $22 = ((($21)) + 8|0);
  $23 = $2;
  $24 = (_Lexeme($23)|0);
  _String_Set($22,$24);
  $25 = $2;
  $26 = $5;
  $27 = ((($26)) + 24|0);
  (_Parser_MatchToken($25,7,$27)|0);
  $28 = $2;
  $29 = $5;
  $30 = ((($29)) + 32|0);
  (_Parser_MatchToken($28,37,$30)|0);
  STACKTOP = sp;return;
  break;
 }
 case 88:  {
  $31 = (_TJumpStatement_Create()|0);
  $6 = $31;
  $32 = $4;
  $33 = $6;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $6;
  $36 = $3;
  HEAP32[$36>>2] = $35;
  $37 = $2;
  $38 = $6;
  $39 = ((($38)) + 16|0);
  (_Parser_Match($37,$39)|0);
  $40 = $2;
  $41 = $6;
  $42 = ((($41)) + 32|0);
  (_Parser_MatchToken($40,37,$42)|0);
  STACKTOP = sp;return;
  break;
 }
 case 84:  {
  $43 = (_TJumpStatement_Create()|0);
  $7 = $43;
  $44 = $4;
  $45 = $7;
  $46 = ((($45)) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = $7;
  $48 = $3;
  HEAP32[$48>>2] = $47;
  $49 = $2;
  $50 = $7;
  $51 = ((($50)) + 16|0);
  (_Parser_Match($49,$51)|0);
  $52 = $2;
  $53 = $7;
  $54 = ((($53)) + 32|0);
  (_Parser_MatchToken($52,37,$54)|0);
  STACKTOP = sp;return;
  break;
 }
 case 107:  {
  $55 = (_TJumpStatement_Create()|0);
  $8 = $55;
  $56 = $4;
  $57 = $8;
  $58 = ((($57)) + 4|0);
  HEAP32[$58>>2] = $56;
  $59 = $8;
  $60 = $3;
  HEAP32[$60>>2] = $59;
  $61 = $2;
  $62 = $8;
  $63 = ((($62)) + 16|0);
  $64 = (_Parser_Match($61,$63)|0);
  $4 = $64;
  $65 = $4;
  $66 = ($65|0)!=(37);
  if ($66) {
   $67 = $2;
   $68 = $8;
   $69 = ((($68)) + 12|0);
   _Expression0($67,$69);
  }
  $70 = $2;
  $71 = $8;
  $72 = ((($71)) + 32|0);
  (_Parser_MatchToken($70,37,$72)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Iteration_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Parser_CurrentToken($9)|0);
 $4 = $10;
 $11 = $4;
 switch ($11|0) {
 case 120:  {
  $12 = (_TWhileStatement_Create()|0);
  $5 = $12;
  $13 = $5;
  $14 = $3;
  HEAP32[$14>>2] = $13;
  $15 = $2;
  $16 = $5;
  $17 = ((($16)) + 12|0);
  (_Parser_Match($15,$17)|0);
  $18 = $2;
  $19 = $5;
  $20 = ((($19)) + 20|0);
  (_Parser_MatchToken($18,27,$20)|0);
  $21 = $2;
  $22 = $5;
  $23 = ((($22)) + 4|0);
  _Expression0($21,$23);
  $24 = $2;
  $25 = $5;
  $26 = ((($25)) + 28|0);
  (_Parser_MatchToken($24,28,$26)|0);
  $27 = $2;
  $28 = $5;
  $29 = ((($28)) + 8|0);
  (_Statement($27,$29)|0);
  STACKTOP = sp;return;
  break;
 }
 case 90:  {
  $30 = (_TDoStatement_Create()|0);
  $6 = $30;
  $31 = $6;
  $32 = $3;
  HEAP32[$32>>2] = $31;
  $33 = $2;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  (_Parser_Match($33,$35)|0);
  $36 = $2;
  $37 = $6;
  $38 = ((($37)) + 8|0);
  (_Statement($36,$38)|0);
  $39 = $2;
  $40 = $6;
  $41 = ((($40)) + 20|0);
  (_Parser_MatchToken($39,120,$41)|0);
  $42 = $2;
  $43 = $6;
  $44 = ((($43)) + 28|0);
  (_Parser_MatchToken($42,27,$44)|0);
  $45 = $2;
  $46 = $6;
  $47 = ((($46)) + 4|0);
  _Expression0($45,$47);
  $48 = $2;
  $49 = $6;
  $50 = ((($49)) + 36|0);
  (_Parser_MatchToken($48,28,$50)|0);
  $51 = $2;
  $52 = $6;
  $53 = ((($52)) + 44|0);
  (_Parser_MatchToken($51,37,$53)|0);
  STACKTOP = sp;return;
  break;
 }
 case 96:  {
  $54 = (_TForStatement_Create()|0);
  $7 = $54;
  $55 = $7;
  $56 = $3;
  HEAP32[$56>>2] = $55;
  $57 = $2;
  $58 = $7;
  $59 = ((($58)) + 24|0);
  (_Parser_Match($57,$59)|0);
  $60 = $2;
  $61 = $7;
  $62 = ((($61)) + 32|0);
  $63 = (_Parser_MatchToken($60,27,$62)|0);
  $4 = $63;
  $64 = $4;
  $65 = ($64|0)!=(37);
  $66 = $2;
  $67 = $7;
  do {
   if ($65) {
    $68 = ((($67)) + 4|0);
    $69 = (_Declaration($66,$68)|0);
    $70 = $69&1;
    $8 = $70;
    $71 = $8;
    $72 = $71&1;
    $73 = $2;
    $74 = (_Parser_CurrentToken($73)|0);
    $4 = $74;
    $75 = $4;
    $76 = ($75|0)!=(37);
    if ($72) {
     $77 = $2;
     $78 = $7;
     if ($76) {
      $79 = ((($78)) + 12|0);
      _Expression0($77,$79);
      $80 = $2;
      $81 = $7;
      $82 = ((($81)) + 40|0);
      (_Parser_MatchToken($80,37,$82)|0);
      break;
     } else {
      $83 = ((($78)) + 40|0);
      (_Parser_MatchToken($77,37,$83)|0);
      break;
     }
    }
    if ($76) {
     $84 = $2;
     $85 = $7;
     $86 = ((($85)) + 8|0);
     _Expression0($84,$86);
     $87 = $2;
     $88 = $7;
     $89 = ((($88)) + 40|0);
     (_Parser_MatchToken($87,37,$89)|0);
    }
    $90 = $2;
    $91 = (_Parser_CurrentToken($90)|0);
    $4 = $91;
    $92 = $4;
    $93 = ($92|0)!=(37);
    $94 = $2;
    $95 = $7;
    if ($93) {
     $96 = ((($95)) + 12|0);
     _Expression0($94,$96);
     $97 = $2;
     $98 = $7;
     $99 = ((($98)) + 48|0);
     (_Parser_MatchToken($97,37,$99)|0);
     break;
    } else {
     $100 = ((($95)) + 48|0);
     (_Parser_MatchToken($94,37,$100)|0);
     break;
    }
   } else {
    $101 = ((($67)) + 40|0);
    (_Parser_MatchToken($66,37,$101)|0);
    $102 = $2;
    $103 = (_Parser_CurrentToken($102)|0);
    $4 = $103;
    $104 = $4;
    $105 = ($104|0)!=(37);
    $106 = $2;
    $107 = $7;
    if ($105) {
     $108 = ((($107)) + 12|0);
     _Expression0($106,$108);
     $109 = $2;
     $110 = $7;
     $111 = ((($110)) + 48|0);
     (_Parser_MatchToken($109,37,$111)|0);
     break;
    } else {
     $112 = ((($107)) + 48|0);
     (_Parser_MatchToken($106,37,$112)|0);
     break;
    }
   }
  } while(0);
  $113 = $2;
  $114 = (_Parser_CurrentToken($113)|0);
  $4 = $114;
  $115 = $4;
  $116 = ($115|0)!=(28);
  if ($116) {
   $117 = $2;
   $118 = $7;
   $119 = ((($118)) + 16|0);
   _Expression0($117,$119);
  }
  $120 = $2;
  $121 = $7;
  $122 = ((($121)) + 56|0);
  (_Parser_MatchToken($120,28,$122)|0);
  $123 = $2;
  $124 = $7;
  $125 = ((($124)) + 20|0);
  (_Statement($123,$125)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 76|0;
 $9 = sp + 56|0;
 $13 = sp + 24|0;
 $17 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $19 = $2;
 $20 = (_Parser_CurrentToken($19)|0);
 $5 = $20;
 $21 = $5;
 $22 = ($21|0)==(126);
 if ($22) {
  $23 = (_TStaticAssertDeclaration_Create()|0);
  $6 = $23;
  $24 = $6;
  $25 = $3;
  HEAP32[$25>>2] = $24;
  $26 = $2;
  $27 = $6;
  _Static_Assert_Declaration($26,$27);
  $4 = 1;
  $146 = $4;
  $147 = $146&1;
  STACKTOP = sp;return ($147|0);
 }
 $28 = $5;
 $29 = ($28|0)==(89);
 if ($29) {
  HEAP32[$7>>2] = 0;
  $30 = $2;
  _GroupDeclaration($30,$7);
  $31 = HEAP32[$7>>2]|0;
  $32 = $3;
  HEAP32[$32>>2] = $31;
  $4 = 1;
  $146 = $4;
  $147 = $146&1;
  STACKTOP = sp;return ($147|0);
 }
 $33 = (_TDeclaration_Create()|0);
 $8 = $33;
 $34 = $5;
 $35 = ($34|0)==(37);
 if ($35) {
  $4 = 1;
 } else {
  $36 = $2;
  $37 = $2;
  $38 = (_Parser_CurrentToken($37)|0);
  $39 = $2;
  $40 = (_Lexeme($39)|0);
  $41 = (_Declaration_Specifiers_IsFirst($36,$38,$40)|0);
  if ($41) {
   $42 = $2;
   $43 = $8;
   $44 = ((($43)) + 4|0);
   _Declaration_Specifiers($42,$44);
   $4 = 1;
  }
 }
 $45 = $4;
 $46 = $45&1;
 $47 = $8;
 if (!($46)) {
  _TDeclaration_Delete($47);
  $146 = $4;
  $147 = $146&1;
  STACKTOP = sp;return ($147|0);
 }
 $48 = $3;
 HEAP32[$48>>2] = $47;
 $49 = $2;
 $50 = (_GetFileIndex($49)|0);
 $51 = $8;
 $52 = ((($51)) + 28|0);
 HEAP32[$52>>2] = $50;
 $53 = $2;
 $54 = (_GetCurrentLine($53)|0);
 $55 = $8;
 $56 = ((($55)) + 32|0);
 HEAP32[$56>>2] = $54;
 $57 = $2;
 $58 = (_Parser_CurrentToken($57)|0);
 $5 = $58;
 $59 = $5;
 $60 = ($59|0)==(37);
 if ($60) {
  $61 = $2;
  $62 = $8;
  $63 = ((($62)) + 48|0);
  (_Parser_Match($61,$63)|0);
  $146 = $4;
  $147 = $146&1;
  STACKTOP = sp;return ($147|0);
 }
 ;HEAP32[$9>>2]=HEAP32[884>>2]|0;HEAP32[$9+4>>2]=HEAP32[884+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[884+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[884+12>>2]|0;
 $64 = $2;
 $65 = ((($64)) + 140|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($9)) + 12|0);
 HEAP32[$67>>2] = $66;
 $68 = $2;
 $69 = ((($68)) + 140|0);
 HEAP32[$69>>2] = $9;
 $70 = $2;
 $71 = $8;
 $72 = ((($71)) + 16|0);
 _Init_Declarator_List($70,$72);
 $73 = ((($9)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $2;
 $76 = ((($75)) + 140|0);
 HEAP32[$76>>2] = $74;
 _SymbolMap_Destroy($9);
 $77 = $2;
 $78 = (_Parser_CurrentToken($77)|0);
 $5 = $78;
 $79 = $8;
 $80 = ((($79)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $10 = $81;
 while(1) {
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if (!($83)) {
   break;
  }
  $84 = $10;
  $85 = (_TInitDeclarator_FindName($84)|0);
  $11 = $85;
  $86 = $11;
  $87 = ($86|0)!=(0|0);
  if ($87) {
   $88 = $2;
   $89 = ((($88)) + 140|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $11;
   $92 = $8;
   (_SymbolMap_SetAt($90,$91,$92)|0);
  }
  $93 = $10;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $10 = $95;
 }
 $96 = $5;
 $97 = ($96|0)==(49);
 $98 = $2;
 $99 = ((($98)) + 116|0);
 $100 = (_FindThisComment($99,3208)|0);
 if (!($97)) {
  $18 = $100;
  $139 = $18;
  $140 = ($139|0)!=(0|0);
  if ($140) {
   $141 = $8;
   $142 = ((($141)) + 44|0);
   HEAP8[$142>>0] = 1;
  }
  $143 = $2;
  $144 = $8;
  $145 = ((($144)) + 48|0);
  (_Parser_MatchToken($143,37,$145)|0);
  $146 = $4;
  $147 = $146&1;
  STACKTOP = sp;return ($147|0);
 }
 $12 = $100;
 $101 = $12;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = $8;
  $104 = ((($103)) + 44|0);
  HEAP8[$104>>0] = 1;
 }
 ;HEAP32[$13>>2]=HEAP32[884>>2]|0;HEAP32[$13+4>>2]=HEAP32[884+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[884+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[884+12>>2]|0;
 $105 = $8;
 $106 = ((($105)) + 16|0);
 $107 = HEAP32[$106>>2]|0;
 $14 = $107;
 $108 = $14;
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($109)) + 8|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 20|0);
 $113 = HEAP32[$112>>2]|0;
 $15 = $113;
 while(1) {
  $114 = $15;
  $115 = ($114|0)!=(0|0);
  if (!($115)) {
   break;
  }
  $116 = $15;
  $117 = ((($116)) + 16|0);
  $118 = (_TDeclarator_GetName($117)|0);
  $16 = $118;
  $119 = $16;
  $120 = ($119|0)!=(0|0);
  if ($120) {
   $121 = $16;
   $122 = $15;
   (_SymbolMap_SetAt($13,$121,$122)|0);
  }
  $123 = $15;
  $124 = HEAP32[$123>>2]|0;
  $15 = $124;
 }
 $125 = $2;
 $126 = ((($125)) + 140|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($13)) + 12|0);
 HEAP32[$128>>2] = $127;
 $129 = $2;
 $130 = ((($129)) + 140|0);
 HEAP32[$130>>2] = $13;
 $131 = $2;
 _Compound_Statement($131,$17);
 $132 = ((($13)) + 12|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = $2;
 $135 = ((($134)) + 140|0);
 HEAP32[$135>>2] = $133;
 _SymbolMap_Destroy($13);
 $136 = HEAP32[$17>>2]|0;
 $137 = $8;
 $138 = ((($137)) + 24|0);
 HEAP32[$138>>2] = $136;
 $146 = $4;
 $147 = $146&1;
 STACKTOP = sp;return ($147|0);
}
function _Labeled_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_TLabeledStatement_Create()|0);
 $4 = $6;
 $7 = $4;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = (_Parser_CurrentToken($9)|0);
 $5 = $10;
 $11 = $5;
 $12 = $4;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = $5;
 $15 = ($14|0)==(7);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 12|0);
  $18 = $2;
  $19 = (_Lexeme($18)|0);
  _String_Set($17,$19);
  $20 = $2;
  $21 = $4;
  $22 = ((($21)) + 20|0);
  (_Parser_Match($20,$22)|0);
  $23 = $2;
  $24 = $4;
  $25 = ((($24)) + 28|0);
  (_Parser_MatchToken($23,36,$25)|0);
  $26 = $2;
  $27 = $4;
  $28 = ((($27)) + 4|0);
  (_Statement($26,$28)|0);
  STACKTOP = sp;return;
 }
 $29 = $5;
 $30 = ($29|0)==(85);
 if ($30) {
  $31 = $2;
  $32 = $4;
  $33 = ((($32)) + 20|0);
  (_Parser_Match($31,$33)|0);
  $34 = $2;
  $35 = $4;
  $36 = ((($35)) + 8|0);
  _ConstantExpression($34,$36);
  $37 = $2;
  $38 = $4;
  $39 = ((($38)) + 28|0);
  (_Parser_MatchToken($37,36,$39)|0);
  $40 = $2;
  $41 = $4;
  $42 = ((($41)) + 4|0);
  (_Statement($40,$42)|0);
  STACKTOP = sp;return;
 }
 $43 = $5;
 $44 = ($43|0)==(89);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $2;
 $46 = $4;
 $47 = ((($46)) + 20|0);
 (_Parser_Match($45,$47)|0);
 $48 = $2;
 $49 = $4;
 $50 = ((($49)) + 28|0);
 (_Parser_MatchToken($48,36,$50)|0);
 $51 = $2;
 $52 = $4;
 $53 = ((($52)) + 4|0);
 (_Statement($51,$53)|0);
 STACKTOP = sp;return;
}
function _Asm_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_TAsmStatement_Create()|0);
 $4 = $6;
 $7 = $4;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 (_Parser_MatchToken($9,135,0)|0);
 $10 = $2;
 $11 = (_Parser_CurrentToken($10)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)==(49);
 $14 = $2;
 L1: do {
  if ($13) {
   (_Parser_Match($14,0)|0);
   while(1) {
    $15 = $2;
    $16 = (_ErrorOrEof($15)|0);
    if ($16) {
     break L1;
    }
    $17 = $2;
    $18 = (_Parser_CurrentToken($17)|0);
    $5 = $18;
    $19 = $5;
    $20 = ($19|0)==(51);
    $21 = $2;
    (_Parser_Match($21,0)|0);
    if ($20) {
     break;
    }
   }
  } else {
   $22 = (_Parser_CurrentToken($14)|0);
   $5 = $22;
   while(1) {
    $23 = $2;
    $24 = (_ErrorOrEof($23)|0);
    if ($24) {
     break L1;
    }
    $25 = $2;
    $26 = (_Parser_CurrentToken($25)|0);
    $5 = $26;
    $27 = $5;
    $28 = ($27|0)==(51);
    $29 = $5;
    $30 = ($29|0)==(37);
    $or$cond = $28 | $30;
    if ($or$cond) {
     break L1;
    }
    $31 = $2;
    (_Parser_Match($31,0)|0);
   }
  }
 } while(0);
 $32 = $2;
 $33 = (_Parser_CurrentToken($32)|0);
 $5 = $33;
 $34 = $5;
 $35 = ($34|0)==(37);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $2;
 (_Parser_Match($36,0)|0);
 STACKTOP = sp;return;
}
function _Block_Item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 HEAP32[$6>>2] = 0;
 HEAP32[$4>>2] = 0;
 $7 = $2;
 $8 = (_Statement($7,$4)|0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $3;
  HEAP32[$10>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $11 = $2;
  (_Declaration($11,$5)|0);
  $12 = HEAP32[$5>>2]|0;
  $13 = $3;
  HEAP32[$13>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _Block_Item_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 while(1) {
  $6 = $2;
  $7 = (_ErrorOrEof($6)|0);
  if ($7) {
   label = 5;
   break;
  }
  HEAP32[$4>>2] = 0;
  $8 = $2;
  _Block_Item($8,$4);
  $9 = $3;
  $10 = HEAP32[$4>>2]|0;
  _TBlockItemList_PushBack($9,$10);
  $11 = $2;
  $12 = (_Parser_CurrentToken($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = ($13|0)==(51);
  if ($14) {
   label = 5;
   break;
  }
  $15 = $2;
  $16 = (_ErrorOrEof($15)|0);
  if ($16) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _Struct_Or_Union($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $4;
 switch ($7|0) {
 case 112:  {
  $8 = $4;
  $9 = $3;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = $8;
  $11 = $2;
  $12 = $3;
  $13 = ((($12)) + 60|0);
  (_Parser_Match($11,$13)|0);
  STACKTOP = sp;return;
  break;
 }
 case 115:  {
  $14 = $4;
  $15 = $3;
  $16 = ((($15)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $2;
  $18 = $3;
  $19 = ((($18)) + 60|0);
  (_Parser_Match($17,$19)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Static_Assert_Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)==(126);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 (_Parser_Match($9,$11)|0);
 $12 = $2;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 (_Parser_MatchToken($12,27,$14)|0);
 $15 = $2;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 _ConstantExpression($15,$17);
 $18 = $2;
 $19 = $3;
 $20 = ((($19)) + 28|0);
 (_Parser_MatchToken($18,31,$20)|0);
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = $2;
 $24 = (_Lexeme($23)|0);
 _String_Set($22,$24);
 $25 = $2;
 $26 = $3;
 $27 = ((($26)) + 36|0);
 (_Parser_MatchToken($25,6,$27)|0);
 $28 = $2;
 $29 = $3;
 $30 = ((($29)) + 44|0);
 (_Parser_MatchToken($28,28,$30)|0);
 $31 = $2;
 $32 = $3;
 $33 = ((($32)) + 52|0);
 (_Parser_MatchToken($31,37,$33)|0);
 STACKTOP = sp;return;
}
function _TTypeSpecifier_IsFirst($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = $4;
 switch ($7|0) {
 case 93: case 115: case 112: case 124: case 123: case 122: case 117: case 109: case 91: case 95: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 108: case 86: case 118:  {
  $6 = 1;
  break;
 }
 case 7:  {
  $8 = $3;
  $9 = $5;
  $10 = (_IsTypeName($8,7,$9)|0);
  $11 = ($10|0)!=(0);
  $12 = $11&1;
  $6 = $12;
  break;
 }
 default: {
 }
 }
 $13 = $6;
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _Type_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink$sink$sink = 0, $$sink2 = 0, $$sink2$sink$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $12 = $2;
 $13 = (_Lexeme($12)|0);
 $5 = $13;
 $14 = $2;
 $15 = (_Parser_CurrentToken($14)|0);
 $6 = $15;
 $16 = $6;
 switch ($16|0) {
 case 123: case 122: case 117: case 109: case 91: case 95: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 108: case 86: case 118:  {
  $17 = (_TSingleTypeSpecifier_Create()|0);
  $7 = $17;
  $18 = $6;
  $19 = $7;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = $18;
  $4 = 1;
  $21 = $2;
  $22 = $7;
  $23 = ((($22)) + 12|0);
  (_Parser_Match($21,$23)|0);
  $24 = $7;
  $25 = $3;
  HEAP32[$25>>2] = $24;
  STACKTOP = sp;return;
  break;
 }
 case 124:  {
  $4 = 1;
  $26 = $2;
  $27 = $3;
  _AtomicTypeSpecifier($26,$27);
  STACKTOP = sp;return;
  break;
 }
 case 115: case 112:  {
  $4 = 1;
  $28 = (_TStructUnionSpecifier_Create()|0);
  $8 = $28;
  $29 = $8;
  $30 = $3;
  HEAP32[$30>>2] = $29;
  $31 = $2;
  $32 = $8;
  _Struct_Or_Union_Specifier($31,$32);
  STACKTOP = sp;return;
  break;
 }
 case 93:  {
  $4 = 1;
  $33 = (_TEnumSpecifier_Create()|0);
  $9 = $33;
  $34 = $9;
  $35 = $3;
  HEAP32[$35>>2] = $34;
  $36 = $2;
  $37 = $9;
  _Enum_Specifier($36,$37);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $38 = $2;
  $39 = $5;
  $40 = (_IsTypeName($38,7,$39)|0);
  $10 = $40;
  $41 = $10;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   $64 = $2;
   _SetError($64,3159,$vararg_buffer);
   STACKTOP = sp;return;
  }
  $43 = (_TSingleTypeSpecifier_Create()|0);
  $11 = $43;
  $44 = $10;
  $45 = ($44|0)==(2);
  do {
   if ($45) {
    $46 = $11;
    $$sink$sink$sink = 112;$$sink2$sink$sink = $46;
   } else {
    $47 = $10;
    $48 = ($47|0)==(3);
    if ($48) {
     $49 = $11;
     $$sink$sink$sink = 115;$$sink2$sink$sink = $49;
     break;
    } else {
     $50 = $10;
     $51 = ($50|0)==(4);
     $52 = $6;
     $53 = $11;
     $54 = $11;
     $$sink2 = $51 ? $54 : $53;
     $$sink = $51 ? 93 : $52;
     $$sink$sink$sink = $$sink;$$sink2$sink$sink = $$sink2;
     break;
    }
   }
  } while(0);
  $55 = ((($$sink2$sink$sink)) + 4|0);
  HEAP32[$55>>2] = $$sink$sink$sink;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $58 = $5;
  _String_Set($57,$58);
  $4 = 1;
  $59 = $2;
  $60 = $11;
  $61 = ((($60)) + 12|0);
  (_Parser_Match($59,$61)|0);
  $62 = $11;
  $63 = $3;
  HEAP32[$63>>2] = $62;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _TTypeQualifier_IsFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 124: case 119: case 125: case 87:  {
  $2 = 1;
  break;
 }
 case 83: case 43:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Type_Qualifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = (_Parser_CurrentToken($6)|0);
 $5 = $7;
 $8 = $5;
 switch ($8|0) {
 case 124: case 119: case 125: case 87:  {
  $9 = $5;
  $10 = $3;
  $11 = ((($10)) + 8|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = $3;
  $14 = ((($13)) + 12|0);
  (_Parser_Match($12,$14)|0);
  $4 = 1;
  break;
 }
 case 43:  {
  $15 = $2;
  $16 = $3;
  _Size_Qualifier($15,$16);
  $4 = 1;
  break;
 }
 case 83:  {
  $17 = $5;
  $18 = $3;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $17;
  $20 = $2;
  $21 = $3;
  $22 = ((($21)) + 12|0);
  (_Parser_Match($20,$22)|0);
  $4 = 1;
  break;
 }
 default: {
 }
 }
 $23 = $4;
 $24 = $23&1;
 STACKTOP = sp;return ($24|0);
}
function _TTypeQualifier_As_TSpecifierQualifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _Struct_Declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $5 = sp + 184|0;
 $8 = sp + 164|0;
 $10 = sp + 8|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 $13 = (_Parser_CurrentToken($12)|0);
 $4 = $13;
 $14 = $4;
 $15 = ($14|0)==(36);
 if ($15) {
  $16 = $2;
  (_Parser_Match($16,0)|0);
  HEAP32[$5>>2] = 0;
  $17 = $2;
  _ConstantExpression($17,$5);
  $18 = HEAP32[$5>>2]|0;
  _TExpression_Delete($18);
  STACKTOP = sp;return;
 }
 $19 = (_TInitDeclarator_Create()|0);
 $6 = $19;
 $20 = $6;
 $21 = $3;
 HEAP32[$21>>2] = $20;
 $22 = $2;
 $23 = $6;
 _Declarator($22,0,$23);
 $24 = $2;
 $25 = (_Parser_CurrentToken($24)|0);
 $4 = $25;
 $26 = $4;
 $27 = ($26|0)==(31);
 $28 = $4;
 $29 = ($28|0)==(37);
 $or$cond = $27 | $29;
 if ($or$cond) {
  $30 = $2;
  $31 = ((($30)) + 116|0);
  $32 = (_FindComment($31)|0);
  $7 = $32;
  $33 = $7;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   $35 = $7;
   $36 = ((($35)) + 2|0);
   $37 = $7;
   $38 = (_strlen($37)|0);
   $39 = (($38) - 4)|0;
   (_StrBuilder_AppendN($8,$36,$39)|0);
   $40 = $2;
   $41 = ((($40)) + 16|0);
   $42 = ((($41)) + 4|0);
   $9 = $42;
   $43 = HEAP32[$8>>2]|0;
   (_Parser_InitString($10,3006,$43)|0);
   _StrBuilder_Destroy($8);
   $44 = ((($10)) + 124|0);
   $45 = $2;
   $46 = ((($45)) + 124|0);
   ;HEAP32[$44>>2]=HEAP32[$46>>2]|0;HEAP32[$44+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$46+12>>2]|0;
   $47 = ((($10)) + 124|0);
   $48 = ((($10)) + 140|0);
   HEAP32[$48>>2] = $47;
   $49 = $9;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = ((($10)) + 16|0);
    $52 = ((($51)) + 4|0);
    $53 = $9;
    _MacroMap_Swap($52,$53);
   }
   $54 = $6;
   $55 = ((($54)) + 20|0);
   (_Parser_Match($10,$55)|0);
   $56 = $6;
   $57 = ((($56)) + 4|0);
   _Initializer($10,$57,37,37);
   $58 = $9;
   $59 = ($58|0)!=(0|0);
   if ($59) {
    $60 = ((($10)) + 16|0);
    $61 = ((($60)) + 4|0);
    $62 = $9;
    _MacroMap_Swap($61,$62);
   }
   $63 = ((($10)) + 124|0);
   HEAP32[$63>>2] = 0;
   _Parser_Destroy($10);
  }
 }
 $64 = $4;
 $65 = ($64|0)==(36);
 if ($65) {
  $66 = $2;
  $67 = $6;
  $68 = ((($67)) + 12|0);
  (_Parser_Match($66,$68)|0);
  HEAP32[$11>>2] = 0;
  $69 = $2;
  _ConstantExpression($69,$11);
  $70 = HEAP32[$11>>2]|0;
  _TExpression_Delete($70);
 }
 $71 = $4;
 $72 = ($71|0)==(39);
 if (!($72)) {
  STACKTOP = sp;return;
 }
 $73 = $2;
 $74 = $6;
 $75 = ((($74)) + 20|0);
 (_Parser_Match($73,$75)|0);
 $76 = $2;
 $77 = $6;
 $78 = ((($77)) + 4|0);
 _Initializer($76,$78,37,37);
 $79 = $2;
 $80 = (_Parser_CurrentToken($79)|0);
 $4 = $80;
 STACKTOP = sp;return;
}
function _FindComment($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 while(1) {
  $6 = $3;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $3;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $3;
   $11 = ((($10)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(5);
   if ($13) {
    break;
   }
  }
  $16 = $3;
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $3 = $18;
 }
 if ((label|0) == 7) {
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $2 = $15;
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _StrBuilder_AppendN($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 13|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = (_IsEmptyStr($8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $$expand_i1_val = 1;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $46 = $$pre_trunc&1;
  STACKTOP = sp;return ($46|0);
 }
 $11 = $4;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = (($14) + ($15))|0;
 $17 = (_StrBuilder_Grow($11,$16)|0);
 $18 = $17&1;
 $7 = $18;
 $19 = $7;
 $20 = $19&1;
 $21 = $20&1;
 $22 = ($21|0)==(1);
 if ($22) {
  $23 = $4;
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) + ($27)|0);
  $29 = $5;
  $30 = $6;
  (_strncpy($28,$29,$30)|0);
  $31 = $4;
  $32 = HEAP32[$31>>2]|0;
  $33 = $4;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $6;
  $37 = (($35) + ($36))|0;
  $38 = (($32) + ($37)|0);
  HEAP8[$38>>0] = 0;
  $39 = $6;
  $40 = $4;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39))|0;
  HEAP32[$41>>2] = $43;
 }
 $44 = $7;
 $45 = $44&1;
 $$expand_i1_val2 = $45&1;
 HEAP8[$3>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $46 = $$pre_trunc&1;
 STACKTOP = sp;return ($46|0);
}
function _Initializer($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = (_Parser_CurrentToken($13)|0);
 $8 = $14;
 $15 = $8;
 $16 = ($15|0)==(89);
 if ($16) {
  $17 = (_TInitializerListType_Create()|0);
  $9 = $17;
  $18 = $9;
  $19 = ((($18)) + 36|0);
  HEAP8[$19>>0] = 1;
  $20 = $9;
  $21 = $5;
  HEAP32[$21>>2] = $20;
  $22 = $4;
  $23 = $9;
  $24 = ((($23)) + 12|0);
  (_Parser_Match($22,$24)|0);
  $25 = $4;
  $26 = (_Parser_CurrentToken($25)|0);
  $8 = $26;
  $27 = $8;
  $28 = ($27|0)==(49);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = $4;
  $30 = $9;
  $31 = ((($30)) + 20|0);
  (_Parser_Match($29,$31)|0);
  $32 = $4;
  $33 = $9;
  $34 = ((($33)) + 4|0);
  _Initializer_List($32,$34);
  $35 = $4;
  $36 = $9;
  $37 = ((($36)) + 28|0);
  (_Parser_MatchToken($35,51,$37)|0);
  STACKTOP = sp;return;
 }
 $38 = $8;
 $39 = ($38|0)==(49);
 if (!($39)) {
  HEAP32[$12>>2] = 0;
  $59 = $4;
  _AssignmentExpression($59,$12);
  $60 = HEAP32[$12>>2]|0;
  $61 = $5;
  HEAP32[$61>>2] = $60;
  STACKTOP = sp;return;
 }
 $40 = (_TInitializerListType_Create()|0);
 $10 = $40;
 $41 = $4;
 $42 = ((($41)) + 116|0);
 $43 = (_FindThisComment($42,3208)|0);
 $11 = $43;
 $44 = $11;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $10;
  $47 = ((($46)) + 36|0);
  HEAP8[$47>>0] = 1;
 }
 $48 = $10;
 $49 = $5;
 HEAP32[$49>>2] = $48;
 $50 = $4;
 $51 = $10;
 $52 = ((($51)) + 20|0);
 (_Parser_Match($50,$52)|0);
 $53 = $4;
 $54 = $10;
 $55 = ((($54)) + 4|0);
 _Initializer_List($53,$55);
 $56 = $4;
 $57 = $10;
 $58 = ((($57)) + 28|0);
 (_Parser_MatchToken($56,51,$58)|0);
 STACKTOP = sp;return;
}
function _Struct_Declarator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $6 = $2;
 _Struct_Declarator($6,$4);
 $7 = $3;
 $8 = HEAP32[$4>>2]|0;
 _TStructDeclaratorList_Add($7,$8);
 while(1) {
  $9 = $2;
  $10 = (_ErrorOrEof($9)|0);
  if ($10) {
   label = 9;
   break;
  }
  $11 = $2;
  $12 = (_Parser_CurrentToken($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = ($13|0)==(31);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = HEAP32[$4>>2]|0;
  $17 = ((($16)) + 12|0);
  (_Parser_Match($15,$17)|0);
  $18 = $2;
  $19 = $3;
  _Struct_Declarator_List($18,$19);
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $20 = $5;
 $21 = ($20|0)==(37);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $5;
 $23 = ($22|0)==(51);
 $24 = $2;
 if ($23) {
  _SetError($24,3022,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _SetError($24,3059,$vararg_buffer1);
  STACKTOP = sp;return;
 }
}
function _Struct_Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_Parser_CurrentToken($7)|0);
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)!=(126);
 if (!($10)) {
  $28 = (_TStaticAssertDeclaration_Create()|0);
  $6 = $28;
  $29 = $6;
  $30 = $3;
  HEAP32[$30>>2] = $29;
  $31 = $2;
  $32 = $6;
  _Static_Assert_Declaration($31,$32);
  STACKTOP = sp;return;
 }
 $11 = (_TStructDeclaration_Create()|0);
 $5 = $11;
 $12 = $5;
 $13 = $3;
 HEAP32[$13>>2] = $12;
 $14 = $2;
 $15 = $5;
 $16 = ((($15)) + 4|0);
 _Specifier_Qualifier_List($14,$16);
 $17 = $2;
 $18 = (_Parser_CurrentToken($17)|0);
 $4 = $18;
 $19 = $4;
 $20 = ($19|0)!=(37);
 $21 = $2;
 $22 = $5;
 if ($20) {
  $23 = ((($22)) + 16|0);
  _Struct_Declarator_List($21,$23);
  $24 = $2;
  $25 = $5;
  $26 = ((($25)) + 24|0);
  (_Parser_MatchToken($24,37,$26)|0);
  STACKTOP = sp;return;
 } else {
  $27 = ((($22)) + 24|0);
  (_Parser_MatchToken($21,37,$27)|0);
  STACKTOP = sp;return;
 }
}
function _Struct_Declaration_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_ErrorOrEof($6)|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 HEAP32[$4>>2] = 0;
 $8 = $2;
 _Struct_Declaration($8,$4);
 $9 = $3;
 $10 = HEAP32[$4>>2]|0;
 _TStructDeclarationList_PushBack($9,$10);
 $11 = $2;
 $12 = (_Parser_CurrentToken($11)|0);
 $5 = $12;
 $13 = $5;
 $14 = ($13|0)!=(51);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = $3;
 _Struct_Declaration_List($15,$16);
 STACKTOP = sp;return;
}
function _UnionSetItem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_Parser_CurrentToken($7)|0);
 $4 = $8;
 $9 = $2;
 $10 = (_Lexeme($9)|0);
 $5 = $10;
 $11 = (_TUnionSetItem_Create()|0);
 $6 = $11;
 $12 = $4;
 $13 = ($12|0)==(7);
 if ($13) {
  $14 = $6;
  $15 = ((($14)) + 12|0);
  $16 = $5;
  _String_Set($15,$16);
  $17 = $2;
  $18 = $6;
  $19 = ((($18)) + 24|0);
  (_Parser_Match($17,$19)|0);
  $20 = $3;
  $21 = $6;
  _TUnionSet_PushBack($20,$21);
  STACKTOP = sp;return;
 }
 $22 = $4;
 $23 = ($22|0)==(112);
 $24 = $4;
 $25 = ($24|0)==(115);
 $or$cond = $23 | $25;
 $26 = $2;
 if ($or$cond) {
  $27 = $6;
  $28 = ((($27)) + 16|0);
  (_Parser_Match($26,$28)|0);
  $29 = $6;
  $30 = ((($29)) + 12|0);
  $31 = $5;
  _String_Set($30,$31);
  $32 = $2;
  $33 = $6;
  $34 = ((($33)) + 24|0);
  (_Parser_MatchToken($32,7,$34)|0);
  $35 = $3;
  $36 = $6;
  _TUnionSet_PushBack($35,$36);
  STACKTOP = sp;return;
 } else {
  _SetError($26,3093,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _UnionSetList($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $2;
 $8 = $3;
 _UnionSetItem($7,$8);
 $9 = $2;
 $10 = (_Parser_CurrentToken($9)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(50);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $13;
 $18 = $2;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 32|0);
 (_Parser_Match($18,$22)|0);
 $23 = $2;
 $24 = $3;
 _UnionSetList($23,$24);
 STACKTOP = sp;return;
}
function _UnionSet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_Parser_CurrentToken($6)|0);
 $4 = $7;
 $8 = $2;
 $9 = (_Lexeme($8)|0);
 $5 = $9;
 $10 = $4;
 $11 = ($10|0)==(116);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 (_Parser_Match($12,$14)|0);
 $15 = $2;
 $16 = $3;
 $17 = ((($16)) + 16|0);
 (_Parser_MatchToken($15,27,$17)|0);
 $18 = $2;
 $19 = $3;
 _UnionSetList($18,$19);
 $20 = $2;
 $21 = $3;
 $22 = ((($21)) + 24|0);
 (_Parser_MatchToken($20,28,$22)|0);
 STACKTOP = sp;return;
}
function _Struct_Or_Union_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $7 = sp + 164|0;
 $9 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $11 = $2;
 $12 = $3;
 _Struct_Or_Union($11,$12);
 $13 = $2;
 $14 = (_Parser_CurrentToken($13)|0);
 $4 = $14;
 $15 = $2;
 $16 = (_Lexeme($15)|0);
 $5 = $16;
 $17 = $4;
 $18 = ($17|0)==(116);
 if ($18) {
  $19 = $3;
  $20 = ((($19)) + 24|0);
  HEAP32[$20>>2] = 116;
  $21 = $2;
  $22 = $3;
  $23 = ((($22)) + 28|0);
  _UnionSet($21,$23);
  $24 = $2;
  $25 = (_Parser_CurrentToken($24)|0);
  $4 = $25;
 }
 $26 = $2;
 $27 = (_Parser_CurrentToken($26)|0);
 $4 = $27;
 $28 = $2;
 $29 = (_Lexeme($28)|0);
 $5 = $29;
 $30 = $2;
 $31 = ((($30)) + 116|0);
 $32 = (_FindComment($31)|0);
 $6 = $32;
 $33 = $6;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $3;
  $36 = ((($35)) + 24|0);
  HEAP32[$36>>2] = 116;
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  $37 = $6;
  $38 = ((($37)) + 2|0);
  $39 = $6;
  $40 = (_strlen($39)|0);
  $41 = (($40) - 4)|0;
  (_StrBuilder_AppendN($7,$38,$41)|0);
  $42 = $2;
  $43 = ((($42)) + 16|0);
  $44 = ((($43)) + 4|0);
  $8 = $44;
  $45 = HEAP32[$7>>2]|0;
  (_Parser_InitString($9,3006,$45)|0);
  _StrBuilder_Destroy($7);
  $46 = ((($9)) + 124|0);
  $47 = $2;
  $48 = ((($47)) + 124|0);
  ;HEAP32[$46>>2]=HEAP32[$48>>2]|0;HEAP32[$46+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$46+12>>2]=HEAP32[$48+12>>2]|0;
  $49 = ((($9)) + 124|0);
  $50 = ((($9)) + 140|0);
  HEAP32[$50>>2] = $49;
  $51 = $8;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = ((($9)) + 16|0);
   $54 = ((($53)) + 4|0);
   $55 = $8;
   _MacroMap_Swap($54,$55);
  }
  $56 = (_Parser_CurrentToken($9)|0);
  $10 = $56;
  $57 = $3;
  $58 = ((($57)) + 28|0);
  _UnionSetList($9,$58);
  $59 = $8;
  $60 = ($59|0)!=(0|0);
  if ($60) {
   $61 = ((($9)) + 16|0);
   $62 = ((($61)) + 4|0);
   $63 = $8;
   _MacroMap_Swap($62,$63);
  }
  $64 = ((($9)) + 124|0);
  HEAP32[$64>>2] = 0;
  _Parser_Destroy($9);
 }
 $65 = $4;
 $66 = ($65|0)==(7);
 if ($66) {
  $67 = $3;
  $68 = ((($67)) + 16|0);
  $69 = $5;
  _String_Set($68,$69);
  $70 = $2;
  $71 = $3;
  $72 = ((($71)) + 68|0);
  (_Parser_Match($70,$72)|0);
 }
 $73 = $3;
 $74 = ((($73)) + 16|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = $2;
  $78 = ((($77)) + 140|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $3;
  $81 = ((($80)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $3;
  (_SymbolMap_SetAt($79,$82,$83)|0);
 }
 $84 = $2;
 $85 = (_Parser_CurrentToken($84)|0);
 $4 = $85;
 $86 = $4;
 $87 = ($86|0)==(49);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = $2;
 $89 = $3;
 $90 = ((($89)) + 76|0);
 (_Parser_Match($88,$90)|0);
 $91 = $2;
 $92 = $3;
 $93 = ((($92)) + 4|0);
 _Struct_Declaration_List($91,$93);
 $94 = $2;
 $95 = $3;
 $96 = ((($95)) + 84|0);
 (_Parser_MatchToken($94,51,$96)|0);
 STACKTOP = sp;return;
}
function _SymbolMap_SetAt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)<(1);
  if ($17) {
   $18 = $3;
   $19 = ((($18)) + 4|0);
   HEAP32[$19>>2] = 1000;
  }
  $20 = $3;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22<<2;
  $24 = (_malloc($23)|0);
  $7 = $24;
  $25 = $7;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $7;
   $28 = $3;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30<<2;
   _memset(($27|0),0,($31|0))|0;
   $32 = $7;
   $33 = $3;
   HEAP32[$33>>2] = $32;
  }
 }
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $65 = $6;
  STACKTOP = sp;return ($65|0);
 }
 $37 = $3;
 $38 = $4;
 $39 = (_SymbolMap_GetAssocAt($37,$38,$8,$9)|0);
 $10 = $39;
 $40 = (_malloc(16)|0);
 $10 = $40;
 $41 = HEAP32[$9>>2]|0;
 $42 = $10;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = $41;
 $44 = $5;
 $45 = $10;
 $46 = ((($45)) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $10;
 $48 = ((($47)) + 8|0);
 $49 = $4;
 _String_InitWith($48,$49);
 $50 = $3;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$8>>2]|0;
 $53 = (($51) + ($52<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $10;
 HEAP32[$55>>2] = $54;
 $56 = $10;
 $57 = $3;
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$8>>2]|0;
 $60 = (($58) + ($59<<2)|0);
 HEAP32[$60>>2] = $56;
 $61 = $3;
 $62 = ((($61)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$62>>2] = $64;
 $6 = 0;
 $65 = $6;
 STACKTOP = sp;return ($65|0);
}
function _Enumeration_Constant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Lexeme($5)|0);
 $4 = $6;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = $4;
 _String_Set($8,$9);
 $10 = $2;
 $11 = $3;
 $12 = ((($11)) + 12|0);
 (_Parser_MatchToken($10,7,$12)|0);
 STACKTOP = sp;return;
}
function _EnumeratorC($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = $3;
 _Enumeration_Constant($6,$7);
 $8 = $2;
 $9 = (_Parser_CurrentToken($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(39);
 if (!($11)) {
  $18 = $4;
  $19 = $18&1;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $2;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 (_Parser_Match($12,$14)|0);
 $15 = $2;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 _ConstantExpression($15,$17);
 $4 = 1;
 $18 = $4;
 $19 = $18&1;
 STACKTOP = sp;return ($19|0);
}
function _Enumerator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_ErrorOrEof($6)|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (_TEnumerator_Create()|0);
 $4 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = $4;
 $13 = $3;
 if ($11) {
  HEAP32[$13>>2] = $12;
  $14 = $4;
  $15 = $3;
  $$sink = $14;$$sink2 = $15;
 } else {
  $16 = ((($13)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$17>>2] = $12;
  $18 = $4;
  $19 = $3;
  $$sink = $18;$$sink2 = $19;
 }
 $20 = ((($$sink2)) + 4|0);
 HEAP32[$20>>2] = $$sink;
 $21 = $2;
 $22 = $4;
 (_EnumeratorC($21,$22)|0);
 $23 = $2;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $4;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $4;
 (_SymbolMap_SetAt($25,$28,$29)|0);
 $30 = $2;
 $31 = (_Parser_CurrentToken($30)|0);
 $5 = $31;
 $32 = $5;
 $33 = ($32|0)==(31);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $2;
 $35 = $4;
 $36 = ((($35)) + 28|0);
 (_Parser_Match($34,$36)|0);
 $37 = $2;
 $38 = (_Parser_CurrentToken($37)|0);
 $5 = $38;
 $39 = $4;
 $40 = ((($39)) + 36|0);
 HEAP8[$40>>0] = 1;
 $41 = $5;
 $42 = ($41|0)!=(51);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $43 = $2;
 $44 = $3;
 _Enumerator_List($43,$44);
 STACKTOP = sp;return;
}
function _Enum_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 $9 = ((($8)) + 16|0);
 (_Parser_MatchToken($7,93,$9)|0);
 $10 = $2;
 $11 = (_Parser_CurrentToken($10)|0);
 $4 = $11;
 $12 = $4;
 $13 = ($12|0)==(7);
 if ($13) {
  $14 = $2;
  $15 = (_Lexeme($14)|0);
  $5 = $15;
  $16 = $3;
  $17 = ((($16)) + 4|0);
  $18 = $5;
  _String_Set($17,$18);
  $19 = $2;
  $20 = $3;
  $21 = ((($20)) + 24|0);
  (_Parser_Match($19,$21)|0);
  $22 = $2;
  $23 = ((($22)) + 140|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $3;
  (_SymbolMap_SetAt($24,$27,$28)|0);
 } else {
  $29 = (_GetName()|0);
  $6 = $29;
  $30 = $3;
  $31 = ((($30)) + 4|0);
  $32 = $6;
  _String_Set($31,$32);
  $33 = $2;
  $34 = $3;
  $35 = ((($34)) + 32|0);
  (_Parser_Match($33,$35)|0);
 }
 $36 = $4;
 $37 = ($36|0)==(7);
 if ($37) {
  $38 = $2;
  $39 = (_Parser_CurrentToken($38)|0);
  $4 = $39;
  $40 = $4;
  $41 = ($40|0)==(49);
  if (!($41)) {
   STACKTOP = sp;return;
  }
  $42 = $2;
  $43 = $3;
  $44 = ((($43)) + 32|0);
  (_Parser_Match($42,$44)|0);
  $45 = $2;
  $46 = $3;
  $47 = ((($46)) + 8|0);
  _Enumerator_List($45,$47);
  $48 = $2;
  $49 = $3;
  $50 = ((($49)) + 40|0);
  (_Parser_MatchToken($48,51,$50)|0);
  STACKTOP = sp;return;
 }
 $51 = $4;
 $52 = ($51|0)==(49);
 $53 = $2;
 if ($52) {
  $54 = $3;
  $55 = ((($54)) + 8|0);
  _Enumerator_List($53,$55);
  $56 = $2;
  $57 = $3;
  $58 = ((($57)) + 40|0);
  (_Parser_MatchToken($56,51,$58)|0);
  STACKTOP = sp;return;
 } else {
  _SetError($53,3121,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _TFunctionSpecifier_IsFirst($0) {
 $0 = $0|0;
 var $$ = 0, $$off = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $$off = (($3) + -127)|0;
 $switch = ($$off>>>0)<(4);
 $$ = $switch ? 1 : 0;
 $2 = $$;
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Function_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $4;
 $$off = (($7) + -127)|0;
 $switch = ($$off>>>0)<(4);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 (_Parser_Match($11,$13)|0);
 STACKTOP = sp;return;
}
function _TStorageSpecifier_IsFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 106: case 83: case 121: case 111: case 94: case 114:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Storage_Class_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $4;
 switch ($7|0) {
 case 106: case 83: case 121: case 111: case 94: case 114:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 (_Parser_Match($11,$13)|0);
 STACKTOP = sp;return;
}
function _Parameter_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_Parser_CurrentToken($6)|0);
 $4 = $7;
 $8 = (_TParameter_Create()|0);
 $5 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = $5;
 $13 = $3;
 if ($11) {
  HEAP32[$13>>2] = $12;
  $14 = $5;
  $15 = $3;
  $$sink = $14;$$sink2 = $15;
 } else {
  $16 = ((($13)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$17>>2] = $12;
  $18 = $5;
  $19 = $3;
  $$sink = $18;$$sink2 = $19;
 }
 $20 = ((($$sink2)) + 4|0);
 HEAP32[$20>>2] = $$sink;
 $21 = $2;
 $22 = $5;
 _Parameter_Declaration($21,$22);
 $23 = $2;
 $24 = (_Parser_CurrentToken($23)|0);
 $4 = $24;
 $25 = $4;
 $26 = ($25|0)==(31);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $5;
 $28 = ((($27)) + 44|0);
 HEAP8[$28>>0] = 1;
 $29 = $2;
 $30 = $5;
 $31 = ((($30)) + 36|0);
 (_Parser_Match($29,$31)|0);
 $32 = $2;
 $33 = (_Parser_CurrentToken($32)|0);
 $4 = $33;
 $34 = $4;
 $35 = ($34|0)!=(78);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $2;
 $37 = $3;
 _Parameter_List($36,$37);
 STACKTOP = sp;return;
}
function _Parameter_Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 _Declaration_Specifiers($5,$7);
 HEAP32[$4>>2] = 0;
 $8 = $2;
 _Declarator($8,1,$4);
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$4>>2]|0;
 _TDeclarator_Swap($12,$13);
 $14 = HEAP32[$4>>2]|0;
 _TDeclarator_Delete($14);
 STACKTOP = sp;return;
}
function _Declaration_Specifiers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 20|0;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 $11 = (_Parser_CurrentToken($10)|0);
 $4 = $11;
 $12 = $2;
 $13 = (_Lexeme($12)|0);
 $5 = $13;
 $14 = $4;
 $15 = (_TStorageSpecifier_IsFirst($14)|0);
 do {
  if ($15) {
   $16 = (_TStorageSpecifier_Create()|0);
   $6 = $16;
   $17 = $2;
   $18 = $6;
   _Storage_Class_Specifier($17,$18);
   $19 = $3;
   $20 = $6;
   $21 = (_TStorageSpecifier_As_TDeclarationSpecifier($20)|0);
   _TDeclarationSpecifiers_PushBack($19,$21);
  } else {
   $22 = $2;
   $23 = $4;
   $24 = $5;
   $25 = (_TTypeSpecifier_IsFirst($22,$23,$24)|0);
   if ($25) {
    $26 = $3;
    $27 = $4;
    $28 = $5;
    $29 = (_TDeclarationSpecifiers_CanAddSpeficier($26,$27,$28)|0);
    if ($29) {
     HEAP32[$7>>2] = 0;
     $30 = $2;
     _Type_Specifier($30,$7);
     $31 = $3;
     $32 = HEAP32[$7>>2]|0;
     _TDeclarationSpecifiers_PushBack($31,$32);
     break;
    } else {
     $33 = $2;
     _SetError($33,3176,$vararg_buffer);
     break;
    }
   }
   $34 = $4;
   $35 = (_TTypeQualifier_IsFirst($34)|0);
   if ($35) {
    $36 = (_TTypeQualifier_Create()|0);
    $8 = $36;
    $37 = $2;
    $38 = $8;
    (_Type_Qualifier($37,$38)|0);
    $39 = $3;
    $40 = $8;
    $41 = (_TTypeQualifier_As_TSpecifierQualifier($40)|0);
    _TDeclarationSpecifiers_PushBack($39,$41);
    break;
   }
   $42 = $4;
   $43 = (_TFunctionSpecifier_IsFirst($42)|0);
   if ($43) {
    $44 = (_TFunctionSpecifier_Create()|0);
    $9 = $44;
    $45 = $2;
    $46 = $9;
    _Function_Specifier($45,$46);
    $47 = $3;
    $48 = $9;
    $49 = (_TFunctionSpecifier_As_TDeclarationSpecifier($48)|0);
    _TDeclarationSpecifiers_PushBack($47,$49);
    break;
   }
   $50 = $4;
   $51 = (_TAlignmentSpecifier_IsFirst($50)|0);
   if (!($51)) {
    $52 = $2;
    _SetError($52,3191,$vararg_buffer1);
   }
  }
 } while(0);
 $53 = $2;
 $54 = (_Parser_CurrentToken($53)|0);
 $4 = $54;
 $55 = $2;
 $56 = (_Lexeme($55)|0);
 $5 = $56;
 $57 = $2;
 $58 = $4;
 $59 = $5;
 $60 = (_Declaration_Specifiers_IsFirst($57,$58,$59)|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $3;
 $62 = $4;
 $63 = $5;
 $64 = (_TDeclarationSpecifiers_CanAddSpeficier($61,$62,$63)|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $2;
 $66 = $3;
 _Declaration_Specifiers($65,$66);
 STACKTOP = sp;return;
}
function _Direct_Declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$not = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 4|0;
 $11 = sp;
 $3 = $0;
 $12 = $1&1;
 $4 = $12;
 $5 = $2;
 $13 = $5;
 HEAP32[$13>>2] = 0;
 $6 = 0;
 $14 = $3;
 $15 = (_ErrorOrEof($14)|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $3;
 $17 = (_Parser_CurrentToken($16)|0);
 $7 = $17;
 $18 = $7;
 switch ($18|0) {
 case 27:  {
  $19 = (_TDirectDeclarator_Create()|0);
  $6 = $19;
  $20 = $3;
  $21 = $6;
  $22 = ((($21)) + 56|0);
  (_Parser_MatchToken($20,27,$22)|0);
  $23 = $3;
  $24 = $4;
  $25 = $24&1;
  $26 = $6;
  $27 = ((($26)) + 4|0);
  _Declarator($23,$25,$27);
  $28 = $3;
  $29 = $6;
  $30 = ((($29)) + 64|0);
  (_Parser_MatchToken($28,28,$30)|0);
  $31 = $6;
  $32 = ((($31)) + 52|0);
  HEAP32[$32>>2] = 2;
  break;
 }
 case 7:  {
  $33 = (_TDirectDeclarator_Create()|0);
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 52|0);
  HEAP32[$35>>2] = 1;
  $36 = $3;
  $37 = (_Lexeme($36)|0);
  $8 = $37;
  $38 = $6;
  $39 = $8;
  _String_Set($38,$39);
  $40 = $3;
  $41 = (_GetCurrentLine($40)|0);
  $42 = $6;
  $43 = ((($42)) + 12|0);
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $41;
  $45 = $3;
  $46 = (_GetFileIndex($45)|0);
  $47 = $6;
  $48 = ((($47)) + 12|0);
  HEAP32[$48>>2] = $46;
  $49 = $3;
  $50 = $6;
  $51 = ((($50)) + 56|0);
  (_Parser_Match($49,$51)|0);
  break;
 }
 default: {
 }
 }
 $52 = $6;
 $53 = ($52|0)==(0|0);
 if ($53) {
  $54 = (_TDirectDeclarator_Create()|0);
  $6 = $54;
  $55 = $6;
  _String_Set($55,9460);
  $56 = $3;
  $57 = (_GetCurrentLine($56)|0);
  $58 = $6;
  $59 = ((($58)) + 12|0);
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = $57;
  $61 = $3;
  $62 = (_GetFileIndex($61)|0);
  $63 = $6;
  $64 = ((($63)) + 12|0);
  HEAP32[$64>>2] = $62;
  $65 = $6;
  $66 = ((($65)) + 52|0);
  HEAP32[$66>>2] = 1;
 }
 $67 = $6;
 $68 = $5;
 HEAP32[$68>>2] = $67;
 while(1) {
  $69 = $3;
  $70 = (_Parser_CurrentToken($69)|0);
  $7 = $70;
  $71 = $7;
  switch ($71|0) {
  case 27:  {
   $72 = $3;
   $73 = $6;
   $74 = ((($73)) + 72|0);
   $75 = (_Parser_MatchToken($72,27,$74)|0);
   $7 = $75;
   $76 = $6;
   $77 = ((($76)) + 52|0);
   HEAP32[$77>>2] = 3;
   $78 = $7;
   $79 = ($78|0)!=(28);
   if ($79) {
    $80 = $3;
    $81 = $6;
    $82 = ((($81)) + 20|0);
    _Parameter_Type_List($80,$82);
   }
   $83 = $3;
   $84 = $6;
   $85 = ((($84)) + 80|0);
   (_Parser_MatchToken($83,28,$85)|0);
   break;
  }
  case 43:  {
   $86 = $6;
   $87 = ((($86)) + 52|0);
   HEAP32[$87>>2] = 4;
   $88 = $3;
   $89 = $6;
   $90 = ((($89)) + 72|0);
   $91 = (_Parser_MatchToken($88,43,$90)|0);
   $7 = $91;
   $92 = $7;
   $93 = ($92|0)!=(111);
   $94 = $7;
   $95 = ($94|0)!=(45);
   $or$cond5 = $93 & $95;
   if ($or$cond5) {
    $96 = $3;
    $97 = $6;
    $98 = ((($97)) + 48|0);
    _AssignmentExpression($96,$98);
   }
   $99 = $3;
   $100 = $6;
   $101 = ((($100)) + 80|0);
   (_Parser_MatchToken($99,45,$101)|0);
   break;
  }
  default: {
  }
  }
  $102 = $3;
  $103 = (_Parser_CurrentToken($102)|0);
  $7 = $103;
  $104 = $7;
  $105 = ($104|0)!=(27);
  $106 = $7;
  $107 = ($106|0)!=(43);
  $or$cond = $105 & $107;
  if ($or$cond) {
   break;
  }
  $108 = (_TDirectDeclarator_Create()|0);
  $9 = $108;
  $109 = $9;
  $110 = $6;
  $111 = ((($110)) + 8|0);
  HEAP32[$111>>2] = $109;
  $112 = $9;
  $6 = $112;
 }
 $113 = $3;
 $114 = (_Parser_CurrentToken($113)|0);
 $7 = $114;
 $115 = $7;
 $116 = ($115|0)==(27);
 if ($116) {
  HEAP32[$10>>2] = 0;
  $117 = $3;
  $118 = $4;
  $119 = $118&1;
  _Direct_Declarator($117,$119,$10);
  $120 = HEAP32[$10>>2]|0;
  $121 = $6;
  $122 = ((($121)) + 8|0);
  HEAP32[$122>>2] = $120;
  STACKTOP = sp;return;
 }
 $123 = $4;
 $124 = $123&1;
 $$not = $124 ^ 1;
 $125 = $7;
 $126 = ($125|0)==(7);
 $or$cond3 = $$not & $126;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$11>>2] = 0;
 $127 = $3;
 $128 = $4;
 $129 = $128&1;
 _Direct_Declarator($127,$129,$11);
 $130 = HEAP32[$11>>2]|0;
 $131 = $6;
 $132 = ((($131)) + 8|0);
 HEAP32[$132>>2] = $130;
 STACKTOP = sp;return;
}
function _Size_Qualifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = $2;
 $11 = $3;
 $12 = ((($11)) + 12|0);
 $13 = (_Parser_MatchToken($10,43,$12)|0);
 $4 = $13;
 $14 = $4;
 $cond = ($14|0)==(7);
 if (!($cond)) {
  $21 = $2;
  $22 = (_Parser_MatchToken($21,45,0)|0);
  $4 = $22;
  STACKTOP = sp;return;
 }
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = $2;
 $18 = (_Lexeme($17)|0);
 _String_Set($16,$18);
 $19 = $2;
 $20 = (_Parser_MatchToken($19,7,0)|0);
 $4 = $20;
 $21 = $2;
 $22 = (_Parser_MatchToken($21,45,0)|0);
 $4 = $22;
 STACKTOP = sp;return;
}
function _Type_Qualifier_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_TTypeQualifier_Create()|0);
 $4 = $5;
 $6 = $2;
 $7 = $4;
 (_Type_Qualifier($6,$7)|0);
 $8 = $3;
 $9 = $4;
 _TTypeQualifierList_PushBack($8,$9);
 $10 = $2;
 $11 = (_Parser_CurrentToken($10)|0);
 $12 = (_IsTypeQualifierToken($11)|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $3;
 _Type_Qualifier_List($13,$14);
 STACKTOP = sp;return;
}
function _IsTypeQualifierToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 124: case 119: case 125: case 87:  {
  $2 = 1;
  break;
 }
 case 43: case 83:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Pointer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer = sp;
 $7 = sp + 164|0;
 $9 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $11 = (_TPointer_Create()|0);
 $4 = $11;
 $12 = $2;
 $13 = (_Parser_CurrentToken($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = ($14|0)==(29);
 if ($15) {
  $16 = $3;
  $17 = $4;
  _TPointerList_PushBack($16,$17);
  $18 = $2;
  $19 = $4;
  $20 = ((($19)) + 24|0);
  (_Parser_Match($18,$20)|0);
 } else {
  $21 = $2;
  _SetError($21,3145,$vararg_buffer);
 }
 $22 = $2;
 $23 = (_Parser_CurrentToken($22)|0);
 $5 = $23;
 $24 = $2;
 $25 = ((($24)) + 116|0);
 $26 = (_FindComment($25)|0);
 $6 = $26;
 $27 = $6;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  $29 = $6;
  $30 = ((($29)) + 2|0);
  $31 = $6;
  $32 = (_strlen($31)|0);
  $33 = (($32) - 4)|0;
  (_StrBuilder_AppendN($7,$30,$33)|0);
  $34 = $2;
  $35 = ((($34)) + 16|0);
  $36 = ((($35)) + 4|0);
  $8 = $36;
  $37 = HEAP32[$7>>2]|0;
  (_Parser_InitString($9,3006,$37)|0);
  _StrBuilder_Destroy($7);
  $38 = ((($9)) + 124|0);
  $39 = $2;
  $40 = ((($39)) + 124|0);
  ;HEAP32[$38>>2]=HEAP32[$40>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$40+12>>2]|0;
  $41 = ((($9)) + 124|0);
  $42 = ((($9)) + 140|0);
  HEAP32[$42>>2] = $41;
  $43 = $8;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   $45 = ((($9)) + 16|0);
   $46 = ((($45)) + 4|0);
   $47 = $8;
   _MacroMap_Swap($46,$47);
  }
  $48 = (_Parser_CurrentToken($9)|0);
  $10 = $48;
  $49 = $10;
  $50 = (_IsTypeQualifierToken($49)|0);
  if ($50) {
   $51 = $4;
   _Type_Qualifier_List($9,$51);
  }
  $52 = $8;
  $53 = ($52|0)!=(0|0);
  if ($53) {
   $54 = ((($9)) + 16|0);
   $55 = ((($54)) + 4|0);
   $56 = $8;
   _MacroMap_Swap($55,$56);
  }
  $57 = ((($9)) + 124|0);
  HEAP32[$57>>2] = 0;
  _Parser_Destroy($9);
 }
 $58 = $5;
 $59 = (_IsTypeQualifierToken($58)|0);
 if ($59) {
  $60 = $2;
  $61 = $4;
  _Type_Qualifier_List($60,$61);
 }
 $62 = $2;
 $63 = (_Parser_CurrentToken($62)|0);
 $5 = $63;
 $64 = $5;
 $65 = ($64|0)==(29);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $2;
 $67 = $3;
 _Pointer($66,$67);
 STACKTOP = sp;return;
}
function _TAlignmentSpecifier_IsFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(131);
 STACKTOP = sp;return ($3|0);
}
function _AtomicTypeSpecifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_TAtomicTypeSpecifier_Create()|0);
 $4 = $5;
 $6 = $4;
 $7 = (_TAtomicTypeSpecifier_As_TTypeSpecifier($6)|0);
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = $4;
 $11 = ((($10)) + 40|0);
 (_Parser_MatchToken($9,124,$11)|0);
 $12 = $2;
 $13 = $4;
 $14 = ((($13)) + 48|0);
 (_Parser_MatchToken($12,27,$14)|0);
 $15 = $2;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 _TypeName($15,$17);
 $18 = $2;
 $19 = $4;
 $20 = ((($19)) + 56|0);
 (_Parser_MatchToken($18,28,$20)|0);
 STACKTOP = sp;return;
}
function _TAtomicTypeSpecifier_As_TTypeSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _Declaration_Specifiers_IsFirst($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = (_TStorageSpecifier_IsFirst($7)|0);
 if ($8) {
  $20 = 1;
 } else {
  $9 = $3;
  $10 = $4;
  $11 = $5;
  $12 = (_TTypeSpecifier_IsFirst($9,$10,$11)|0);
  if ($12) {
   $20 = 1;
  } else {
   $13 = $4;
   $14 = (_TTypeQualifier_IsFirst($13)|0);
   if ($14) {
    $20 = 1;
   } else {
    $15 = $4;
    $16 = (_TFunctionSpecifier_IsFirst($15)|0);
    if ($16) {
     $20 = 1;
    } else {
     $17 = $4;
     $18 = (_TFunctionSpecifier_IsFirst($17)|0);
     $20 = $18;
    }
   }
  }
 }
 $19 = $20&1;
 $6 = $19;
 $21 = $6;
 $22 = $21&1;
 STACKTOP = sp;return ($22|0);
}
function _TStorageSpecifier_As_TDeclarationSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _TFunctionSpecifier_As_TDeclarationSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _FindThisComment($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $5 = $7;
 while(1) {
  $8 = $5;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 8;
   break;
  }
  $10 = $5;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $5;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(5);
   if ($15) {
    $16 = $5;
    $17 = HEAP32[$16>>2]|0;
    $18 = $3;
    $19 = (_strcmp($17,$18)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     break;
    }
   }
  }
  $23 = $5;
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $5 = $25;
 }
 if ((label|0) == 8) {
  $26 = $4;
  STACKTOP = sp;return ($26|0);
 }
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $4 = $22;
 $26 = $4;
 STACKTOP = sp;return ($26|0);
}
function _Designation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Designator_List($4,$5);
 $6 = $2;
 (_Parser_MatchToken($6,39,0)|0);
 STACKTOP = sp;return;
}
function _Designator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_TDesignator_Create()|0);
 $4 = $7;
 $8 = $2;
 $9 = $4;
 _Designator($8,$9);
 $10 = $3;
 $11 = $4;
 _TDesignatorList_PushBack($10,$11);
 while(1) {
  $12 = $2;
  $13 = (_ErrorOrEof($12)|0);
  if ($13) {
   label = 8;
   break;
  }
  $14 = $2;
  $15 = (_Parser_CurrentToken($14)|0);
  $5 = $15;
  $16 = $5;
  $17 = ($16|0)==(43);
  $18 = $5;
  $19 = ($18|0)==(34);
  $or$cond = $17 | $19;
  if (!($or$cond)) {
   label = 8;
   break;
  }
  $20 = (_TDesignator_Create()|0);
  $6 = $20;
  $21 = $2;
  $22 = $6;
  _Designator($21,$22);
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  $26 = $6;
  $27 = $3;
  if ($25) {
   HEAP32[$27>>2] = $26;
   $28 = $6;
   $29 = $3;
   $$sink = $28;$$sink3 = $29;
  } else {
   $30 = ((($27)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = $26;
   $33 = $6;
   $34 = $3;
   $$sink = $33;$$sink3 = $34;
  }
  $35 = ((($$sink3)) + 4|0);
  HEAP32[$35>>2] = $$sink;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _Designator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentToken($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)==(43);
 if ($8) {
  $9 = $2;
  $10 = $3;
  $11 = ((($10)) + 12|0);
  (_Parser_Match($9,$11)|0);
  $12 = $2;
  $13 = $3;
  $14 = ((($13)) + 4|0);
  _ConstantExpression($12,$14);
  $15 = $2;
  $16 = $3;
  $17 = ((($16)) + 20|0);
  (_Parser_Match($15,$17)|0);
  $18 = $2;
  (_Parser_MatchToken($18,45,0)|0);
  STACKTOP = sp;return;
 }
 $19 = $4;
 $20 = ($19|0)==(34);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = $3;
 $23 = ((($22)) + 12|0);
 (_Parser_Match($21,$23)|0);
 $24 = $3;
 $25 = $2;
 $26 = (_Lexeme($25)|0);
 _String_Set($24,$26);
 $27 = $2;
 (_Parser_MatchToken($27,7,0)|0);
 STACKTOP = sp;return;
}
function _Init_Declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_TInitDeclarator_Create()|0);
 $4 = $7;
 $8 = $2;
 $9 = $4;
 _Declarator($8,0,$9);
 $10 = $2;
 $11 = (_Parser_CurrentToken($10)|0);
 $5 = $11;
 $12 = $4;
 $13 = (_TInitDeclarator_FindName($12)|0);
 $6 = $13;
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 140|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $6;
  $20 = $4;
  (_SymbolMap_SetAt($18,$19,$20)|0);
 }
 $21 = $4;
 $22 = $3;
 HEAP32[$22>>2] = $21;
 $23 = $5;
 $24 = ($23|0)==(39);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $2;
 $26 = $4;
 $27 = ((($26)) + 12|0);
 (_Parser_Match($25,$27)|0);
 $28 = $2;
 $29 = $4;
 $30 = ((($29)) + 4|0);
 _Initializer($28,$30,37,37);
 STACKTOP = sp;return;
}
function _Init_Declarator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $6 = $2;
 _Init_Declarator($6,$4);
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = HEAP32[$4>>2]|0;
 $11 = $3;
 if ($9) {
  HEAP32[$11>>2] = $10;
  $12 = HEAP32[$4>>2]|0;
  $13 = $3;
  $$sink = $12;$$sink2 = $13;
 } else {
  $14 = ((($11)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = $10;
  $17 = HEAP32[$4>>2]|0;
  $18 = $3;
  $$sink = $17;$$sink2 = $18;
 }
 $19 = ((($$sink2)) + 4|0);
 HEAP32[$19>>2] = $$sink;
 $20 = $2;
 $21 = (_Parser_CurrentToken($20)|0);
 $5 = $21;
 $22 = $5;
 $23 = ($22|0)==(31);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $2;
 $25 = HEAP32[$4>>2]|0;
 $26 = ((($25)) + 12|0);
 (_Parser_Match($24,$26)|0);
 $27 = $2;
 $28 = $3;
 _Init_Declarator_List($27,$28);
 STACKTOP = sp;return;
}
function _GroupDeclaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_TGroupDeclaration_Create()|0);
 $4 = $6;
 $7 = $4;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = $4;
 $11 = ((($10)) + 20|0);
 (_Parser_Match($9,$11)|0);
 $12 = $4;
 $13 = ((($12)) + 16|0);
 $14 = $2;
 $15 = (_Lexeme($14)|0);
 _String_Set($13,$15);
 $16 = $2;
 $17 = $4;
 $18 = ((($17)) + 28|0);
 (_Parser_MatchToken($16,7,$18)|0);
 $19 = $2;
 $20 = $4;
 $21 = ((($20)) + 36|0);
 (_Parser_MatchToken($19,49,$21)|0);
 $22 = $2;
 $23 = (_Parser_CurrentToken($22)|0);
 $5 = $23;
 $24 = $5;
 $25 = ($24|0)!=(51);
 if (!($25)) {
  $29 = $2;
  (_Parser_MatchToken($29,51,0)|0);
  STACKTOP = sp;return;
 }
 $26 = $2;
 $27 = $4;
 $28 = ((($27)) + 4|0);
 _Parse_Declarations($26,$28);
 $29 = $2;
 (_Parser_MatchToken($29,51,0)|0);
 STACKTOP = sp;return;
}
function _Parse_Declarations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $8 = $2;
  $9 = (_ErrorOrEof($8)|0);
  $10 = $9 ^ 1;
  if (!($10)) {
   break;
  }
  HEAP32[$5>>2] = 0;
  $11 = $2;
  $12 = (_Declaration($11,$5)|0);
  $13 = $12&1;
  $6 = $13;
  $14 = $6;
  $15 = $14&1;
  if (!($15)) {
   label = 5;
   break;
  }
  $16 = $3;
  $17 = HEAP32[$5>>2]|0;
  _TDeclarations_PushBack($16,$17);
  $18 = $4;
  $19 = (($18) + 1)|0;
  $4 = $19;
  $20 = $2;
  $21 = (_Parser_CurrentToken($20)|0);
  $22 = ($21|0)==(2);
  if ($22) {
   break;
  }
  $27 = $2;
  $28 = (_Parser_HasError($27)|0);
  if ($28) {
   break;
  }
 }
 if ((label|0) == 5) {
  $23 = $2;
  $24 = (_Parser_CurrentToken($23)|0);
  $25 = ($24|0)==(2);
  if ($25) {
   $26 = $2;
   (_Parser_Match($26,0)|0);
  }
 }
 $29 = $2;
 $30 = (_Parser_CurrentToken($29)|0);
 $31 = ($30|0)==(2);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = (_TEofDeclaration_Create()|0);
 $7 = $32;
 $33 = $2;
 $34 = $7;
 $35 = ((($34)) + 4|0);
 (_Parser_Match($33,$35)|0);
 $36 = $3;
 $37 = $7;
 _TDeclarations_PushBack($36,$37);
 STACKTOP = sp;return;
}
function _Parser_Main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Parse_Declarations($4,$5);
 STACKTOP = sp;return;
}
function _TFileMapToStrArray($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _TFileArray_Reserve($9,$12);
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 $4 = 0;
 while(1) {
  $18 = $4;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $5 = $27;
  $28 = $5;
  $29 = ($28|0)!=(0|0);
  L4: do {
   if ($29) {
    $6 = 0;
    while(1) {
     $30 = $6;
     $31 = $5;
     $32 = ((($31)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($30|0)<($33|0);
     if (!($34)) {
      break L4;
     }
     $35 = $5;
     $36 = HEAP32[$35>>2]|0;
     $37 = $6;
     $38 = (($36) + ($37<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $7 = $39;
     $40 = $7;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $8 = $42;
     $43 = $8;
     $44 = ((($43)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)>=(0);
     if ($46) {
      $47 = $8;
      $48 = ((($47)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = $3;
      $51 = ((($50)) + 4|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($49|0)<($52|0);
      if ($53) {
       $54 = $8;
       $55 = $3;
       $56 = HEAP32[$55>>2]|0;
       $57 = $8;
       $58 = ((($57)) + 8|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (($56) + ($59<<2)|0);
       HEAP32[$60>>2] = $54;
       $61 = $7;
       $62 = ((($61)) + 4|0);
       HEAP32[$62>>2] = 0;
      }
     }
     $63 = $6;
     $64 = (($63) + 1)|0;
     $6 = $64;
    }
   }
  } while(0);
  $65 = $4;
  $66 = (($65) + 1)|0;
  $4 = $66;
 }
 STACKTOP = sp;return;
}
function _SymbolMap_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _Scanner_PrintDebug($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(3258,$vararg_buffer)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $9;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $13;
  (_printf(3276,$vararg_buffer1)|0);
  $14 = $2;
  $15 = ((($14)) + 88|0);
  $16 = HEAP32[$15>>2]|0;
  $2 = $16;
 }
 (_printf(3285,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _IsFullPath($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = $2;
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)>=(97);
   if ($9) {
    $10 = $2;
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)<=(122);
    if (!($13)) {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $14 = $2;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($16|0)>=(65);
    if (!($17)) {
     break;
    }
    $18 = $2;
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = ($20|0)<=(90);
    if (!($21)) {
     break;
    }
   }
   $22 = $2;
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(58);
   if ($26) {
    $27 = $2;
    $28 = ((($27)) + 2|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)==(92);
    if ($31) {
     $32 = $2;
     $33 = ((($32)) + 2|0);
     $3 = $33;
     while(1) {
      $34 = $3;
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)!=(0);
      if (!($36)) {
       label = 14;
       break;
      }
      $37 = $3;
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = ($39|0)==(46);
      if ($40) {
       $41 = $3;
       $42 = ((($41)) + -1|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $43 << 24 >> 24;
       $45 = ($44|0)==(92);
       if ($45) {
        label = 12;
        break;
       }
      }
      $46 = $3;
      $47 = ((($46)) + 1|0);
      $3 = $47;
     }
     if ((label|0) == 12) {
      $$expand_i1_val = 0;
      HEAP8[$1>>0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$1>>0]|0;
      $48 = $$pre_trunc&1;
      STACKTOP = sp;return ($48|0);
     }
     else if ((label|0) == 14) {
      $$expand_i1_val2 = 1;
      HEAP8[$1>>0] = $$expand_i1_val2;
      $$pre_trunc = HEAP8[$1>>0]|0;
      $48 = $$pre_trunc&1;
      STACKTOP = sp;return ($48|0);
     }
    }
   }
  }
 } while(0);
 $$expand_i1_val4 = 0;
 HEAP8[$1>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $48 = $$pre_trunc&1;
 STACKTOP = sp;return ($48|0);
}
function _FileExists($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = (_fopen($4,3227)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $2 = 1;
  $8 = $3;
  (_fclose($8)|0);
 }
 $9 = $2;
 $10 = $9&1;
 STACKTOP = sp;return ($10|0);
}
function _String_Attach($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $3;
 $7 = $2;
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _StrBuilder_Release($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $7 = $1;
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _PPToken_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _PPToken_Delete($2);
 STACKTOP = sp;return;
}
function _TokenToPPToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 6;
 $3 = $1;
 switch ($3|0) {
 case 7: case 134: case 133: case 132: case 131: case 130: case 129: case 128: case 127: case 126: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 115: case 114: case 113: case 112: case 111: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 94: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85: case 84: case 83:  {
  $2 = 0;
  break;
 }
 case 8: case 5: case 4:  {
  $2 = 5;
  break;
 }
 case 12: case 9: case 10:  {
  $2 = 1;
  break;
 }
 case 82:  {
  $2 = 2;
  break;
 }
 case 6:  {
  $2 = 3;
  break;
 }
 case 52: case 51: case 50: case 49: case 48: case 47: case 46: case 45: case 44: case 43: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34: case 33: case 32: case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 81: case 80: case 79: case 78: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 70: case 69: case 68: case 67: case 66: case 65: case 64: case 63: case 62: case 61: case 60: case 59: case 58: case 57: case 56: case 55: case 54: case 53:  {
  $2 = 4;
  break;
 }
 default: {
  $2 = 4;
 }
 }
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _TFile_Create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(16)|0);
 $0 = $1;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $4 = $0;
 _String_Init($4);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 _String_Init($6);
 $7 = $0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 HEAP8[$10>>0] = 0;
 $11 = $0;
 $12 = ((($11)) + 13|0);
 HEAP8[$12>>0] = 0;
 $13 = $0;
 $14 = ((($13)) + 14|0);
 HEAP8[$14>>0] = 0;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _TFile_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _String_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 4|0);
 _String_Destroy($4);
 STACKTOP = sp;return;
}
function _TFile_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _TFile_Destroy($4);
  $5 = $1;
  _free($5);
 }
 STACKTOP = sp;return;
}
function _TFile_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TFile_Delete($2);
 STACKTOP = sp;return;
}
function _TFileMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Map_Destroy($2,9);
 STACKTOP = sp;return;
}
function _TFileArray_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TFileMap_Set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = (_Map_Set($12,$13,$14)|0);
 $16 = $15&1;
 $6 = $16;
 $17 = $5;
 $18 = $4;
 _String_Set($17,$18);
 $19 = $6;
 $20 = $19&1;
 STACKTOP = sp;return ($20|0);
}
function _TFileMap_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_Map_Find2($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _IsIncludeState($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0);
 $4 = $1;
 $5 = ($4|0)==(1);
 $or$cond = $3 | $5;
 if ($or$cond) {
  $8 = 1;
 } else {
  $6 = $1;
  $7 = ($6|0)==(4);
  $8 = $7;
 }
 STACKTOP = sp;return ($8|0);
}
function _StackInts_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _StackInts_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _StackInts_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function _StackInts_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _StackInts_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $$ = $18 ? 1 : $16;
  $4 = $$;
  $19 = $2;
  $20 = $4;
  _StackInts_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _StateTop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $1 = 0;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $8 = $2;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 16|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = (($10) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _StatePush($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = $3;
 _StackInts_PushBack($5,$6);
 STACKTOP = sp;return;
}
function _StatePop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 _StackInts_Pop($3);
 STACKTOP = sp;return;
}
function _Scanner_Top($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _Scanner_SetError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 88|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 88|0);
 HEAP8[$10>>0] = 1;
 $11 = $2;
 $12 = (_Scanner_Top($11)|0);
 $13 = ($12|0)!=(0|0);
 $14 = $2;
 $15 = ((($14)) + 76|0);
 if ($13) {
  $16 = $2;
  $17 = (_Scanner_Top($16)|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = (_Scanner_Top($20)|0);
  $22 = ((($21)) + 4|0);
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  _StrBuilder_AppendFmt($15,3243,$vararg_buffer);
 } else {
  (_StrBuilder_Append($15,3252)|0);
 }
 HEAP32[$4>>2] = $varargs;
 $25 = $2;
 $26 = ((($25)) + 76|0);
 $27 = $3;
 _StrBuilder_AppendFmtV($26,$27,$4);
 STACKTOP = sp;return;
}
function _Scanner_InitCore($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 92|0);
 _TScannerItemList_Init($3);
 $4 = $1;
 $5 = ((($4)) + 28|0);
 (_Map_Init($5,100)|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 _MacroMap_Init($7);
 $8 = $1;
 $9 = ((($8)) + 64|0);
 _StrBuilder_Init($9);
 $10 = $1;
 $11 = ((($10)) + 76|0);
 _StrBuilder_Init($11);
 $12 = $1;
 $13 = ((($12)) + 88|0);
 HEAP8[$13>>0] = 0;
 $14 = $1;
 $15 = ((($14)) + 16|0);
 _StackInts_Init($15);
 $16 = $1;
 _BasicScannerStack_Init($16);
 $17 = $1;
 $18 = ((($17)) + 40|0);
 _StrArray_Init($18);
 $19 = $1;
 $20 = ((($19)) + 52|0);
 _StrArray_Init($20);
 $21 = $1;
 (_AddStandardMacro($21,6078,2741)|0);
 $22 = $1;
 (_AddStandardMacro($22,6087,6096)|0);
 $23 = $1;
 (_AddStandardMacro($23,6107,6116)|0);
 $24 = $1;
 (_AddStandardMacro($24,6127,6136)|0);
 $25 = $1;
 (_AddStandardMacro($25,6147,2753)|0);
 $26 = $1;
 (_AddStandardMacro($26,6156,2741)|0);
 $27 = $1;
 _Scanner_PushToken($27,1,9460,1);
 STACKTOP = sp;return 1;
}
function _PushExpandedMacro($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 17|0;
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 88|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 if ($12) {
  $$expand_i1_val = 0;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $13 = $5;
 $14 = $6;
 $15 = (_BasicScanner_Create($7,$13,$14,0)|0);
 $16 = $15&1;
 $8 = $16;
 $17 = $8;
 $18 = $17&1;
 $19 = $18&1;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = HEAP32[$7>>2]|0;
  $22 = ((($21)) + 77|0);
  HEAP8[$22>>0] = 1;
  $23 = HEAP32[$7>>2]|0;
  _BasicScanner_Match($23);
  $24 = $4;
  $25 = HEAP32[$7>>2]|0;
  _BasicScannerStack_Push($24,$25);
 }
 $26 = $8;
 $27 = $26&1;
 $$expand_i1_val2 = $27&1;
 HEAP8[$3>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function _Scanner_GetFullPath($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 57|0;
 $10 = sp + 28|0;
 $13 = sp + 20|0;
 $15 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $19 = $2&1;
 $7 = $19;
 $8 = $3;
 $20 = $5;
 $21 = ((($20)) + 88|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 if ($23) {
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 $9 = 0;
 $24 = $7;
 $25 = $24&1;
 do {
  if ($25) {
   $26 = $6;
   $27 = (_IsFullPath($26)|0);
   if ($27) {
    $9 = 1;
    $28 = $8;
    $29 = $6;
    _String_Set($28,$29);
    break;
   }
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if (!($32)) {
    _String_InitWith($13,0);
    $52 = $6;
    _GetFullPath($52,$13);
    $53 = HEAP32[$13>>2]|0;
    $54 = (_FileExists($53)|0);
    $55 = $54&1;
    $14 = $55;
    $56 = $14;
    $57 = $56&1;
    if ($57) {
     $58 = $8;
     _String_Swap($13,$58);
     $9 = 1;
    }
    _String_Destroy($13);
    break;
   }
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $33 = $5;
   $34 = HEAP32[$33>>2]|0;
   $11 = $34;
   while(1) {
    $35 = $11;
    $36 = ($35|0)!=(0|0);
    if (!($36)) {
     break;
    }
    $37 = $11;
    $38 = ((($37)) + 4|0);
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    (_StrBuilder_Set($10,$40)|0);
    $41 = $6;
    (_StrBuilder_Append($10,$41)|0);
    $42 = HEAP32[$10>>2]|0;
    $43 = (_FileExists($42)|0);
    $44 = $43&1;
    $12 = $44;
    $45 = $12;
    $46 = $45&1;
    if ($46) {
     label = 10;
     break;
    }
    $49 = $11;
    $50 = ((($49)) + 88|0);
    $51 = HEAP32[$50>>2]|0;
    $11 = $51;
   }
   if ((label|0) == 10) {
    $47 = HEAP32[$10>>2]|0;
    $48 = $8;
    _GetFullPath($47,$48);
    $9 = 1;
   }
   _StrBuilder_Destroy($10);
  }
 } while(0);
 $59 = $9;
 $60 = $59&1;
 if (!($60)) {
  ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
  $16 = 0;
  while(1) {
   $61 = $16;
   $62 = $5;
   $63 = ((($62)) + 40|0);
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($61|0)<($65|0);
   if (!($66)) {
    break;
   }
   $67 = $5;
   $68 = ((($67)) + 40|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $16;
   $71 = (($69) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $17 = $72;
   $73 = $17;
   (_StrBuilder_Set($15,$73)|0);
   (_StrBuilder_Append($15,1758)|0);
   $74 = $6;
   (_StrBuilder_Append($15,$74)|0);
   $75 = HEAP32[$15>>2]|0;
   $76 = (_FileExists($75)|0);
   $77 = $76&1;
   $18 = $77;
   $78 = $18;
   $79 = $78&1;
   if ($79) {
    label = 20;
    break;
   }
   $82 = $16;
   $83 = (($82) + 1)|0;
   $16 = $83;
  }
  if ((label|0) == 20) {
   $80 = $8;
   $81 = HEAP32[$15>>2]|0;
   _String_Set($80,$81);
   $9 = 1;
  }
  _StrBuilder_Destroy($15);
 }
 $84 = $9;
 $85 = $84&1;
 $$expand_i1_val2 = $85&1;
 HEAP8[$4>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$4>>0]|0;
 $86 = $$pre_trunc&1;
 STACKTOP = sp;return ($86|0);
}
function _Scanner_PushToken($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $3&1;
 $7 = $9;
 $10 = $4;
 $11 = ((($10)) + 88|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (_ScannerItem_Create()|0);
 $8 = $14;
 $15 = $8;
 $16 = $6;
 _LocalStrBuilder_Set($15,$16);
 $17 = $5;
 $18 = $8;
 $19 = ((($18)) + 20|0);
 HEAP32[$19>>2] = $17;
 $20 = $7;
 $21 = $20&1;
 $22 = $8;
 $23 = ((($22)) + 32|0);
 $24 = $21&1;
 HEAP8[$23>>0] = $24;
 $25 = $4;
 $26 = ((($25)) + 92|0);
 $27 = $8;
 _TScannerItemList_PushBack($26,$27);
 STACKTOP = sp;return;
}
function _IgnorePreProcessorv2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $2;
  $5 = ((($4)) + 36|0);
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(2);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $2;
  $10 = ((($9)) + 36|0);
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(150);
  if (!($13)) {
   label = 7;
   break;
  }
  $14 = $2;
  $15 = ((($14)) + 36|0);
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(14);
  if ($18) {
   label = 5;
   break;
  }
  $20 = $3;
  $21 = $2;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  (_StrBuilder_Append($20,$23)|0);
  $24 = $2;
  _BasicScanner_Match($24);
 }
 if ((label|0) == 5) {
  $19 = $2;
  _BasicScanner_Match($19);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _GetDefineString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $5 = $2;
  $6 = (_Scanner_Top($5)|0);
  $7 = ((($6)) + 36|0);
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $4 = $9;
  $10 = $4;
  $11 = ($10|0)==(2);
  $12 = $4;
  $13 = ($12|0)==(14);
  $or$cond3 = $11 | $13;
  if ($or$cond3) {
   break;
  }
  $14 = $4;
  $15 = ($14|0)==(5);
  $16 = $4;
  $17 = ($16|0)==(4);
  $or$cond = $15 | $17;
  $18 = $3;
  if ($or$cond) {
   (_StrBuilder_Append($18,1441)|0);
  } else {
   $19 = $2;
   $20 = (_Scanner_Top($19)|0);
   $21 = (_BasicScanner_Lexeme($20)|0);
   (_StrBuilder_Append($18,$21)|0);
  }
  $22 = $2;
  $23 = (_Scanner_Top($22)|0);
  _BasicScanner_Match($23);
 }
 STACKTOP = sp;return;
}
function _Scanner_FindPreprocessorItem2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = $3;
 $8 = (_MacroMap_Find($6,$7)|0);
 $4 = $8;
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _PreprocessorExpression($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $1 = $0;
 HEAP32[$2>>2] = 0;
 $4 = $1;
 _ConstantExpression($4,$2);
 $5 = HEAP32[$2>>2]|0;
 $6 = (_EvaluateConstantExpression($5,$3)|0);
 if (!($6)) {
  $7 = $1;
  $8 = ((($7)) + 16|0);
  _Scanner_SetError($8,3426,$vararg_buffer);
 }
 $9 = HEAP32[$2>>2]|0;
 _TExpression_Delete($9);
 $10 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _EvalExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $2;
 (_Parser_InitString($5,3006,$9)|0);
 $10 = ((($5)) + 148|0);
 HEAP8[$10>>0] = 1;
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = ((($5)) + 16|0);
  $14 = ((($13)) + 4|0);
  $15 = $4;
  _MacroMap_Swap($14,$15);
 }
 $16 = (_PreprocessorExpression($5)|0);
 $6 = $16;
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = ((($5)) + 16|0);
  $20 = ((($19)) + 4|0);
  $21 = $4;
  _MacroMap_Swap($20,$21);
 }
 $22 = HEAP8[$5>>0]|0;
 $23 = $22&1;
 if ($23) {
  $24 = $3;
  $25 = ((($5)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  _Scanner_SetError($24,$26,$vararg_buffer);
 }
 $27 = ((($5)) + 16|0);
 $28 = ((($27)) + 88|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&1;
 if (!($30)) {
  _Parser_Destroy($5);
  $35 = $6;
  STACKTOP = sp;return ($35|0);
 }
 $31 = $3;
 $32 = ((($5)) + 16|0);
 $33 = ((($32)) + 76|0);
 $34 = HEAP32[$33>>2]|0;
 _Scanner_SetError($31,$34,$vararg_buffer1);
 _Parser_Destroy($5);
 $35 = $6;
 STACKTOP = sp;return ($35|0);
}
function _FindPreToken($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = (_strcmp($3,3454)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $2 = 136;
  } else {
   $6 = $1;
   $7 = (_strcmp($6,3462)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $2 = 137;
    break;
   }
   $9 = $1;
   $10 = (_strcmp($9,1872)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $2 = 138;
    break;
   }
   $12 = $1;
   $13 = (_strcmp($12,3469)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $2 = 139;
    break;
   }
   $15 = $1;
   $16 = (_strcmp($15,3474)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $2 = 140;
    break;
   }
   $18 = $1;
   $19 = (_strcmp($18,3481)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $2 = 141;
    break;
   }
   $21 = $1;
   $22 = (_strcmp($21,3487)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $2 = 142;
    break;
   }
   $24 = $1;
   $25 = (_strcmp($24,1840)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $2 = 143;
    break;
   }
   $27 = $1;
   $28 = (_strcmp($27,3493)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $2 = 144;
    break;
   }
   $30 = $1;
   $31 = (_strcmp($30,3499)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $2 = 145;
    break;
   }
   $33 = $1;
   $34 = (_strcmp($33,3504)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $2 = 146;
    break;
   }
   $36 = $1;
   $37 = (_strcmp($36,3510)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $2 = 147;
   }
  }
 } while(0);
 $39 = $2;
 STACKTOP = sp;return ($39|0);
}
function _GetPPTokens($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 36|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $3;
 $14 = ((($13)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $7 = $15;
 while(1) {
  $16 = $6;
  $17 = ($16|0)!=(14);
  $18 = $6;
  $19 = ($18|0)!=(2);
  $or$cond = $17 & $19;
  $20 = $6;
  $21 = ($20|0)!=(150);
  $or$cond4 = $or$cond & $21;
  if (!($or$cond4)) {
   break;
  }
  $22 = $5;
  $23 = $7;
  (_StrBuilder_Append($22,$23)|0);
  $24 = $6;
  $25 = ($24|0)!=(15);
  if ($25) {
   $26 = $7;
   $27 = $6;
   $28 = (_TokenToPPToken($27)|0);
   $29 = (_PPToken_Create($26,$28)|0);
   $8 = $29;
   $30 = $4;
   $31 = $8;
   _TokenArray_PushBack($30,$31);
  }
  $32 = $3;
  _BasicScanner_Match($32);
  $33 = $3;
  $34 = ((($33)) + 36|0);
  $35 = ((($34)) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $6 = $36;
  $37 = $3;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $7 = $39;
 }
 while(1) {
  $40 = $4;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)>(0);
  if (!($43)) {
   label = 9;
   break;
  }
  $44 = $4;
  $45 = HEAP32[$44>>2]|0;
  $46 = $4;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) - 1)|0;
  $50 = (($45) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(5);
  if (!($53)) {
   label = 9;
   break;
  }
  $54 = $4;
  _TokenArray_Pop($54);
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _ParsePreDefinev2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Scanner_Top($9)|0);
 $4 = $10;
 $11 = (_Macro_Create()|0);
 $5 = $11;
 $12 = $4;
 $13 = ((($12)) + 36|0);
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $6 = $15;
 $16 = $4;
 $17 = ((($16)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $7 = $18;
 $19 = $5;
 $20 = $7;
 _String_Set($19,$20);
 $21 = $3;
 $22 = $7;
 (_StrBuilder_Append($21,$22)|0);
 $23 = $4;
 _BasicScanner_Match($23);
 $24 = $4;
 $25 = ((($24)) + 36|0);
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $6 = $27;
 $28 = $4;
 $29 = ((($28)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $7 = $30;
 $31 = $6;
 $32 = ($31|0)==(27);
 L1: do {
  if ($32) {
   $33 = $5;
   $34 = ((($33)) + 4|0);
   HEAP8[$34>>0] = 1;
   $35 = $3;
   $36 = $7;
   (_StrBuilder_Append($35,$36)|0);
   $37 = $4;
   _BasicScanner_Match($37);
   while(1) {
    $38 = $4;
    $39 = $3;
    _Scanner_MatchAllPreprocessorSpaces($38,$39);
    $40 = $4;
    $41 = ((($40)) + 36|0);
    $42 = ((($41)) + 20|0);
    $43 = HEAP32[$42>>2]|0;
    $6 = $43;
    $44 = $4;
    $45 = ((($44)) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $7 = $46;
    $47 = $6;
    $48 = ($47|0)==(28);
    if ($48) {
     break;
    }
    $52 = $6;
    $53 = ($52|0)==(14);
    $54 = $6;
    $55 = ($54|0)==(2);
    $or$cond = $53 | $55;
    if ($or$cond) {
     break L1;
    }
    $56 = $4;
    $57 = ((($56)) + 36|0);
    $58 = ((($57)) + 20|0);
    $59 = HEAP32[$58>>2]|0;
    $6 = $59;
    $60 = $4;
    $61 = ((($60)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    $7 = $62;
    $63 = $7;
    $64 = $6;
    $65 = (_TokenToPPToken($64)|0);
    $66 = (_PPToken_Create($63,$65)|0);
    $8 = $66;
    $67 = $5;
    $68 = ((($67)) + 20|0);
    $69 = $8;
    _TokenArray_PushBack($68,$69);
    $70 = $3;
    $71 = $7;
    (_StrBuilder_Append($70,$71)|0);
    $72 = $4;
    _BasicScanner_Match($72);
    $73 = $4;
    $74 = $3;
    _Scanner_MatchAllPreprocessorSpaces($73,$74);
    $75 = $4;
    $76 = ((($75)) + 36|0);
    $77 = ((($76)) + 20|0);
    $78 = HEAP32[$77>>2]|0;
    $6 = $78;
    $79 = $4;
    $80 = ((($79)) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $7 = $81;
    $82 = $6;
    $83 = ($82|0)==(31);
    if (!($83)) {
     continue;
    }
    $84 = $3;
    $85 = $7;
    (_StrBuilder_Append($84,$85)|0);
    $86 = $4;
    _BasicScanner_Match($86);
   }
   $49 = $3;
   $50 = $7;
   (_StrBuilder_Append($49,$50)|0);
   $51 = $4;
   _BasicScanner_Match($51);
  } else {
   $87 = $4;
   $88 = $3;
   _Scanner_MatchAllPreprocessorSpaces($87,$88);
  }
 } while(0);
 $89 = $4;
 $90 = $3;
 _Scanner_MatchAllPreprocessorSpaces($89,$90);
 $91 = $4;
 $92 = $5;
 $93 = ((($92)) + 8|0);
 $94 = $3;
 _GetPPTokens($91,$93,$94);
 $95 = $2;
 $96 = ((($95)) + 4|0);
 $97 = $5;
 $98 = HEAP32[$97>>2]|0;
 $99 = $5;
 (_MacroMap_SetAt($96,$98,$99)|0);
 STACKTOP = sp;return;
}
function _Scanner_MatchAllPreprocessorSpaces($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 36|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 while(1) {
  $9 = $4;
  $10 = ($9|0)==(8);
  $11 = $4;
  $12 = ($11|0)==(15);
  $or$cond = $10 | $12;
  $13 = $4;
  $14 = ($13|0)==(5);
  $or$cond3 = $or$cond | $14;
  if (!($or$cond3)) {
   break;
  }
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  (_StrBuilder_Append($15,$18)|0);
  $19 = $2;
  _BasicScanner_Match($19);
  $20 = $2;
  $21 = ((($20)) + 36|0);
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $4 = $23;
 }
 STACKTOP = sp;return;
}
function _EvalPre($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $7 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 88|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 if ($12) {
  $2 = 0;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $13 = $3;
  $14 = (_Scanner_Top($13)|0);
  $5 = $14;
  ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  $15 = $5;
  $16 = $4;
  _GetPPTokens($15,$6,$16);
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  $17 = $3;
  $18 = ((($17)) + 4|0);
  _ExpandMacroToText($6,$18,0,1,1,0,$7);
  $19 = HEAP32[$7>>2]|0;
  $20 = $3;
  $21 = (_EvalExpression($19,$20)|0);
  $8 = $21;
  _StrBuilder_Destroy($7);
  _TokenArray_Destroy($6);
  $22 = $8;
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _Scanner_BuyIdentifierThatCanExpandAndCollapse($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $12 = sp + 84|0;
 $14 = sp + 68|0;
 $16 = sp + 56|0;
 $18 = sp + 40|0;
 $19 = sp + 28|0;
 $20 = sp + 16|0;
 $1 = $0;
 $25 = $1;
 $26 = (_StateTop($25)|0);
 $2 = $26;
 $27 = $1;
 $28 = (_Scanner_Top($27)|0);
 $3 = $28;
 $29 = $3;
 $30 = ((($29)) + 36|0);
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $4 = $32;
 $33 = $3;
 $34 = ((($33)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $5 = $35;
 $36 = $2;
 $37 = (_IsIncludeState($36)|0);
 if (!($37)) {
  $38 = (_ScannerItem_Create()|0);
  $6 = $38;
  $39 = $6;
  $40 = $3;
  $41 = ((($40)) + 36|0);
  _LocalStrBuilder_Swap($39,$41);
  $42 = $3;
  $43 = ((($42)) + 36|0);
  $44 = ((($43)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $6;
  $47 = ((($46)) + 20|0);
  HEAP32[$47>>2] = $45;
  $48 = $6;
  $49 = ((($48)) + 32|0);
  HEAP8[$49>>0] = 0;
  $50 = $1;
  $51 = ((($50)) + 92|0);
  $52 = $6;
  _TScannerItemList_PushBack($51,$52);
  $53 = $3;
  _BasicScanner_Match($53);
  STACKTOP = sp;return;
 }
 $54 = $1;
 $55 = $5;
 $56 = (_Scanner_FindPreprocessorItem2($54,$55)|0);
 $7 = $56;
 $57 = $7;
 $58 = ($57|0)==(0|0);
 if ($58) {
  $59 = (_ScannerItem_Create()|0);
  $8 = $59;
  $60 = $8;
  $61 = $3;
  $62 = ((($61)) + 36|0);
  _LocalStrBuilder_Swap($60,$62);
  $63 = $3;
  $64 = ((($63)) + 36|0);
  $65 = ((($64)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $8;
  $68 = ((($67)) + 20|0);
  HEAP32[$68>>2] = $66;
  $69 = $8;
  $70 = ((($69)) + 32|0);
  HEAP8[$70>>0] = 1;
  $71 = $1;
  $72 = ((($71)) + 92|0);
  $73 = $8;
  _TScannerItemList_PushBack($72,$73);
  $74 = $3;
  _BasicScanner_Match($74);
  STACKTOP = sp;return;
 }
 $75 = $3;
 $76 = ((($75)) + 77|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&1;
 if ($78) {
  $79 = $7;
  $80 = HEAP32[$79>>2]|0;
  $81 = $3;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_strcmp($80,$83)|0);
  $85 = ($84|0)==(0);
  if ($85) {
   $86 = (_ScannerItem_Create()|0);
   $9 = $86;
   $87 = $9;
   $88 = $3;
   $89 = ((($88)) + 36|0);
   _LocalStrBuilder_Swap($87,$89);
   $90 = $3;
   $91 = ((($90)) + 36|0);
   $92 = ((($91)) + 20|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $9;
   $95 = ((($94)) + 20|0);
   HEAP32[$95>>2] = $93;
   $96 = $9;
   $97 = ((($96)) + 32|0);
   HEAP8[$97>>0] = 1;
   $98 = $1;
   $99 = ((($98)) + 92|0);
   $100 = $9;
   _TScannerItemList_PushBack($99,$100);
   $101 = $3;
   _BasicScanner_Match($101);
   STACKTOP = sp;return;
  }
 }
 $102 = $7;
 $10 = $102;
 $103 = $3;
 _BasicScanner_Match($103);
 $11 = 0;
 while(1) {
  $104 = $7;
  $105 = ((($104)) + 4|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&1;
  if ($107) {
   ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;
   $142 = $3;
   $143 = ((($142)) + 36|0);
   $144 = ((($143)) + 20|0);
   $145 = HEAP32[$144>>2]|0;
   $4 = $145;
   $146 = $3;
   $147 = ((($146)) + 36|0);
   $148 = HEAP32[$147>>2]|0;
   $5 = $148;
   while(1) {
    $149 = $4;
    $150 = ($149|0)==(8);
    $151 = $4;
    $152 = ($151|0)==(5);
    $153 = $150 ? 1 : $152;
    if (!($153)) {
     break;
    }
    $154 = (_ScannerItem_Create()|0);
    $17 = $154;
    $155 = $17;
    $156 = $5;
    _LocalStrBuilder_Set($155,$156);
    $157 = $4;
    $158 = $17;
    $159 = ((($158)) + 20|0);
    HEAP32[$159>>2] = $157;
    $160 = $17;
    $161 = ((($160)) + 32|0);
    HEAP8[$161>>0] = 1;
    $162 = $17;
    _TScannerItemList_PushBack($16,$162);
    $163 = $3;
    _BasicScanner_Match($163);
    $164 = $3;
    $165 = ((($164)) + 36|0);
    $166 = ((($165)) + 20|0);
    $167 = HEAP32[$166>>2]|0;
    $4 = $167;
    $168 = $3;
    $169 = ((($168)) + 36|0);
    $170 = HEAP32[$169>>2]|0;
    $5 = $170;
   }
   $171 = $4;
   $172 = ($171|0)==(27);
   if ($172) {
    ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
    ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
    ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
    $173 = $10;
    $174 = HEAP32[$173>>2]|0;
    (_StrBuilder_Set($18,$174)|0);
    $175 = $1;
    $176 = $3;
    $177 = $7;
    _GetMacroArguments($175,$176,$177,$20,$18);
    $178 = $1;
    $179 = ((($178)) + 4|0);
    _ExpandMacroToText($20,$179,0,0,0,0,$19);
    $21 = 0;
    $180 = ((($19)) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = ($181|0)>(0);
    if ($182) {
     $183 = $1;
     $184 = HEAP32[$19>>2]|0;
     $185 = (_Scanner_FindPreprocessorItem2($183,$184)|0);
     $21 = $185;
    }
    $186 = $21;
    $187 = ($186|0)!=(0|0);
    do {
     if ($187) {
      $188 = $21;
      $189 = ((($188)) + 4|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = $190&1;
      if ($191) {
       $192 = $21;
       $7 = $192;
       break;
      } else {
       $193 = $1;
       $194 = $7;
       $195 = HEAP32[$194>>2]|0;
       $196 = HEAP32[$19>>2]|0;
       (_PushExpandedMacro($193,$195,$196)|0);
       $197 = $1;
       $198 = $7;
       $199 = HEAP32[$198>>2]|0;
       _Scanner_PushToken($197,148,$199,1);
       break;
      }
     } else {
      $200 = $1;
      $201 = $7;
      $202 = HEAP32[$201>>2]|0;
      $203 = HEAP32[$19>>2]|0;
      (_PushExpandedMacro($200,$202,$203)|0);
      $204 = $1;
      $205 = HEAP32[$18>>2]|0;
      _Scanner_PushToken($204,148,$205,1);
      $11 = 1;
     }
    } while(0);
    _TokenArray_Destroy($20);
    _StrBuilder_Destroy($19);
    _StrBuilder_Destroy($18);
   } else {
    $206 = $10;
    $207 = $7;
    $208 = ($206|0)!=($207|0);
    if ($208) {
     $209 = (_ScannerItem_Create()|0);
     $22 = $209;
     $210 = $22;
     $211 = $10;
     $212 = HEAP32[$211>>2]|0;
     _LocalStrBuilder_Append($210,$212);
     $213 = $22;
     $214 = ((($213)) + 20|0);
     HEAP32[$214>>2] = 148;
     $215 = $22;
     $216 = ((($215)) + 32|0);
     HEAP8[$216>>0] = 1;
     $217 = $1;
     $218 = ((($217)) + 92|0);
     $219 = $22;
     _TScannerItemList_PushBack($218,$219);
    }
    $220 = (_ScannerItem_Create()|0);
    $23 = $220;
    $221 = $23;
    $222 = $7;
    $223 = HEAP32[$222>>2]|0;
    _LocalStrBuilder_Append($221,$223);
    $224 = $23;
    $225 = ((($224)) + 20|0);
    HEAP32[$225>>2] = 7;
    $226 = $23;
    $227 = ((($226)) + 32|0);
    HEAP8[$227>>0] = 1;
    $228 = $1;
    $229 = ((($228)) + 92|0);
    $230 = $23;
    _TScannerItemList_PushBack($229,$230);
    $231 = $10;
    $232 = $7;
    $233 = ($231|0)!=($232|0);
    if ($233) {
     $234 = (_ScannerItem_Create()|0);
     $24 = $234;
     $235 = $24;
     $236 = ((($235)) + 20|0);
     HEAP32[$236>>2] = 149;
     $237 = $24;
     $238 = ((($237)) + 32|0);
     HEAP8[$238>>0] = 1;
     $239 = $1;
     $240 = ((($239)) + 92|0);
     $241 = $24;
     _TScannerItemList_PushBack($240,$241);
    }
    $242 = HEAP32[$16>>2]|0;
    $243 = ($242|0)!=(0|0);
    if ($243) {
     $244 = $1;
     $245 = ((($244)) + 92|0);
     $246 = HEAP32[$16>>2]|0;
     _TScannerItemList_PushBack($245,$246);
     HEAP32[$16>>2] = 0;
     $247 = ((($16)) + 4|0);
     HEAP32[$247>>2] = 0;
    }
    $11 = 1;
   }
   _TScannerItemList_Destroy($16);
  } else {
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $108 = $7;
   $109 = HEAP32[$108>>2]|0;
   $110 = (_TokenToPPToken(7)|0);
   $111 = (_PPToken_Create($109,$110)|0);
   $13 = $111;
   $112 = $13;
   _TokenArray_PushBack($12,$112);
   ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
   $113 = $1;
   $114 = ((($113)) + 4|0);
   _ExpandMacroToText($12,$114,0,0,0,0,$14);
   $15 = 0;
   $115 = ((($14)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)>(0);
   if ($117) {
    $118 = $1;
    $119 = HEAP32[$14>>2]|0;
    $120 = (_Scanner_FindPreprocessorItem2($118,$119)|0);
    $15 = $120;
   }
   $121 = $15;
   $122 = ($121|0)!=(0|0);
   do {
    if ($122) {
     $123 = $15;
     $124 = ((($123)) + 4|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&1;
     if ($126) {
      $127 = $15;
      $7 = $127;
      break;
     } else {
      $128 = $1;
      $129 = $7;
      $130 = HEAP32[$129>>2]|0;
      $131 = HEAP32[$14>>2]|0;
      (_PushExpandedMacro($128,$130,$131)|0);
      $132 = $1;
      $133 = $7;
      $134 = HEAP32[$133>>2]|0;
      _Scanner_PushToken($132,148,$134,1);
      $11 = 1;
      break;
     }
    } else {
     $135 = $1;
     $136 = $7;
     $137 = HEAP32[$136>>2]|0;
     $138 = HEAP32[$14>>2]|0;
     (_PushExpandedMacro($135,$137,$138)|0);
     $139 = $1;
     $140 = $7;
     $141 = HEAP32[$140>>2]|0;
     _Scanner_PushToken($139,148,$141,1);
     $11 = 1;
    }
   } while(0);
   _TokenArray_Destroy($12);
   _StrBuilder_Destroy($14);
  }
  $248 = $11;
  $249 = $248&1;
  if ($249) {
   label = 40;
   break;
  }
  $250 = $11;
  $251 = $250&1;
  $252 = $251 ^ 1;
  if (!($252)) {
   label = 40;
   break;
  }
 }
 if ((label|0) == 40) {
  STACKTOP = sp;return;
 }
}
function _GetMacroArguments($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = $6;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $10 = $24;
 $25 = $6;
 $26 = ((($25)) + 36|0);
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $11 = $28;
 $29 = $7;
 $30 = ((($29)) + 20|0);
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $12 = $32;
 $13 = 0;
 $33 = $11;
 $34 = ($33|0)==(27);
 if ($34) {
  $35 = $7;
  $36 = HEAP32[$35>>2]|0;
  $37 = (_PPToken_Create($36,0)|0);
  $14 = $37;
  $38 = $8;
  $39 = $14;
  _TokenArray_PushBack($38,$39);
  $40 = $10;
  $41 = $11;
  $42 = (_TokenToPPToken($41)|0);
  $43 = (_PPToken_Create($40,$42)|0);
  $15 = $43;
  $44 = $8;
  $45 = $15;
  _TokenArray_PushBack($44,$45);
  $46 = $9;
  $47 = $10;
  (_StrBuilder_Append($46,$47)|0);
  $48 = $6;
  _BasicScanner_Match($48);
  $49 = $6;
  $50 = ((($49)) + 36|0);
  $51 = ((($50)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $11 = $52;
  $53 = $6;
  $54 = ((($53)) + 36|0);
  $55 = HEAP32[$54>>2]|0;
  $10 = $55;
  $13 = 1;
  $16 = 1;
  while(1) {
   $56 = $11;
   $57 = ($56|0)==(27);
   if ($57) {
    $58 = $10;
    $59 = $11;
    $60 = (_TokenToPPToken($59)|0);
    $61 = (_PPToken_Create($58,$60)|0);
    $17 = $61;
    $62 = $8;
    $63 = $17;
    _TokenArray_PushBack($62,$63);
    $64 = $9;
    $65 = $10;
    (_StrBuilder_Append($64,$65)|0);
    $66 = $6;
    _BasicScanner_Match($66);
    $67 = $6;
    $68 = ((($67)) + 36|0);
    $69 = ((($68)) + 20|0);
    $70 = HEAP32[$69>>2]|0;
    $11 = $70;
    $71 = $6;
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $10 = $73;
    $74 = $16;
    $75 = (($74) + 1)|0;
    $16 = $75;
    continue;
   }
   $76 = $11;
   $77 = ($76|0)==(28);
   if ($77) {
    $78 = $16;
    $79 = ($78|0)==(1);
    if ($79) {
     break;
    }
    $96 = $16;
    $97 = (($96) + -1)|0;
    $16 = $97;
    $98 = $10;
    $99 = $11;
    $100 = (_TokenToPPToken($99)|0);
    $101 = (_PPToken_Create($98,$100)|0);
    $19 = $101;
    $102 = $8;
    $103 = $19;
    _TokenArray_PushBack($102,$103);
    $104 = $9;
    $105 = $10;
    (_StrBuilder_Append($104,$105)|0);
    $106 = $6;
    _BasicScanner_Match($106);
    $107 = $6;
    $108 = ((($107)) + 36|0);
    $109 = ((($108)) + 20|0);
    $110 = HEAP32[$109>>2]|0;
    $11 = $110;
    $111 = $6;
    $112 = ((($111)) + 36|0);
    $113 = HEAP32[$112>>2]|0;
    $10 = $113;
    continue;
   }
   $114 = $11;
   $115 = ($114|0)==(31);
   if (!($115)) {
    $136 = $10;
    $137 = $11;
    $138 = (_TokenToPPToken($137)|0);
    $139 = (_PPToken_Create($136,$138)|0);
    $21 = $139;
    $140 = $8;
    $141 = $21;
    _TokenArray_PushBack($140,$141);
    $142 = $9;
    $143 = $10;
    (_StrBuilder_Append($142,$143)|0);
    $144 = $6;
    _BasicScanner_Match($144);
    $145 = $6;
    $146 = ((($145)) + 36|0);
    $147 = ((($146)) + 20|0);
    $148 = HEAP32[$147>>2]|0;
    $11 = $148;
    $149 = $6;
    $150 = ((($149)) + 36|0);
    $151 = HEAP32[$150>>2]|0;
    $10 = $151;
    continue;
   }
   $116 = $16;
   $117 = ($116|0)==(1);
   if ($117) {
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
   }
   $120 = $10;
   $121 = $11;
   $122 = (_TokenToPPToken($121)|0);
   $123 = (_PPToken_Create($120,$122)|0);
   $20 = $123;
   $124 = $8;
   $125 = $20;
   _TokenArray_PushBack($124,$125);
   $126 = $9;
   $127 = $10;
   (_StrBuilder_Append($126,$127)|0);
   $128 = $6;
   _BasicScanner_Match($128);
   $129 = $6;
   $130 = ((($129)) + 36|0);
   $131 = ((($130)) + 20|0);
   $132 = HEAP32[$131>>2]|0;
   $11 = $132;
   $133 = $6;
   $134 = ((($133)) + 36|0);
   $135 = HEAP32[$134>>2]|0;
   $10 = $135;
  }
  $80 = $10;
  $81 = $11;
  $82 = (_TokenToPPToken($81)|0);
  $83 = (_PPToken_Create($80,$82)|0);
  $18 = $83;
  $84 = $8;
  $85 = $18;
  _TokenArray_PushBack($84,$85);
  $86 = $9;
  $87 = $10;
  (_StrBuilder_Append($86,$87)|0);
  $88 = $6;
  _BasicScanner_Match($88);
  $89 = $6;
  $90 = ((($89)) + 36|0);
  $91 = ((($90)) + 20|0);
  $92 = HEAP32[$91>>2]|0;
  $11 = $92;
  $93 = $6;
  $94 = ((($93)) + 36|0);
  $95 = HEAP32[$94>>2]|0;
  $10 = $95;
 }
 $152 = $12;
 $153 = $13;
 $154 = ($152|0)!=($153|0);
 if (!($154)) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _Scanner_BuyTokens($0) {
 $0 = $0|0;
 var $$old = 0, $$old6 = 0, $$sink = 0, $$sink4 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond7 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $6 = sp + 68|0;
 $10 = sp + 56|0;
 $11 = sp + 44|0;
 $14 = sp + 32|0;
 $15 = sp + 28|0;
 $23 = sp + 8|0;
 $1 = $0;
 $26 = $1;
 $27 = ((($26)) + 88|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&1;
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = $1;
 $31 = (_Scanner_Top($30)|0);
 $2 = $31;
 $32 = $2;
 $33 = ($32|0)==(0|0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = $2;
 $35 = ((($34)) + 36|0);
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $3 = $37;
 $38 = $2;
 $39 = ((($38)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $4 = $40;
 $41 = $3;
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = $2;
  _BasicScanner_Match($43);
  $44 = $2;
  $45 = ((($44)) + 36|0);
  $46 = ((($45)) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $3 = $47;
  $48 = $2;
  $49 = ((($48)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $4 = $50;
 }
 while(1) {
  $51 = $3;
  $52 = ($51|0)==(2);
  if (!($52)) {
   break;
  }
  $53 = $1;
  _BasicScannerStack_Pop($53);
  $54 = $1;
  $55 = (_Scanner_Top($54)|0);
  $2 = $55;
  $56 = $2;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   break;
  }
  $58 = $2;
  $59 = ((($58)) + 36|0);
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  $3 = $61;
  $62 = $2;
  $63 = ((($62)) + 36|0);
  $64 = HEAP32[$63>>2]|0;
  $4 = $64;
 }
 $65 = $3;
 $66 = ($65|0)==(150);
 if ($66) {
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 88|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(0|0);
  if ($71) {
   $3 = 2;
  }
 }
 $72 = $3;
 $73 = ($72|0)==(2);
 if ($73) {
  $74 = (_ScannerItem_Create()|0);
  $5 = $74;
  $75 = $5;
  $76 = ((($75)) + 20|0);
  HEAP32[$76>>2] = 2;
  $77 = $5;
  $78 = ((($77)) + 32|0);
  HEAP8[$78>>0] = 1;
  $79 = $1;
  $80 = ((($79)) + 92|0);
  $81 = $5;
  _TScannerItemList_PushBack($80,$81);
  STACKTOP = sp;return;
 }
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $82 = $1;
 $83 = (_StateTop($82)|0);
 $7 = $83;
 $84 = $7;
 $85 = (_IsIncludeState($84)|0);
 $86 = $85&1;
 $8 = $86;
 $87 = $3;
 $88 = ($87|0)==(18);
 do {
  if ($88) {
   $89 = $2;
   $90 = ((($89)) + 36|0);
   $91 = HEAP32[$90>>2]|0;
   (_StrBuilder_Append($6,$91)|0);
   $92 = $2;
   _BasicScanner_Match($92);
   $93 = $2;
   _Scanner_MatchAllPreprocessorSpaces($93,$6);
   $94 = $2;
   $95 = ((($94)) + 36|0);
   $96 = HEAP32[$95>>2]|0;
   $4 = $96;
   $97 = $2;
   $98 = ((($97)) + 36|0);
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $3 = $100;
   $101 = $4;
   $102 = (_FindPreToken($101)|0);
   $9 = $102;
   $103 = $9;
   $104 = ($103|0)==(136);
   if ($104) {
    $105 = $4;
    (_StrBuilder_Append($6,$105)|0);
    $106 = $2;
    _BasicScanner_Match($106);
    $107 = $2;
    $108 = ((($107)) + 36|0);
    $109 = HEAP32[$108>>2]|0;
    $4 = $109;
    $110 = $2;
    $111 = ((($110)) + 36|0);
    $112 = ((($111)) + 20|0);
    $113 = HEAP32[$112>>2]|0;
    $3 = $113;
    $114 = $7;
    $115 = (_IsIncludeState($114)|0);
    if (!($115)) {
     $178 = $1;
     $179 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($178,8,$179,0);
     break;
    }
    $116 = $2;
    _Scanner_MatchAllPreprocessorSpaces($116,$6);
    $117 = $2;
    $118 = ((($117)) + 36|0);
    $119 = HEAP32[$118>>2]|0;
    $4 = $119;
    $120 = $2;
    $121 = ((($120)) + 36|0);
    $122 = ((($121)) + 20|0);
    $123 = HEAP32[$122>>2]|0;
    $3 = $123;
    $124 = $3;
    $125 = ($124|0)==(6);
    if ($125) {
     $126 = $4;
     $127 = ((($126)) + 1|0);
     _String_InitWith($10,$127);
     $128 = $4;
     (_StrBuilder_Append($6,$128)|0);
     $129 = $2;
     _BasicScanner_Match($129);
     $130 = HEAP32[$10>>2]|0;
     $131 = HEAP32[$10>>2]|0;
     $132 = (_strlen($131)|0);
     $133 = (($132) - 1)|0;
     $134 = (($130) + ($133)|0);
     HEAP8[$134>>0] = 0;
     $135 = $2;
     _IgnorePreProcessorv2($135,$6);
     $136 = $1;
     $137 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($136,136,$137,1);
     $138 = $1;
     $139 = HEAP32[$10>>2]|0;
     _Scanner_IncludeFile($138,$139,0,1);
     _String_Destroy($10);
     break;
    }
    $140 = $3;
    $141 = ($140|0)==(38);
    if (!($141)) {
     break;
    }
    $142 = $4;
    (_StrBuilder_Append($6,$142)|0);
    $143 = $2;
    _BasicScanner_Match($143);
    $144 = $2;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $4 = $146;
    $147 = $2;
    $148 = ((($147)) + 36|0);
    $149 = ((($148)) + 20|0);
    $150 = HEAP32[$149>>2]|0;
    $3 = $150;
    ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
    while(1) {
     $151 = $4;
     (_StrBuilder_Append($6,$151)|0);
     $152 = $3;
     $153 = ($152|0)==(40);
     if ($153) {
      label = 21;
      break;
     }
     $162 = $3;
     $163 = ($162|0)==(14);
     if ($163) {
      break;
     }
     $164 = $4;
     (_StrBuilder_Append($11,$164)|0);
     $165 = $2;
     _BasicScanner_Match($165);
     $166 = $2;
     $167 = ((($166)) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     $4 = $168;
     $169 = $2;
     $170 = ((($169)) + 36|0);
     $171 = ((($170)) + 20|0);
     $172 = HEAP32[$171>>2]|0;
     $3 = $172;
    }
    if ((label|0) == 21) {
     $154 = $2;
     _BasicScanner_Match($154);
     $155 = $2;
     $156 = ((($155)) + 36|0);
     $157 = HEAP32[$156>>2]|0;
     $4 = $157;
     $158 = $2;
     $159 = ((($158)) + 36|0);
     $160 = ((($159)) + 20|0);
     $161 = HEAP32[$160>>2]|0;
     $3 = $161;
    }
    $173 = $2;
    _IgnorePreProcessorv2($173,$6);
    $174 = $1;
    $175 = HEAP32[$6>>2]|0;
    _Scanner_PushToken($174,136,$175,1);
    $176 = $1;
    $177 = HEAP32[$11>>2]|0;
    _Scanner_IncludeFile($176,$177,1,1);
    _StrBuilder_Destroy($11);
    break;
   }
   $180 = $9;
   $181 = ($180|0)==(137);
   if ($181) {
    $182 = $4;
    (_StrBuilder_Append($6,$182)|0);
    $183 = $2;
    _BasicScanner_Match($183);
    $184 = $7;
    $185 = (_IsIncludeState($184)|0);
    $186 = $2;
    if (!($185)) {
     _IgnorePreProcessorv2($186,$6);
     $300 = $1;
     $301 = $9;
     $302 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($300,$301,$302,0);
     break;
    }
    _Scanner_MatchAllPreprocessorSpaces($186,$6);
    $187 = $2;
    $188 = (_BasicScanner_IsLexeme($187,3517)|0);
    $189 = $1;
    $190 = (_Scanner_Top($189)|0);
    if ($188) {
     $191 = ((($190)) + 4|0);
     $192 = HEAP32[$191>>2]|0;
     $12 = $192;
     $193 = $1;
     $194 = ((($193)) + 28|0);
     $195 = $12;
     $196 = (_TFileMap_Find($194,$195)|0);
     $13 = $196;
     $197 = $13;
     $198 = ($197|0)==(0|0);
     if ($198) {
      $199 = (_TFile_Create()|0);
      $13 = $199;
      $200 = $13;
      $201 = ((($200)) + 12|0);
      HEAP8[$201>>0] = 1;
      $202 = $1;
      $203 = ((($202)) + 28|0);
      $204 = $12;
      $205 = $13;
      (_TFileMap_Set($203,$204,$205)|0);
     } else {
      $206 = $13;
      $207 = ((($206)) + 12|0);
      HEAP8[$207>>0] = 1;
     }
     $208 = $2;
     _IgnorePreProcessorv2($208,$6);
     $209 = $1;
     $210 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($209,137,$210,1);
     break;
    }
    $211 = (_BasicScanner_IsLexeme($190,3522)|0);
    if ($211) {
     $212 = $4;
     (_StrBuilder_Append($6,$212)|0);
     $213 = $2;
     _BasicScanner_Match($213);
     $214 = $7;
     $215 = (_IsIncludeState($214)|0);
     $216 = $1;
     if ($215) {
      _GetDefineString($216,$6);
      $217 = $2;
      _IgnorePreProcessorv2($217,$6);
      $218 = $1;
      $219 = HEAP32[$6>>2]|0;
      _Scanner_PushToken($218,137,$219,1);
      break;
     } else {
      $220 = $9;
      $221 = HEAP32[$6>>2]|0;
      _Scanner_PushToken($216,$220,$221,0);
      break;
     }
    }
    $222 = $1;
    $223 = (_Scanner_Top($222)|0);
    $224 = (_BasicScanner_IsLexeme($223,3530)|0);
    if ($224) {
     $225 = $4;
     (_StrBuilder_Append($6,$225)|0);
     $226 = $2;
     _BasicScanner_Match($226);
     $227 = $2;
     _Scanner_MatchAllPreprocessorSpaces($227,$6);
     $228 = $2;
     $229 = ((($228)) + 36|0);
     $230 = HEAP32[$229>>2]|0;
     $4 = $230;
     $231 = $4;
     $232 = ((($231)) + 1|0);
     _String_InitWith($14,$232);
     $233 = $1;
     _Scanner_Match($233);
     $234 = HEAP32[$14>>2]|0;
     $235 = HEAP32[$14>>2]|0;
     $236 = (_strlen($235)|0);
     $237 = (($236) - 1)|0;
     $238 = (($234) + ($237)|0);
     HEAP8[$238>>0] = 0;
     $239 = $1;
     $240 = ((($239)) + 40|0);
     $241 = HEAP32[$14>>2]|0;
     (_StrArray_Push($240,$241)|0);
     _String_Destroy($14);
     $242 = $2;
     _IgnorePreProcessorv2($242,$6);
     $243 = $1;
     $244 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($243,137,$244,1);
     break;
    }
    $245 = $1;
    $246 = (_Scanner_Top($245)|0);
    $247 = (_BasicScanner_IsLexeme($246,3220)|0);
    if ($247) {
     $248 = $4;
     (_StrBuilder_Append($6,$248)|0);
     $249 = $2;
     _BasicScanner_Match($249);
     $250 = $2;
     _Scanner_MatchAllPreprocessorSpaces($250,$6);
     $251 = $2;
     $252 = ((($251)) + 36|0);
     $253 = HEAP32[$252>>2]|0;
     $4 = $253;
     $254 = $4;
     $255 = ((($254)) + 1|0);
     _String_InitWith($15,$255);
     $256 = $1;
     _Scanner_Match($256);
     $257 = HEAP32[$15>>2]|0;
     $258 = HEAP32[$15>>2]|0;
     $259 = (_strlen($258)|0);
     $260 = (($259) - 1)|0;
     $261 = (($257) + ($260)|0);
     HEAP8[$261>>0] = 0;
     $262 = $1;
     $263 = ((($262)) + 52|0);
     $264 = HEAP32[$15>>2]|0;
     (_StrArray_Push($263,$264)|0);
     _String_Destroy($15);
     $265 = $2;
     _IgnorePreProcessorv2($265,$6);
     $266 = $1;
     $267 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($266,137,$267,1);
     break;
    }
    $268 = $2;
    $269 = (_BasicScanner_IsLexeme($268,3534)|0);
    if ($269) {
     (_StrBuilder_Append($6,3534)|0);
     $270 = $2;
     _BasicScanner_Match($270);
     $271 = $2;
     _Scanner_MatchAllPreprocessorSpaces($271,$6);
     $272 = $2;
     $273 = (_BasicScanner_IsLexeme($272,3541)|0);
     $274 = $2;
     if ($273) {
      _BasicScanner_Match($274);
      $275 = $2;
      _Scanner_MatchAllPreprocessorSpaces($275,$6);
      $276 = $1;
      _Scanner_PushToken($276,89,1822,1);
      $277 = $1;
      _Scanner_PushToken($277,8,1441,1);
      $278 = $2;
      $279 = ((($278)) + 36|0);
      $280 = HEAP32[$279>>2]|0;
      $4 = $280;
      $281 = $1;
      $282 = $4;
      _Scanner_PushToken($281,7,$282,1);
      $283 = $2;
      _BasicScanner_Match($283);
      $284 = $2;
      _IgnorePreProcessorv2($284,$6);
      $285 = $1;
      _Scanner_PushToken($285,49,1502,1);
      break;
     } else {
      _IgnorePreProcessorv2($274,$6);
      $286 = $1;
      $287 = HEAP32[$6>>2]|0;
      _Scanner_PushToken($286,137,$287,1);
      break;
     }
    }
    $288 = $2;
    $289 = (_BasicScanner_IsLexeme($288,3548)|0);
    if (!($289)) {
     $297 = $2;
     _IgnorePreProcessorv2($297,$6);
     $298 = $1;
     $299 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($298,137,$299,1);
     break;
    }
    (_StrBuilder_Append($6,3548)|0);
    $290 = $2;
    _BasicScanner_Match($290);
    $291 = $2;
    _Scanner_MatchAllPreprocessorSpaces($291,$6);
    $292 = $2;
    $293 = (_BasicScanner_IsLexeme($292,3541)|0);
    $294 = $2;
    _IgnorePreProcessorv2($294,$6);
    $295 = $1;
    if ($293) {
     _Scanner_PushToken($295,51,1449,1);
     break;
    } else {
     $296 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($295,137,$296,1);
     break;
    }
   }
   $303 = $9;
   $304 = ($303|0)==(138);
   $305 = $9;
   $306 = ($305|0)==(141);
   $or$cond = $304 | $306;
   $307 = $9;
   $308 = ($307|0)==(140);
   $or$cond3 = $or$cond | $308;
   if ($or$cond3) {
    $309 = $2;
    $310 = ((($309)) + 36|0);
    $311 = HEAP32[$310>>2]|0;
    (_StrBuilder_Append($6,$311)|0);
    $312 = $2;
    _BasicScanner_Match($312);
    $313 = $2;
    _Scanner_MatchAllPreprocessorSpaces($313,$6);
    $314 = $2;
    $315 = ((($314)) + 36|0);
    $316 = HEAP32[$315>>2]|0;
    $4 = $316;
    $317 = $7;
    L80: do {
     switch ($317|0) {
     case 4: case 1: case 0:  {
      $16 = 0;
      $318 = $9;
      $319 = ($318|0)==(138);
      $320 = $1;
      do {
       if ($319) {
        $321 = (_EvalPre($320,$6)|0);
        $16 = $321;
       } else {
        $322 = $4;
        $323 = (_Scanner_FindPreprocessorItem2($320,$322)|0);
        $324 = ($323|0)!=(0|0);
        $325 = $324&1;
        $17 = $325;
        $326 = $9;
        $327 = ($326|0)==(141);
        $328 = $17;
        $329 = $328&1;
        if ($327) {
         $330 = $329 ? 1 : 0;
         $16 = $330;
         break;
        } else {
         $331 = $329 ^ 1;
         $332 = $331 ? 1 : 0;
         $16 = $332;
         break;
        }
       }
      } while(0);
      $333 = $16;
      $334 = ($333|0)!=(0);
      $335 = $1;
      if ($334) {
       _StatePush($335,1);
       break L80;
      } else {
       _StatePush($335,2);
       break L80;
      }
      break;
     }
     case 2:  {
      $336 = $1;
      _StatePush($336,2);
      break;
     }
     case 3:  {
      $337 = $1;
      _StatePush($337,3);
      break;
     }
     default: {
     }
     }
    } while(0);
    $338 = $1;
    $339 = (_StateTop($338)|0);
    $7 = $339;
    $340 = $7;
    $341 = (_IsIncludeState($340)|0);
    $342 = $341&1;
    $18 = $342;
    $343 = $2;
    _IgnorePreProcessorv2($343,$6);
    $344 = $1;
    $345 = $9;
    $346 = HEAP32[$6>>2]|0;
    $347 = $18;
    $348 = $347&1;
    _Scanner_PushToken($344,$345,$346,$348);
    break;
   }
   $349 = $9;
   $350 = ($349|0)==(139);
   if ($350) {
    $351 = $2;
    $352 = ((($351)) + 36|0);
    $353 = HEAP32[$352>>2]|0;
    (_StrBuilder_Append($6,$353)|0);
    $354 = $2;
    _BasicScanner_Match($354);
    $355 = $2;
    _Scanner_MatchAllPreprocessorSpaces($355,$6);
    $356 = $7;
    L98: do {
     switch ($356|0) {
     case 1: case 0:  {
      $357 = $1;
      $358 = ((($357)) + 16|0);
      $359 = HEAP32[$358>>2]|0;
      $360 = $1;
      $361 = ((($360)) + 16|0);
      $362 = ((($361)) + 4|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = (($363) - 1)|0;
      $365 = (($359) + ($364<<2)|0);
      HEAP32[$365>>2] = 3;
      break;
     }
     case 2:  {
      $366 = $1;
      $367 = (_EvalPre($366,$6)|0);
      $19 = $367;
      $368 = $1;
      $369 = ((($368)) + 16|0);
      $370 = ((($369)) + 4|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = ($371|0)>=(2);
      if (!($372)) {
       $406 = $19;
       $407 = ($406|0)!=(0);
       if (!($407)) {
        break L98;
       }
       $408 = $1;
       $409 = ((($408)) + 16|0);
       $410 = HEAP32[$409>>2]|0;
       $411 = $1;
       $412 = ((($411)) + 16|0);
       $413 = ((($412)) + 4|0);
       $414 = HEAP32[$413>>2]|0;
       $415 = (($414) - 1)|0;
       $416 = (($410) + ($415<<2)|0);
       HEAP32[$416>>2] = 1;
       break L98;
      }
      $373 = $1;
      $374 = ((($373)) + 16|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = $1;
      $377 = ((($376)) + 16|0);
      $378 = ((($377)) + 4|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = (($379) - 2)|0;
      $381 = (($375) + ($380<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = ($382|0)==(1);
      if ($383) {
       $$old = $19;
       $$old6 = ($$old|0)!=(0);
       if (!($$old6)) {
        break L98;
       }
      } else {
       $384 = $1;
       $385 = ((($384)) + 16|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = $1;
       $388 = ((($387)) + 16|0);
       $389 = ((($388)) + 4|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = (($390) - 2)|0;
       $392 = (($386) + ($391<<2)|0);
       $393 = HEAP32[$392>>2]|0;
       $394 = ($393|0)==(4);
       $395 = $19;
       $396 = ($395|0)!=(0);
       $or$cond7 = $394 & $396;
       if (!($or$cond7)) {
        break L98;
       }
      }
      $397 = $1;
      $398 = ((($397)) + 16|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = $1;
      $401 = ((($400)) + 16|0);
      $402 = ((($401)) + 4|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = (($403) - 1)|0;
      $405 = (($399) + ($404<<2)|0);
      HEAP32[$405>>2] = 1;
      break;
     }
     default: {
     }
     }
    } while(0);
    $417 = $1;
    $418 = (_StateTop($417)|0);
    $7 = $418;
    $419 = $7;
    $420 = (_IsIncludeState($419)|0);
    $421 = $420&1;
    $20 = $421;
    $422 = $2;
    _IgnorePreProcessorv2($422,$6);
    $423 = $1;
    $424 = HEAP32[$6>>2]|0;
    $425 = $20;
    $426 = $425&1;
    _Scanner_PushToken($423,139,$424,$426);
    break;
   }
   $427 = $9;
   $428 = ($427|0)==(142);
   if ($428) {
    $429 = $2;
    $430 = ((($429)) + 36|0);
    $431 = HEAP32[$430>>2]|0;
    (_StrBuilder_Append($6,$431)|0);
    $432 = $2;
    _BasicScanner_Match($432);
    $433 = $2;
    _Scanner_MatchAllPreprocessorSpaces($433,$6);
    $434 = $2;
    _IgnorePreProcessorv2($434,$6);
    $435 = $1;
    _StatePop($435);
    $436 = $1;
    $437 = (_StateTop($436)|0);
    $7 = $437;
    $438 = $7;
    $439 = (_IsIncludeState($438)|0);
    $440 = $439&1;
    $21 = $440;
    $441 = $1;
    $442 = HEAP32[$6>>2]|0;
    $443 = $21;
    $444 = $443&1;
    _Scanner_PushToken($441,142,$442,$444);
    break;
   }
   $445 = $9;
   $446 = ($445|0)==(143);
   if ($446) {
    $447 = $2;
    $448 = ((($447)) + 36|0);
    $449 = HEAP32[$448>>2]|0;
    (_StrBuilder_Append($6,$449)|0);
    $450 = $2;
    _BasicScanner_Match($450);
    $451 = $7;
    L116: do {
     switch ($451|0) {
     case 2:  {
      $461 = $1;
      $462 = ((($461)) + 16|0);
      $463 = ((($462)) + 4|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = ($464|0)>=(2);
      $466 = $1;
      $467 = ((($466)) + 16|0);
      $468 = HEAP32[$467>>2]|0;
      $469 = $1;
      $470 = ((($469)) + 16|0);
      $471 = ((($470)) + 4|0);
      $472 = HEAP32[$471>>2]|0;
      if ($465) {
       $473 = (($472) - 2)|0;
       $474 = (($468) + ($473<<2)|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = ($475|0)==(1);
       if (!($476)) {
        $477 = $1;
        $478 = ((($477)) + 16|0);
        $479 = HEAP32[$478>>2]|0;
        $480 = $1;
        $481 = ((($480)) + 16|0);
        $482 = ((($481)) + 4|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (($483) - 2)|0;
        $485 = (($479) + ($484<<2)|0);
        $486 = HEAP32[$485>>2]|0;
        $487 = ($486|0)==(4);
        if (!($487)) {
         break L116;
        }
       }
       $488 = $1;
       $489 = ((($488)) + 16|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = $1;
       $492 = ((($491)) + 16|0);
       $493 = ((($492)) + 4|0);
       $494 = HEAP32[$493>>2]|0;
       $$sink = $494;$$sink4 = $490;
      } else {
       $$sink = $472;$$sink4 = $468;
      }
      $495 = (($$sink) - 1)|0;
      $496 = (($$sink4) + ($495<<2)|0);
      HEAP32[$496>>2] = 4;
      break;
     }
     case 1:  {
      $452 = $1;
      $453 = ((($452)) + 16|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = $1;
      $456 = ((($455)) + 16|0);
      $457 = ((($456)) + 4|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = (($458) - 1)|0;
      $460 = (($454) + ($459<<2)|0);
      HEAP32[$460>>2] = 3;
      break;
     }
     default: {
     }
     }
    } while(0);
    $497 = $1;
    $498 = (_StateTop($497)|0);
    $7 = $498;
    $499 = $7;
    $500 = (_IsIncludeState($499)|0);
    $501 = $500&1;
    $22 = $501;
    $502 = $2;
    _IgnorePreProcessorv2($502,$6);
    $503 = $1;
    $504 = HEAP32[$6>>2]|0;
    $505 = $22;
    $506 = $505&1;
    _Scanner_PushToken($503,143,$504,$506);
    break;
   }
   $507 = $9;
   $508 = ($507|0)==(144);
   if ($508) {
    $509 = $4;
    (_StrBuilder_Append($6,$509)|0);
    $510 = $2;
    _BasicScanner_Match($510);
    $511 = $7;
    $512 = (_IsIncludeState($511)|0);
    if ($512) {
     ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
     (_StrBuilder_Append($23,3558)|0);
     $513 = $1;
     _GetDefineString($513,$23);
     $514 = $1;
     $515 = HEAP32[$23>>2]|0;
     _Scanner_SetError($514,$515,$vararg_buffer);
     _StrBuilder_Destroy($23);
     $516 = $2;
     _IgnorePreProcessorv2($516,$6);
     $517 = $1;
     $518 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($517,144,$518,1);
     break;
    } else {
     $519 = $1;
     $520 = $9;
     $521 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($519,$520,$521,0);
     break;
    }
   }
   $522 = $9;
   $523 = ($522|0)==(145);
   if ($523) {
    $524 = $7;
    $525 = (_IsIncludeState($524)|0);
    if ($525) {
     $526 = $2;
     $527 = ((($526)) + 36|0);
     $528 = HEAP32[$527>>2]|0;
     (_StrBuilder_Append($6,$528)|0);
     $529 = $2;
     _BasicScanner_Match($529);
     $530 = $2;
     _IgnorePreProcessorv2($530,$6);
     $531 = $1;
     $532 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($531,145,$532,1);
     break;
    } else {
     $533 = $1;
     $534 = $9;
     $535 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($533,$534,$535,0);
     break;
    }
   }
   $536 = $9;
   $537 = ($536|0)==(146);
   if ($537) {
    $538 = $7;
    $539 = (_IsIncludeState($538)|0);
    if ($539) {
     $540 = $2;
     $541 = ((($540)) + 36|0);
     $542 = HEAP32[$541>>2]|0;
     (_StrBuilder_Append($6,$542)|0);
     $543 = $2;
     _BasicScanner_Match($543);
     $544 = $1;
     $545 = (_Scanner_Top($544)|0);
     $546 = (_BasicScanner_Lexeme($545)|0);
     $4 = $546;
     $547 = $1;
     $548 = ((($547)) + 4|0);
     $549 = $4;
     (_MacroMap_RemoveKey($548,$549)|0);
     $550 = $2;
     _IgnorePreProcessorv2($550,$6);
     $551 = $1;
     $552 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($551,146,$552,1);
     break;
    } else {
     $553 = $1;
     $554 = $9;
     $555 = HEAP32[$6>>2]|0;
     _Scanner_PushToken($553,$554,$555,0);
     break;
    }
   }
   $556 = $9;
   $557 = ($556|0)==(147);
   if ($557) {
    $558 = $4;
    (_StrBuilder_Append($6,$558)|0);
    $559 = $2;
    _BasicScanner_Match($559);
    $560 = $2;
    _Scanner_MatchAllPreprocessorSpaces($560,$6);
    $561 = $7;
    $562 = (_IsIncludeState($561)|0);
    $563 = $562&1;
    $24 = $563;
    $564 = $24;
    $565 = $564&1;
    if ($565) {
     $566 = $1;
     _ParsePreDefinev2($566,$6);
    }
    $567 = $2;
    _IgnorePreProcessorv2($567,$6);
    $568 = $1;
    $569 = HEAP32[$6>>2]|0;
    $570 = $24;
    $571 = $570&1;
    _Scanner_PushToken($568,147,$569,$571);
   }
  } else {
   $572 = $3;
   $573 = ($572|0)==(7);
   if ($573) {
    $574 = $1;
    _Scanner_BuyIdentifierThatCanExpandAndCollapse($574);
    break;
   } else {
    $575 = (_ScannerItem_Create()|0);
    $25 = $575;
    $576 = $25;
    $577 = $2;
    $578 = ((($577)) + 36|0);
    _LocalStrBuilder_Swap($576,$578);
    $579 = $2;
    $580 = ((($579)) + 36|0);
    $581 = ((($580)) + 20|0);
    $582 = HEAP32[$581>>2]|0;
    $583 = $25;
    $584 = ((($583)) + 20|0);
    HEAP32[$584>>2] = $582;
    $585 = $8;
    $586 = $585&1;
    $587 = $25;
    $588 = ((($587)) + 32|0);
    $589 = $586&1;
    HEAP8[$588>>0] = $589;
    $590 = $1;
    $591 = ((($590)) + 92|0);
    $592 = $25;
    _TScannerItemList_PushBack($591,$592);
    $593 = $2;
    _BasicScanner_Match($593);
    break;
   }
  }
 } while(0);
 _StrBuilder_Destroy($6);
 STACKTOP = sp;return;
}
function _PrintPreprocessedToStringCore2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $6 = $3;
  $7 = (_Scanner_TokenAt($6,0)|0);
  $8 = ($7|0)!=(2);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = (_Scanner_TokenAt($9,0)|0);
  $4 = $10;
  $11 = $3;
  $12 = (_Scanner_LexemeAt($11,0)|0);
  $5 = $12;
  $13 = $3;
  $14 = (_Scanner_IsActiveAt($13,0)|0);
  L4: do {
   if ($14) {
    $15 = $4;
    switch ($15|0) {
    case 150: case 149: case 148: case 1:  {
     break L4;
     break;
    }
    case 147: case 146: case 145: case 144: case 143: case 142: case 141: case 140: case 139: case 138: case 137: case 136:  {
     $16 = $2;
     (_StrBuilder_Append($16,1443)|0);
     break L4;
     break;
    }
    case 5: case 4:  {
     $17 = $2;
     (_StrBuilder_Append($17,1441)|0);
     break L4;
     break;
    }
    default: {
     $18 = $2;
     $19 = $5;
     (_StrBuilder_Append($18,$19)|0);
     break L4;
    }
    }
   }
  } while(0);
  $20 = $3;
  _Scanner_Match($20);
 }
 STACKTOP = sp;return;
}
function _Scanner_ScannerItemAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $10 = $2;
 $11 = ((($10)) + 88|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 if ($13) {
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $5 = 0;
 $14 = $2;
 $15 = ((($14)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $6 = $16;
 while(1) {
  $17 = $6;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
  $21 = $6;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $6 = $23;
 }
 $24 = $3;
 $25 = $5;
 $26 = ($24|0)>=($25|0);
 if ($26) {
  $27 = $5;
  $7 = $27;
  while(1) {
   $28 = $7;
   $29 = $3;
   $30 = ($28|0)<=($29|0);
   $31 = $2;
   if (!($30)) {
    break;
   }
   _Scanner_BuyTokens($31);
   $32 = $7;
   $33 = (($32) + 1)|0;
   $7 = $33;
  }
  $34 = ((($31)) + 92|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $4 = $36;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $8 = 0;
 $37 = $2;
 $38 = ((($37)) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $9 = $39;
 while(1) {
  $40 = $9;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   label = 15;
   break;
  }
  $42 = $8;
  $43 = $3;
  $44 = ($42|0)==($43|0);
  if ($44) {
   break;
  }
  $46 = $8;
  $47 = (($46) + 1)|0;
  $8 = $47;
  $48 = $9;
  $49 = ((($48)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $9 = $50;
 }
 if ((label|0) == 15) {
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $45 = $9;
 $4 = $45;
 $51 = $4;
 STACKTOP = sp;return ($51|0);
}
function _TScannerItemList_PopFront($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 _ScannerItem_Delete($10);
 STACKTOP = sp;return;
}
function _StrBuilder_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _StrBuilder_SetN($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $5;
 $9 = (_StrBuilder_Grow($7,$8)|0);
 $10 = $9&1;
 $6 = $10;
 $11 = $6;
 $12 = $11&1;
 if (!($12)) {
  $24 = $6;
  $25 = $24&1;
  STACKTOP = sp;return ($25|0);
 }
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = $4;
 $16 = $5;
 (_strncpy($14,$15,$16)|0);
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = (($18) + ($19)|0);
 HEAP8[$20>>0] = 0;
 $21 = $5;
 $22 = $3;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $6;
 $25 = $24&1;
 STACKTOP = sp;return ($25|0);
}
function _StrBuilder_Grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 if (!($10)) {
  $27 = $4;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16|0) / 2)&-1;
 $18 = (($13) + ($17))|0;
 $5 = $18;
 $19 = $5;
 $20 = $3;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $22 = $3;
  $5 = $22;
 }
 $23 = $2;
 $24 = $5;
 $25 = (_StrBuilder_Reserve($23,$24)|0);
 $26 = $25&1;
 $4 = $26;
 $27 = $4;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _IsEmptyStr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $9 = 1;
 } else {
  $4 = $1;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(0);
  $9 = $7;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _LoadFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = 0;
 $10 = $3;
 $11 = (_fopen($10,3227)|0);
 $8 = $11;
 $12 = $8;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $39 = $6;
  $40 = $39&1;
  STACKTOP = sp;return ($40|0);
 }
 $14 = $8;
 (_fseek($14,0,2)|0);
 $15 = $8;
 $16 = (_ftell($15)|0);
 $7 = $16;
 $17 = $8;
 _rewind($17);
 $18 = $7;
 $19 = (($18) + 1)|0;
 $20 = (_malloc($19)|0);
 $9 = $20;
 $21 = $9;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $9;
  $24 = $7;
  $25 = $8;
  (_fread($23,1,$24,$25)|0);
  $26 = $8;
  (_feof($26)|0);
  $27 = $8;
  $28 = (_ferror($27)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $9;
   $31 = $7;
   $32 = (($30) + ($31)|0);
   HEAP8[$32>>0] = 0;
   $33 = $9;
   $34 = $4;
   HEAP32[$34>>2] = $33;
   $9 = 0;
   $6 = 1;
   $35 = $7;
   $36 = $5;
   HEAP32[$36>>2] = $35;
  }
  $37 = $9;
  _free($37);
 }
 $38 = $8;
 (_fclose($38)|0);
 $39 = $6;
 $40 = $39&1;
 STACKTOP = sp;return ($40|0);
}
function _SymbolMap_RemoveAll($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  if (!($12)) {
   break;
  }
  $15 = $2;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $3 = $17;
  while(1) {
   $18 = $3;
   $19 = ($18|0)!=(0|0);
   if (!($19)) {
    break;
   }
   $20 = $3;
   $4 = $20;
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $3 = $22;
   $23 = $4;
   _SymbolMap_KeyValue_Delete($23);
  }
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
 }
 _free($14);
 $26 = $1;
 HEAP32[$26>>2] = 0;
 $27 = $1;
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = 0;
 STACKTOP = sp;return;
}
function _SymbolMap_KeyValue_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _String_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _SymbolMap_FindBucket($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $11 = $4;
  $12 = (_SymbolMap_String2_HashKey($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = $3;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13>>>0) % ($16>>>0))&-1;
  $6 = $17;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $7 = $22;
  $23 = $7;
  $2 = $23;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _SymbolMap_String2_HashKey($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = -2128831035;
 $3 = 0;
 $6 = $1;
 $7 = (_strlen($6)|0);
 $4 = $7;
 $8 = $4;
 $9 = (($8>>>0) / 10)&-1;
 $10 = (1 + ($9))|0;
 $5 = $10;
 while(1) {
  $11 = $3;
  $12 = $4;
  $13 = ($11>>>0)<($12>>>0);
  $14 = $2;
  if (!($13)) {
   break;
  }
  $15 = Math_imul(16777619, $14)|0;
  $16 = $1;
  $17 = $3;
  $18 = (($16) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = $15 ^ $20;
  $2 = $21;
  $22 = $5;
  $23 = $3;
  $24 = (($23) + ($22))|0;
  $3 = $24;
 }
 STACKTOP = sp;return ($14|0);
}
function _SymbolMap_GetAssocAt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $8;
  HEAP32[$14>>2] = 0;
  $15 = $7;
  HEAP32[$15>>2] = 0;
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $6;
 $17 = (_SymbolMap_String2_HashKey($16)|0);
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $8;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20>>>0) % ($23>>>0))&-1;
 $25 = $7;
 HEAP32[$25>>2] = $24;
 $9 = 0;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $10 = $31;
 while(1) {
  $32 = $10;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $8;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)==($38|0);
  if ($39) {
   $40 = $10;
   $41 = ((($40)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $6;
   $44 = (_strcmp($42,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    label = 7;
    break;
   }
  }
  $47 = $10;
  $48 = HEAP32[$47>>2]|0;
  $10 = $48;
 }
 if ((label|0) == 7) {
  $46 = $10;
  $9 = $46;
 }
 $49 = $9;
 $4 = $49;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _SymbolMap_FindFunction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $32 = $4;
  STACKTOP = sp;return ($32|0);
 }
 $11 = $2;
 $12 = $3;
 $13 = (_SymbolMap_GetAssocAt($11,$12,$5,$6)|0);
 $7 = $13;
 while(1) {
  $14 = $7;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = $7;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(1);
  if ($20) {
   $21 = $7;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $3;
   $25 = (_strcmp($23,$24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   }
  }
  $30 = $7;
  $31 = HEAP32[$30>>2]|0;
  $7 = $31;
 }
 if ((label|0) == 8) {
  $32 = $4;
  STACKTOP = sp;return ($32|0);
 }
 $27 = $7;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $4 = $29;
 $32 = $4;
 STACKTOP = sp;return ($32|0);
}
function _TokenArray_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TokenArray_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TokenArray_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TokenArray_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TokenArray_Delete($2);
 STACKTOP = sp;return;
}
function _TPointerList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 while(1) {
  $11 = $8;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = $8;
  $16 = $7;
  _TPointer_CodePrint($13,$14,$15,$16);
  $17 = $8;
  $18 = ((($17)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $8 = $19;
 }
 STACKTOP = sp;return;
}
function _TDirectDeclarator_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $10 = $3&1;
 $8 = $10;
 $9 = $4;
 $11 = $7;
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $7;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $6;
  $17 = $7;
  $18 = ((($17)) + 56|0);
  $19 = $9;
  _TNodeClueList_CodePrint($16,$18,$19);
  $20 = $8;
  $21 = $20&1;
  if ($21) {
   $22 = $9;
   $23 = $6;
   $24 = $7;
   $25 = HEAP32[$24>>2]|0;
   _Output_Append($22,$23,$25);
  }
 } else {
  $26 = $7;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $6;
   $31 = $7;
   $32 = ((($31)) + 56|0);
   $33 = $9;
   _TNodeClueList_CodePrint($30,$32,$33);
   $34 = $9;
   $35 = $6;
   _Output_Append($34,$35,1750);
   $36 = $5;
   $37 = $6;
   $38 = $7;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $8;
   $42 = $41&1;
   $43 = $9;
   _TDeclarator_CodePrint($36,$37,$40,$42,$43);
   $44 = $6;
   $45 = $7;
   $46 = ((($45)) + 64|0);
   $47 = $9;
   _TNodeClueList_CodePrint($44,$46,$47);
   $48 = $9;
   $49 = $6;
   _Output_Append($48,$49,1752);
  }
 }
 $50 = $7;
 $51 = ((($50)) + 52|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(4);
 if ($53) {
  $54 = $6;
  $55 = $7;
  $56 = ((($55)) + 72|0);
  $57 = $9;
  _TNodeClueList_CodePrint($54,$56,$57);
  $58 = $9;
  $59 = $6;
  _Output_Append($58,$59,1535);
  $60 = $7;
  $61 = ((($60)) + 48|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0|0);
  if ($63) {
   $64 = $5;
   $65 = $6;
   $66 = $7;
   $67 = ((($66)) + 48|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $9;
   _TExpression_CodePrint($64,$65,$68,1537,$69);
  }
  $70 = $6;
  $71 = $7;
  $72 = ((($71)) + 80|0);
  $73 = $9;
  _TNodeClueList_CodePrint($70,$72,$73);
  $74 = $9;
  $75 = $6;
  _Output_Append($74,$75,1447);
 }
 $76 = $7;
 $77 = ((($76)) + 52|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)==(3);
 if ($79) {
  $80 = $6;
  $81 = $7;
  $82 = ((($81)) + 72|0);
  $83 = $9;
  _TNodeClueList_CodePrint($80,$82,$83);
  $84 = $9;
  $85 = $6;
  _Output_Append($84,$85,1750);
  $86 = $5;
  $87 = $6;
  $88 = $7;
  $89 = ((($88)) + 20|0);
  $90 = $9;
  _TParameterTypeList_CodePrint($86,$87,$89,$90);
  $91 = $6;
  $92 = $7;
  $93 = ((($92)) + 80|0);
  $94 = $9;
  _TNodeClueList_CodePrint($91,$93,$94);
  $95 = $9;
  $96 = $6;
  _Output_Append($95,$96,1752);
 }
 $97 = $7;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)!=(0|0);
 if (!($100)) {
  STACKTOP = sp;return;
 }
 $101 = $5;
 $102 = $6;
 $103 = $7;
 $104 = ((($103)) + 8|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $8;
 $107 = $106&1;
 $108 = $9;
 _TDirectDeclarator_CodePrint($101,$102,$105,$107,$108);
 STACKTOP = sp;return;
}
function _TPointer_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 24|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,1439);
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 _TTypeQualifierList_CodePrint($14,$15,$16,$17);
 STACKTOP = sp;return;
}
function _TTypeQualifierList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = $8;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $9 = $18;
  $19 = $4;
  $20 = $5;
  $21 = $9;
  $22 = $7;
  _TTypeQualifier_CodePrint($19,$20,$21,$22);
  $23 = $8;
  $24 = (($23) + 1)|0;
  $8 = $24;
 }
 STACKTOP = sp;return;
}
function _TExpression_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $19 = $7;
 $20 = ($19|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $7;
 $22 = HEAP32[$21>>2]|0;
 switch ($22|0) {
 case 35:  {
  $23 = $7;
  $10 = $23;
  $24 = $5;
  $25 = $6;
  $26 = $10;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $9;
  _TExpression_CodePrint($24,$25,$28,1508,$29);
  $30 = $6;
  $31 = $10;
  $32 = ((($31)) + 24|0);
  $33 = $9;
  _TNodeClueList_CodePrint($30,$32,$33);
  $34 = $9;
  $35 = $6;
  $36 = $10;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_TokenToString($38)|0);
  _Output_Append($34,$35,$39);
  $40 = $5;
  $41 = $6;
  $42 = $7;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $9;
  _TExpression_CodePrint($40,$41,$44,1515,$45);
  STACKTOP = sp;return;
  break;
 }
 case 36:  {
  $46 = $7;
  $11 = $46;
  $47 = $5;
  $48 = $6;
  $49 = $11;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $9;
  _TExpression_CodePrint($47,$48,$51,1508,$52);
  $53 = $6;
  $54 = $11;
  $55 = ((($54)) + 20|0);
  $56 = $9;
  _TNodeClueList_CodePrint($53,$55,$56);
  $57 = $9;
  $58 = $6;
  _Output_Append($57,$58,1770);
  $59 = $5;
  $60 = $6;
  $61 = $11;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $9;
  _TExpression_CodePrint($59,$60,$63,1522,$64);
  $65 = $6;
  $66 = $11;
  $67 = ((($66)) + 28|0);
  $68 = $9;
  _TNodeClueList_CodePrint($65,$67,$68);
  $69 = $9;
  $70 = $6;
  _Output_Append($69,$70,1760);
  $71 = $5;
  $72 = $6;
  $73 = $11;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $9;
  _TExpression_CodePrint($71,$72,$75,1515,$76);
  STACKTOP = sp;return;
  break;
 }
 case 33:  {
  $77 = $7;
  $12 = $77;
  $78 = $12;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $13 = $80;
  while(1) {
   $81 = $13;
   $82 = ($81|0)!=(0|0);
   if (!($82)) {
    break;
   }
   $83 = $6;
   $84 = $13;
   $85 = ((($84)) + 8|0);
   $86 = $9;
   _TNodeClueList_CodePrint($83,$85,$86);
   $87 = $9;
   $88 = $6;
   $89 = $13;
   $90 = ((($89)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   _Output_Append($87,$88,$91);
   $92 = $13;
   $93 = HEAP32[$92>>2]|0;
   $13 = $93;
  }
  STACKTOP = sp;return;
  break;
 }
 case 32:  {
  $94 = $7;
  $14 = $94;
  $95 = $14;
  $96 = ((($95)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0|0);
  $99 = $6;
  $100 = $14;
  $101 = ((($100)) + 16|0);
  $102 = $9;
  _TNodeClueList_CodePrint($99,$101,$102);
  $103 = $9;
  $104 = $6;
  if ($98) {
   _Output_Append($103,$104,1750);
   $105 = $5;
   $106 = $6;
   $107 = $14;
   $108 = ((($107)) + 12|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $9;
   _TExpression_CodePrint($105,$106,$109,1469,$110);
   $111 = $6;
   $112 = $14;
   $113 = ((($112)) + 24|0);
   $114 = $9;
   _TNodeClueList_CodePrint($111,$113,$114);
   $115 = $9;
   $116 = $6;
   _Output_Append($115,$116,1752);
   STACKTOP = sp;return;
  } else {
   $117 = $14;
   $118 = ((($117)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   _Output_Append($103,$104,$119);
   STACKTOP = sp;return;
  }
  break;
 }
 case 37:  {
  $120 = $7;
  $15 = $120;
  $121 = $5;
  $122 = $6;
  $123 = $15;
  $124 = $9;
  _TPrimaryExpressionLambda_CodePrint($121,$122,$123,$124);
  STACKTOP = sp;return;
  break;
 }
 case 34:  {
  $125 = $7;
  $16 = $125;
  $126 = $5;
  $127 = $6;
  $128 = $16;
  $129 = $9;
  _TPostfixExpressionCore_CodePrint($126,$127,$128,$129);
  STACKTOP = sp;return;
  break;
 }
 case 30:  {
  $130 = $7;
  $17 = $130;
  $131 = $6;
  $132 = $17;
  $133 = ((($132)) + 48|0);
  $134 = $9;
  _TNodeClueList_CodePrint($131,$133,$134);
  $135 = $17;
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137|0)==(110);
  if (!($138)) {
   $172 = $9;
   $173 = $6;
   $174 = $7;
   $175 = ((($174)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (_TokenToString($176)|0);
   _Output_Append($172,$173,$177);
   $178 = $5;
   $179 = $6;
   $180 = $17;
   $181 = ((($180)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $9;
   _TExpression_CodePrint($178,$179,$182,1469,$183);
   STACKTOP = sp;return;
  }
  $139 = $17;
  $140 = ((($139)) + 12|0);
  $141 = ((($140)) + 4|0);
  $142 = ((($141)) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143|0)>(0);
  $145 = $9;
  $146 = $6;
  _Output_Append($145,$146,1954);
  if ($144) {
   $147 = $6;
   $148 = $17;
   $149 = ((($148)) + 56|0);
   $150 = $9;
   _TNodeClueList_CodePrint($147,$149,$150);
   $151 = $9;
   $152 = $6;
   _Output_Append($151,$152,1750);
   $153 = $5;
   $154 = $6;
   $155 = $17;
   $156 = ((($155)) + 12|0);
   $157 = $9;
   _TTypeName_CodePrint($153,$154,$156,$157);
   $158 = $6;
   $159 = $17;
   $160 = ((($159)) + 64|0);
   $161 = $9;
   _TNodeClueList_CodePrint($158,$160,$161);
   $162 = $9;
   $163 = $6;
   _Output_Append($162,$163,1752);
   STACKTOP = sp;return;
  } else {
   $164 = $5;
   $165 = $6;
   $166 = $17;
   $167 = ((($166)) + 8|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $9;
   _TExpression_CodePrint($164,$165,$168,1469,$169);
   $170 = $9;
   $171 = $6;
   _Output_Append($170,$171,9460);
   STACKTOP = sp;return;
  }
  break;
 }
 case 31:  {
  $184 = $7;
  $18 = $184;
  $185 = $6;
  $186 = $18;
  $187 = ((($186)) + 44|0);
  $188 = $9;
  _TNodeClueList_CodePrint($185,$187,$188);
  $189 = $9;
  $190 = $6;
  _Output_Append($189,$190,1750);
  $191 = $5;
  $192 = $6;
  $193 = $18;
  $194 = ((($193)) + 8|0);
  $195 = $9;
  _TTypeName_CodePrint($191,$192,$194,$195);
  $196 = $6;
  $197 = $18;
  $198 = ((($197)) + 52|0);
  $199 = $9;
  _TNodeClueList_CodePrint($196,$198,$199);
  $200 = $9;
  $201 = $6;
  _Output_Append($200,$201,1752);
  $202 = $5;
  $203 = $6;
  $204 = $18;
  $205 = ((($204)) + 4|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $9;
  _TExpression_CodePrint($202,$203,$206,1469,$207);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _TParameterTypeList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _TParameterList_CodePrint($8,$9,$10,$11);
 $12 = $6;
 $13 = ((($12)) + 24|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $5;
 $17 = $6;
 $18 = ((($17)) + 16|0);
 $19 = $7;
 _TNodeClueList_CodePrint($16,$18,$19);
 $20 = $7;
 $21 = $5;
 _Output_Append($20,$21,2111);
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLambda_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $7;
 $10 = HEAP32[2220]|0;
 HEAP32[$vararg_buffer>>2] = $10;
 _StrBuilder_AppendFmt($9,3725,$vararg_buffer);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $5;
  _Output_Append($8,$15,1443);
  $16 = HEAP32[2220]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  _StrBuilder_AppendFmt($8,3736,$vararg_buffer1);
  $17 = $4;
  $18 = $5;
  $19 = $6;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  _TParameterTypeList_CodePrint($17,$18,$21,$8);
  $22 = $5;
  _Output_Append($8,$22,1752);
 }
 $23 = HEAP32[2220]|0;
 $24 = (($23) + 1)|0;
 HEAP32[2220] = $24;
 $25 = $4;
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 _TCompoundStatement_CodePrint($25,$26,$29,$8);
 $30 = $4;
 $31 = ((($30)) + 52|0);
 $32 = $5;
 _Output_Append($31,$32,1443);
 $33 = $4;
 $34 = ((($33)) + 52|0);
 $35 = HEAP32[$8>>2]|0;
 (_StrBuilder_Append($34,$35)|0);
 _StrBuilder_Destroy($8);
 STACKTOP = sp;return;
}
function _TPostfixExpressionCore_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $4;
  $14 = $5;
  $15 = $6;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $7;
  _TExpression_CodePrint($13,$14,$17,1504,$18);
 }
 $19 = $6;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $5;
  $24 = $6;
  $25 = ((($24)) + 40|0);
  $26 = $7;
  _TNodeClueList_CodePrint($23,$25,$26);
  $27 = $7;
  $28 = $5;
  _Output_Append($27,$28,1750);
  $29 = $4;
  $30 = $5;
  $31 = $6;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $7;
  _TTypeName_CodePrint($29,$30,$33,$34);
  $35 = $5;
  $36 = $6;
  $37 = ((($36)) + 48|0);
  $38 = $7;
  _TNodeClueList_CodePrint($35,$37,$38);
  $39 = $7;
  $40 = $5;
  _Output_Append($39,$40,1752);
  $41 = $6;
  $42 = ((($41)) + 36|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 16|0);
  $45 = (_TPointerList_IsPointer($44)|0);
  $46 = $45&1;
  $8 = $46;
  $47 = $4;
  $48 = $5;
  $49 = $6;
  $50 = ((($49)) + 36|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 4|0);
  $53 = $6;
  $54 = ((($53)) + 24|0);
  $55 = $7;
  _TInitializerList_CodePrint($47,$48,$52,0,$54,$55);
 }
 $56 = $6;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 switch ($58|0) {
 case 34:  {
  $59 = $5;
  $60 = $6;
  $61 = ((($60)) + 40|0);
  $62 = $7;
  _TNodeClueList_CodePrint($59,$61,$62);
  $63 = $7;
  $64 = $5;
  _Output_Append($63,$64,6966);
  $65 = $5;
  $66 = $6;
  $67 = ((($66)) + 48|0);
  $68 = $7;
  _TNodeClueList_CodePrint($65,$67,$68);
  $69 = $7;
  $70 = $5;
  $71 = $6;
  $72 = ((($71)) + 32|0);
  $73 = HEAP32[$72>>2]|0;
  _Output_Append($69,$70,$73);
  break;
 }
 case 53:  {
  $74 = $5;
  $75 = $6;
  $76 = ((($75)) + 40|0);
  $77 = $7;
  _TNodeClueList_CodePrint($74,$76,$77);
  $78 = $7;
  $79 = $5;
  _Output_Append($78,$79,2038);
  $80 = $5;
  $81 = $6;
  $82 = ((($81)) + 48|0);
  $83 = $7;
  _TNodeClueList_CodePrint($80,$82,$83);
  $84 = $7;
  $85 = $5;
  $86 = $6;
  $87 = ((($86)) + 32|0);
  $88 = HEAP32[$87>>2]|0;
  _Output_Append($84,$85,$88);
  break;
 }
 case 43:  {
  $89 = $5;
  $90 = $6;
  $91 = ((($90)) + 40|0);
  $92 = $7;
  _TNodeClueList_CodePrint($89,$91,$92);
  $93 = $7;
  $94 = $5;
  _Output_Append($93,$94,1535);
  $95 = $4;
  $96 = $5;
  $97 = $6;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $7;
  _TExpression_CodePrint($95,$96,$99,1506,$100);
  $101 = $5;
  $102 = $6;
  $103 = ((($102)) + 48|0);
  $104 = $7;
  _TNodeClueList_CodePrint($101,$103,$104);
  $105 = $7;
  $106 = $5;
  _Output_Append($105,$106,1447);
  break;
 }
 case 27:  {
  $107 = $5;
  $108 = $6;
  $109 = ((($108)) + 40|0);
  $110 = $7;
  _TNodeClueList_CodePrint($107,$109,$110);
  $111 = $7;
  $112 = $5;
  _Output_Append($111,$112,1750);
  $113 = $4;
  $114 = $5;
  $115 = $6;
  $116 = ((($115)) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $7;
  _TExpression_CodePrint($113,$114,$117,1506,$118);
  $119 = $5;
  $120 = $6;
  $121 = ((($120)) + 48|0);
  $122 = $7;
  _TNodeClueList_CodePrint($119,$121,$122);
  $123 = $7;
  $124 = $5;
  _Output_Append($123,$124,1752);
  break;
 }
 case 54:  {
  $125 = $5;
  $126 = $6;
  $127 = ((($126)) + 40|0);
  $128 = $7;
  _TNodeClueList_CodePrint($125,$127,$128);
  $129 = $7;
  $130 = $5;
  _Output_Append($129,$130,2041);
  break;
 }
 case 55:  {
  $131 = $5;
  $132 = $6;
  $133 = ((($132)) + 40|0);
  $134 = $7;
  _TNodeClueList_CodePrint($131,$133,$134);
  $135 = $7;
  $136 = $5;
  _Output_Append($135,$136,2044);
  break;
 }
 default: {
 }
 }
 $137 = $6;
 $138 = ((($137)) + 20|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0|0);
 if (!($140)) {
  STACKTOP = sp;return;
 }
 $141 = $4;
 $142 = $5;
 $143 = $6;
 $144 = ((($143)) + 20|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $7;
 _TPostfixExpressionCore_CodePrint($141,$142,$145,$146);
 STACKTOP = sp;return;
}
function _TCompoundStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = $6;
 $12 = ((($11)) + 16|0);
 $13 = $7;
 _TNodeClueList_CodePrint($10,$12,$13);
 $14 = $7;
 $15 = $5;
 _Output_Append($14,$15,1502);
 $8 = 0;
 while(1) {
  $16 = $8;
  $17 = $6;
  $18 = ((($17)) + 4|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($16|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $6;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $9 = $27;
  $28 = $4;
  $29 = $5;
  $30 = $9;
  $31 = $7;
  _TBlockItem_CodePrint($28,$29,$30,$31);
  $32 = $8;
  $33 = (($32) + 1)|0;
  $8 = $33;
 }
 $34 = $5;
 $35 = $6;
 $36 = ((($35)) + 24|0);
 $37 = $7;
 _TNodeClueList_CodePrint($34,$36,$37);
 $38 = $7;
 $39 = $5;
 _Output_Append($38,$39,1449);
 STACKTOP = sp;return;
}
function _TBlockItem_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 L1: do {
  if (!($9)) {
   $10 = $6;
   $11 = HEAP32[$10>>2]|0;
   do {
    switch ($11|0) {
    case 22:  {
     $52 = $4;
     $53 = $5;
     $54 = $6;
     $55 = $7;
     _TAsmStatement_CodePrint($52,$53,$54,$55);
     break L1;
     break;
    }
    case 17:  {
     $48 = $4;
     $49 = $5;
     $50 = $6;
     $51 = $7;
     _TExpressionStatement_CodePrint($48,$49,$50,$51);
     break L1;
     break;
    }
    case 18:  {
     $12 = $4;
     $13 = $5;
     $14 = $6;
     $15 = $7;
     _TSwitchStatement_CodePrint($12,$13,$14,$15);
     break L1;
     break;
    }
    case 21:  {
     $16 = $4;
     $17 = $5;
     $18 = $6;
     $19 = $7;
     _TJumpStatement_CodePrint($16,$17,$18,$19);
     break L1;
     break;
    }
    case 20:  {
     $20 = $4;
     $21 = $5;
     $22 = $6;
     $23 = $7;
     _TForStatement_CodePrint($20,$21,$22,$23);
     break L1;
     break;
    }
    case 25:  {
     $24 = $4;
     $25 = $5;
     $26 = $6;
     $27 = $7;
     _TIfStatement_CodePrint($24,$25,$26,$27);
     break L1;
     break;
    }
    case 23:  {
     $28 = $4;
     $29 = $5;
     $30 = $6;
     $31 = $7;
     _TWhileStatement_CodePrint($28,$29,$30,$31);
     break L1;
     break;
    }
    case 24:  {
     $32 = $4;
     $33 = $5;
     $34 = $6;
     $35 = $7;
     _TDoStatement_CodePrint($32,$33,$34,$35);
     break L1;
     break;
    }
    case 1:  {
     $36 = $4;
     $37 = $5;
     $38 = $6;
     $39 = $7;
     _TDeclaration_CodePrint($36,$37,$38,$39);
     break L1;
     break;
    }
    case 19:  {
     $40 = $4;
     $41 = $5;
     $42 = $6;
     $43 = $7;
     _TLabeledStatement_CodePrint($40,$41,$42,$43);
     break L1;
     break;
    }
    case 16:  {
     $44 = $4;
     $45 = $5;
     $46 = $6;
     $47 = $7;
     _TCompoundStatement_CodePrint($44,$45,$46,$47);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TSwitchStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,1975);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 20|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,1750);
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _TExpression_CodePrint($20,$21,$24,1469,$25);
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 28|0);
 $29 = $7;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $7;
 $31 = $5;
 _Output_Append($30,$31,1752);
 $32 = $4;
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $7;
 _TStatement_CodePrint($32,$33,$36,$37);
 STACKTOP = sp;return;
}
function _TJumpStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 16|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $6;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 switch ($14|0) {
 case 97:  {
  $15 = $7;
  $16 = $5;
  _Output_Append($15,$16,1867);
  $17 = $5;
  $18 = $6;
  $19 = ((($18)) + 24|0);
  $20 = $7;
  _TNodeClueList_CodePrint($17,$19,$20);
  $21 = $7;
  $22 = $5;
  $23 = $6;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  _Output_Append($21,$22,$25);
  break;
 }
 case 88:  {
  $26 = $7;
  $27 = $5;
  _Output_Append($26,$27,1813);
  break;
 }
 case 84:  {
  $28 = $7;
  $29 = $5;
  _Output_Append($28,$29,1791);
  break;
 }
 case 107:  {
  $30 = $7;
  $31 = $5;
  _Output_Append($30,$31,1934);
  $32 = $5;
  $33 = $6;
  $34 = ((($33)) + 24|0);
  $35 = $7;
  _TNodeClueList_CodePrint($32,$34,$35);
  $36 = $4;
  $37 = $5;
  $38 = $6;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $7;
  _TExpression_CodePrint($36,$37,$40,9460,$41);
  break;
 }
 default: {
 }
 }
 $42 = $5;
 $43 = $6;
 $44 = ((($43)) + 32|0);
 $45 = $7;
 _TNodeClueList_CodePrint($42,$44,$45);
 $46 = $7;
 $47 = $5;
 _Output_Append($46,$47,1762);
 STACKTOP = sp;return;
}
function _TForStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 24|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,1863);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 32|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,1750);
 $20 = $6;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 $24 = $4;
 $25 = $5;
 $26 = $6;
 if (!($23)) {
  $52 = ((($26)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $7;
  _TExpression_CodePrint($24,$25,$53,1451,$54);
  $55 = $5;
  $56 = $6;
  $57 = ((($56)) + 40|0);
  $58 = $7;
  _TNodeClueList_CodePrint($55,$57,$58);
  $59 = $7;
  $60 = $5;
  _Output_Append($59,$60,1762);
  $61 = $4;
  $62 = $5;
  $63 = $6;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $7;
  _TExpression_CodePrint($61,$62,$65,1457,$66);
  $67 = $5;
  $68 = $6;
  $69 = ((($68)) + 48|0);
  $70 = $7;
  _TNodeClueList_CodePrint($67,$69,$70);
  $71 = $7;
  $72 = $5;
  _Output_Append($71,$72,1762);
  $73 = $4;
  $74 = $5;
  $75 = $6;
  $76 = ((($75)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $7;
  _TExpression_CodePrint($73,$74,$77,1463,$78);
  $79 = $5;
  $80 = $6;
  $81 = ((($80)) + 56|0);
  $82 = $7;
  _TNodeClueList_CodePrint($79,$81,$82);
  $83 = $7;
  $84 = $5;
  _Output_Append($83,$84,1752);
  $85 = $4;
  $86 = $5;
  $87 = $6;
  $88 = ((($87)) + 20|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $7;
  _TStatement_CodePrint($85,$86,$89,$90);
  STACKTOP = sp;return;
 }
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $7;
 _TAnyDeclaration_CodePrint($24,$25,$28,$29);
 $30 = $6;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $4;
  $35 = $5;
  $36 = $6;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  _TExpression_CodePrint($34,$35,$38,1457,$39);
 }
 $40 = $5;
 $41 = $6;
 $42 = ((($41)) + 40|0);
 $43 = $7;
 _TNodeClueList_CodePrint($40,$42,$43);
 $44 = $7;
 $45 = $5;
 _Output_Append($44,$45,1762);
 $46 = $4;
 $47 = $5;
 $48 = $6;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $7;
 _TExpression_CodePrint($46,$47,$50,1463,$51);
 $79 = $5;
 $80 = $6;
 $81 = ((($80)) + 56|0);
 $82 = $7;
 _TNodeClueList_CodePrint($79,$81,$82);
 $83 = $7;
 $84 = $5;
 _Output_Append($83,$84,1752);
 $85 = $4;
 $86 = $5;
 $87 = $6;
 $88 = ((($87)) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $7;
 _TStatement_CodePrint($85,$86,$89,$90);
 STACKTOP = sp;return;
}
function _TIfStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 16|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,1872);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 24|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,1750);
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _TExpression_CodePrint($20,$21,$24,1469,$25);
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 32|0);
 $29 = $7;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $7;
 $31 = $5;
 _Output_Append($30,$31,1752);
 $32 = $6;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(16);
 if ($36) {
  $37 = $7;
  $38 = $5;
  _Output_Append($37,$38,9460);
 }
 $39 = $6;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $4;
  $44 = $5;
  $45 = $6;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $7;
  _TStatement_CodePrint($43,$44,$47,$48);
 }
 $49 = $6;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $5;
 $54 = $6;
 $55 = ((($54)) + 40|0);
 $56 = $7;
 _TNodeClueList_CodePrint($53,$55,$56);
 $57 = $7;
 $58 = $5;
 _Output_Append($57,$58,1840);
 $59 = $4;
 $60 = $5;
 $61 = $6;
 $62 = ((($61)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $7;
 _TStatement_CodePrint($59,$60,$63,$64);
 STACKTOP = sp;return;
}
function _TWhileStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,2032);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 20|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,1750);
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _TExpression_CodePrint($20,$21,$24,1469,$25);
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 28|0);
 $29 = $7;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $7;
 $31 = $5;
 _Output_Append($30,$31,1752);
 $32 = $4;
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $7;
 _TStatement_CodePrint($32,$33,$36,$37);
 STACKTOP = sp;return;
}
function _TDoStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,1830);
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $7;
 _TStatement_CodePrint($14,$15,$18,$19);
 $20 = $5;
 $21 = $6;
 $22 = ((($21)) + 20|0);
 $23 = $7;
 _TNodeClueList_CodePrint($20,$22,$23);
 $24 = $7;
 $25 = $5;
 _Output_Append($24,$25,2032);
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 28|0);
 $29 = $7;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $7;
 $31 = $5;
 _Output_Append($30,$31,1750);
 $32 = $4;
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $7;
 _TExpression_CodePrint($32,$33,$36,1469,$37);
 $38 = $5;
 $39 = $6;
 $40 = ((($39)) + 36|0);
 $41 = $7;
 _TNodeClueList_CodePrint($38,$40,$41);
 $42 = $7;
 $43 = $5;
 _Output_Append($42,$43,1752);
 $44 = $5;
 $45 = $6;
 $46 = ((($45)) + 44|0);
 $47 = $7;
 _TNodeClueList_CodePrint($44,$46,$47);
 $48 = $7;
 $49 = $5;
 _Output_Append($48,$49,1762);
 STACKTOP = sp;return;
}
function _TDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = $7;
 _TDeclarationSpecifiers_CodePrint($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = $6;
 $18 = ((($17)) + 16|0);
 $19 = $7;
 _TInitDeclaratorList_CodePrint($13,$14,$16,$18,$19);
 $20 = $6;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 $24 = $6;
 $25 = ((($24)) + 44|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if (!($23)) {
  $61 = $5;
  if (!($27)) {
   $87 = $6;
   $88 = ((($87)) + 48|0);
   $89 = $7;
   _TNodeClueList_CodePrint($61,$88,$89);
   $90 = $7;
   $91 = $5;
   _Output_Append($90,$91,1762);
   STACKTOP = sp;return;
  }
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0);
  $65 = $5;
  if ($64) {
   $66 = $6;
   $67 = ((($66)) + 48|0);
   $68 = $7;
   _TNodeClueList_CodePrint($65,$67,$68);
   $69 = $7;
   $70 = $5;
   _Output_Append($69,$70,3772);
   $71 = $4;
   $72 = $5;
   $73 = $6;
   $74 = $7;
   _DefaultFunctionDefinition_CodePrint($71,$72,$73,$74);
   $75 = $7;
   $76 = $5;
   _Output_Append($75,$76,1449);
   STACKTOP = sp;return;
  }
  $77 = ((($65)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==(2);
  if (!($79)) {
   STACKTOP = sp;return;
  }
  $80 = $5;
  $81 = $6;
  $82 = ((($81)) + 48|0);
  $83 = $7;
  _TNodeClueList_CodePrint($80,$82,$83);
  $84 = $7;
  (_StrBuilder_Append($84,3776)|0);
  $85 = $7;
  $86 = $5;
  _Output_Append($85,$86,1762);
  STACKTOP = sp;return;
 }
 if (!($27)) {
  $51 = $6;
  $52 = ((($51)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   STACKTOP = sp;return;
  }
  $55 = $4;
  $56 = $5;
  $57 = $6;
  $58 = ((($57)) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $7;
  _TCompoundStatement_CodePrint($55,$56,$59,$60);
  STACKTOP = sp;return;
 }
 $28 = $5;
 $29 = $6;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 16|0);
 $33 = $7;
 _TNodeClueList_CodePrint($28,$32,$33);
 $34 = $5;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $7;
  $39 = $5;
  _Output_Append($38,$39,3760);
  $40 = $4;
  $41 = $5;
  $42 = $6;
  $43 = $7;
  _DefaultFunctionDefinition_CodePrint($40,$41,$42,$43);
  $44 = $7;
  $45 = $5;
  _Output_Append($44,$45,1449);
  STACKTOP = sp;return;
 }
 $46 = $5;
 $47 = ((($46)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(2);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $7;
 (_StrBuilder_Append($50,3763)|0);
 STACKTOP = sp;return;
}
function _TLabeledStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(85);
 if ($11) {
  $12 = $5;
  $13 = $6;
  $14 = ((($13)) + 20|0);
  $15 = $7;
  _TNodeClueList_CodePrint($12,$14,$15);
  $16 = $7;
  $17 = $5;
  _Output_Append($16,$17,1797);
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $4;
   $23 = $5;
   $24 = $6;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $7;
   _TExpression_CodePrint($22,$23,$26,9460,$27);
  }
  $28 = $5;
  $29 = $6;
  $30 = ((($29)) + 28|0);
  $31 = $7;
  _TNodeClueList_CodePrint($28,$30,$31);
  $32 = $7;
  $33 = $5;
  _Output_Append($32,$33,1760);
  $34 = $4;
  $35 = $5;
  $36 = $6;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  _TStatement_CodePrint($34,$35,$38,$39);
  STACKTOP = sp;return;
 }
 $40 = $6;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(89);
 if ($43) {
  $44 = $5;
  $45 = $6;
  $46 = ((($45)) + 20|0);
  $47 = $7;
  _TNodeClueList_CodePrint($44,$46,$47);
  $48 = $7;
  $49 = $5;
  _Output_Append($48,$49,1822);
  $50 = $5;
  $51 = $6;
  $52 = ((($51)) + 28|0);
  $53 = $7;
  _TNodeClueList_CodePrint($50,$52,$53);
  $54 = $7;
  $55 = $5;
  _Output_Append($54,$55,1760);
  $56 = $4;
  $57 = $5;
  $58 = $6;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $7;
  _TStatement_CodePrint($56,$57,$60,$61);
  STACKTOP = sp;return;
 }
 $62 = $6;
 $63 = ((($62)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(7);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $5;
 $67 = $6;
 $68 = ((($67)) + 20|0);
 $69 = $7;
 _TNodeClueList_CodePrint($66,$68,$69);
 $70 = $7;
 $71 = $5;
 $72 = $6;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 _Output_Append($70,$71,$74);
 $75 = $5;
 $76 = $6;
 $77 = ((($76)) + 28|0);
 $78 = $7;
 _TNodeClueList_CodePrint($75,$77,$78);
 $79 = $7;
 $80 = $5;
 _Output_Append($79,$80,1760);
 $81 = $4;
 $82 = $5;
 $83 = $6;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $7;
 _TStatement_CodePrint($81,$82,$85,$86);
 STACKTOP = sp;return;
}
function _TExpressionStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $7;
 _TExpression_CodePrint($8,$9,$12,9460,$13);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 8|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,1762);
 STACKTOP = sp;return;
}
function _TAsmStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $5;
 _Output_Append($8,$9,1479);
 STACKTOP = sp;return;
}
function _TStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 L1: do {
  if (!($9)) {
   $10 = $6;
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 17:  {
    $12 = $4;
    $13 = $5;
    $14 = $6;
    $15 = $7;
    _TExpressionStatement_CodePrint($12,$13,$14,$15);
    break L1;
    break;
   }
   case 18:  {
    $16 = $4;
    $17 = $5;
    $18 = $6;
    $19 = $7;
    _TSwitchStatement_CodePrint($16,$17,$18,$19);
    break L1;
    break;
   }
   case 19:  {
    $20 = $4;
    $21 = $5;
    $22 = $6;
    $23 = $7;
    _TLabeledStatement_CodePrint($20,$21,$22,$23);
    break L1;
    break;
   }
   case 20:  {
    $24 = $4;
    $25 = $5;
    $26 = $6;
    $27 = $7;
    _TForStatement_CodePrint($24,$25,$26,$27);
    break L1;
    break;
   }
   case 21:  {
    $28 = $4;
    $29 = $5;
    $30 = $6;
    $31 = $7;
    _TJumpStatement_CodePrint($28,$29,$30,$31);
    break L1;
    break;
   }
   case 22:  {
    $32 = $4;
    $33 = $5;
    $34 = $6;
    $35 = $7;
    _TAsmStatement_CodePrint($32,$33,$34,$35);
    break L1;
    break;
   }
   case 16:  {
    $36 = $4;
    $37 = $5;
    $38 = $6;
    $39 = $7;
    _TCompoundStatement_CodePrint($36,$37,$38,$39);
    break L1;
    break;
   }
   case 25:  {
    $40 = $4;
    $41 = $5;
    $42 = $6;
    $43 = $7;
    _TIfStatement_CodePrint($40,$41,$42,$43);
    break L1;
    break;
   }
   case 24:  {
    $44 = $4;
    $45 = $5;
    $46 = $6;
    $47 = $7;
    _TDoStatement_CodePrint($44,$45,$46,$47);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _DefaultFunctionDefinition_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $10 = sp + 236|0;
 $11 = sp + 224|0;
 $15 = sp + 276|0;
 $16 = sp + 275|0;
 $17 = sp + 200|0;
 $18 = sp + 188|0;
 $22 = sp + 136|0;
 $23 = sp + 274|0;
 $24 = sp + 273|0;
 $25 = sp + 120|0;
 $26 = sp + 108|0;
 $29 = sp + 56|0;
 $30 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $33 = $6;
 $34 = ((($33)) + 4|0);
 $8 = $34;
 $35 = $6;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_TDeclarator_GetName($38)|0);
 $9 = $39;
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $40 = $9;
 _GetPrefixSuffix($40,$10,$11);
 $41 = $6;
 $42 = (_TDeclaration_GetFunctionArguments($41)|0);
 $12 = $42;
 $43 = $12;
 $44 = (_TParameterTypeList_GetParameterByIndex($43,0)|0);
 $13 = $44;
 $45 = $12;
 $46 = (_TParameterTypeList_GetParameterByIndex($45,1)|0);
 $14 = $46;
 $47 = $9;
 $48 = (_IsSuffix($47,3785)|0);
 if ($48) {
  $49 = $5;
  $50 = ((($49)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 1)|0;
  HEAP32[$50>>2] = $52;
  $53 = $4;
  $54 = $5;
  $55 = $8;
  $56 = $6;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = $12;
  $61 = $7;
  _InstanciateDestroy2($53,$54,$55,$59,0,$60,2270,0,3,3,0,$61);
  $62 = $5;
  $63 = ((($62)) + 20|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -1)|0;
  HEAP32[$63>>2] = $65;
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $66 = $9;
 $67 = (_IsSuffix($66,3793)|0);
 $68 = $13;
 $69 = ($68|0)!=(0|0);
 $or$cond = $67 & $69;
 if ($or$cond) {
  $70 = $5;
  $71 = ((($70)) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + 1)|0;
  HEAP32[$71>>2] = $73;
  $74 = $4;
  $75 = $5;
  $76 = $13;
  $77 = ((($76)) + 4|0);
  $78 = $13;
  $79 = ((($78)) + 16|0);
  $80 = $12;
  $81 = $13;
  $82 = (_TParameter_GetName($81)|0);
  $83 = $7;
  _InstanciateDestroy2($74,$75,$77,$79,0,$80,$82,0,5,0,0,$83);
  $84 = $5;
  $85 = ((($84)) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + -1)|0;
  HEAP32[$85>>2] = $87;
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $88 = $9;
 $89 = (_IsSuffix($88,3799)|0);
 $90 = $13;
 $91 = ($90|0)!=(0|0);
 $or$cond3 = $89 & $91;
 if ($or$cond3) {
  $92 = $5;
  $93 = ((($92)) + 20|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 1)|0;
  HEAP32[$93>>2] = $95;
  $96 = $4;
  $97 = $5;
  $98 = $13;
  $99 = ((($98)) + 4|0);
  $100 = $13;
  $101 = ((($100)) + 16|0);
  $102 = $13;
  $103 = (_TParameter_GetName($102)|0);
  $104 = $7;
  _InstanciateDestroy2($96,$97,$99,$101,0,0,$103,0,1,0,0,$104);
  $105 = $5;
  $106 = ((($105)) + 20|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + -1)|0;
  HEAP32[$106>>2] = $108;
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $109 = $9;
 $110 = (_IsSuffix($109,3808)|0);
 $111 = $13;
 $112 = ($111|0)!=(0|0);
 $or$cond5 = $110 & $112;
 if ($or$cond5) {
  $113 = $5;
  $114 = ((($113)) + 20|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + 1)|0;
  HEAP32[$114>>2] = $116;
  $117 = $4;
  $118 = $5;
  $119 = $13;
  $120 = ((($119)) + 4|0);
  $121 = $13;
  $122 = ((($121)) + 16|0);
  $123 = $13;
  $124 = (_TParameter_GetName($123)|0);
  $125 = $7;
  _InstanciateDestroy2($117,$118,$120,$122,0,0,$124,0,2,2,0,$125);
  $126 = $5;
  $127 = ((($126)) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + -1)|0;
  HEAP32[$127>>2] = $129;
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $130 = $13;
 $131 = ($130|0)!=(0|0);
 $132 = $14;
 $133 = ($132|0)!=(0|0);
 $or$cond7 = $131 & $133;
 if ($or$cond7) {
  $134 = $9;
  $135 = (_IsSuffix($134,3816)|0);
  if ($135) {
   ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
   ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
   $136 = $4;
   $137 = $13;
   $138 = (_FindVectorStructPattern($136,$137,$15,$16,$17,$18)|0);
   if ($138) {
    $19 = 3825;
    $20 = 4016;
    $139 = HEAP8[$15>>0]|0;
    $140 = $139&1;
    $141 = $19;
    $142 = $20;
    $143 = $140 ? $141 : $142;
    $21 = $143;
    HEAP32[$22>>2] = 2270;
    $144 = ((($22)) + 4|0);
    $145 = $13;
    $146 = (_TParameter_GetName($145)|0);
    HEAP32[$144>>2] = $146;
    $147 = ((($22)) + 8|0);
    HEAP32[$147>>2] = 4204;
    $148 = ((($147)) + 4|0);
    $149 = $14;
    $150 = (_TParameter_GetName($149)|0);
    HEAP32[$148>>2] = $150;
    $151 = ((($147)) + 8|0);
    HEAP32[$151>>2] = 2295;
    $152 = ((($151)) + 4|0);
    $153 = HEAP32[$17>>2]|0;
    HEAP32[$152>>2] = $153;
    $154 = ((($151)) + 8|0);
    HEAP32[$154>>2] = 4214;
    $155 = ((($154)) + 4|0);
    $156 = HEAP32[$18>>2]|0;
    HEAP32[$155>>2] = $156;
    $157 = ((($154)) + 8|0);
    HEAP32[$157>>2] = 4219;
    $158 = ((($157)) + 4|0);
    $159 = $4;
    $160 = (_GetReallocStr($159)|0);
    HEAP32[$158>>2] = $160;
    $161 = $7;
    $162 = $21;
    _StrBuilder_Template($161,$162,$22,5,1);
   }
   _StrBuilder_Destroy($17);
   _StrBuilder_Destroy($18);
   _StrBuilder_Destroy($10);
   _StrBuilder_Destroy($11);
   STACKTOP = sp;return;
  }
 }
 $163 = $13;
 $164 = ($163|0)!=(0|0);
 $165 = $14;
 $166 = ($165|0)!=(0|0);
 $or$cond9 = $164 & $166;
 if ($or$cond9) {
  $167 = $9;
  $168 = (_IsSuffix($167,4227)|0);
  if ($168) {
   ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
   ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
   $169 = $4;
   $170 = $13;
   $171 = (_FindVectorStructPattern($169,$170,$23,$24,$25,$26)|0);
   $172 = $4;
   if ($171) {
    $173 = ((($172)) + 24|0);
    $174 = HEAP32[$10>>2]|0;
    $175 = (_SymbolMap_FindObjFunction($173,$174,4237)|0);
    $176 = ($175|0)!=(0|0);
    $177 = $176&1;
    $27 = $177;
    $28 = 9460;
    $178 = $27;
    $179 = $178&1;
    do {
     if ($179) {
      $28 = 4245;
     } else {
      $180 = HEAP8[$23>>0]|0;
      $181 = $180&1;
      if ($181) {
       $28 = 4410;
       break;
      } else {
       $28 = 4686;
       break;
      }
     }
    } while(0);
    HEAP32[$29>>2] = 2270;
    $182 = ((($29)) + 4|0);
    $183 = $13;
    $184 = (_TParameter_GetName($183)|0);
    HEAP32[$182>>2] = $184;
    $185 = ((($29)) + 8|0);
    HEAP32[$185>>2] = 4204;
    $186 = ((($185)) + 4|0);
    $187 = $14;
    $188 = (_TParameter_GetName($187)|0);
    HEAP32[$186>>2] = $188;
    $189 = ((($185)) + 8|0);
    HEAP32[$189>>2] = 2295;
    $190 = ((($189)) + 4|0);
    $191 = HEAP32[$25>>2]|0;
    HEAP32[$190>>2] = $191;
    $192 = ((($189)) + 8|0);
    HEAP32[$192>>2] = 4214;
    $193 = ((($192)) + 4|0);
    $194 = HEAP32[$26>>2]|0;
    HEAP32[$193>>2] = $194;
    $195 = ((($192)) + 8|0);
    HEAP32[$195>>2] = 4959;
    $196 = ((($195)) + 4|0);
    $197 = HEAP32[$10>>2]|0;
    HEAP32[$196>>2] = $197;
    $198 = ((($195)) + 8|0);
    HEAP32[$198>>2] = 4219;
    $199 = ((($198)) + 4|0);
    $200 = $4;
    $201 = (_GetReallocStr($200)|0);
    HEAP32[$199>>2] = $201;
    $202 = $7;
    $203 = $28;
    _StrBuilder_Template($202,$203,$29,6,1);
   } else {
    $204 = $13;
    $205 = (_FindListStructPattern($172,$204,$23,$24,$25,$26)|0);
    if ($205) {
     HEAP32[$30>>2] = 4966;
     $206 = ((($30)) + 4|0);
     $207 = $13;
     $208 = (_TParameter_GetName($207)|0);
     HEAP32[$206>>2] = $208;
     $209 = ((($30)) + 8|0);
     HEAP32[$209>>2] = 4972;
     $210 = ((($209)) + 4|0);
     $211 = $14;
     $212 = (_TParameter_GetName($211)|0);
     HEAP32[$210>>2] = $212;
     $213 = ((($209)) + 8|0);
     HEAP32[$213>>2] = 2295;
     $214 = ((($213)) + 4|0);
     $215 = HEAP32[$25>>2]|0;
     HEAP32[$214>>2] = $215;
     $216 = ((($213)) + 8|0);
     HEAP32[$216>>2] = 4214;
     $217 = ((($216)) + 4|0);
     $218 = HEAP32[$26>>2]|0;
     HEAP32[$217>>2] = $218;
     $219 = ((($216)) + 8|0);
     HEAP32[$219>>2] = 4959;
     $220 = ((($219)) + 4|0);
     $221 = HEAP32[$10>>2]|0;
     HEAP32[$220>>2] = $221;
     $222 = ((($219)) + 8|0);
     HEAP32[$222>>2] = 4978;
     $223 = ((($222)) + 4|0);
     $224 = $4;
     $225 = (_GetNullStr($224)|0);
     HEAP32[$223>>2] = $225;
     $31 = 4983;
     $226 = $7;
     $227 = $31;
     _StrBuilder_Template($226,$227,$30,6,1);
    }
   }
   _StrBuilder_Destroy($25);
   _StrBuilder_Destroy($26);
   _StrBuilder_Destroy($10);
   _StrBuilder_Destroy($11);
   STACKTOP = sp;return;
  }
 }
 $228 = $13;
 $229 = ($228|0)!=(0|0);
 if (!($229)) {
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $230 = $4;
 $231 = $13;
 $232 = ((($231)) + 4|0);
 $233 = (_GetStructSpecifier($230,$232)|0);
 $32 = $233;
 $234 = $32;
 $235 = ($234|0)!=(0|0);
 if (!($235)) {
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $236 = $32;
 $237 = ((($236)) + 24|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = ($238|0)==(116);
 if (!($239)) {
  _StrBuilder_Destroy($10);
  _StrBuilder_Destroy($11);
  STACKTOP = sp;return;
 }
 $240 = $5;
 $241 = ((($240)) + 20|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = (($242) + 1)|0;
 HEAP32[$241>>2] = $243;
 $244 = $4;
 $245 = $5;
 $246 = $32;
 $247 = ((($246)) + 16|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = $12;
 $250 = $13;
 $251 = (_TParameter_GetName($250)|0);
 $252 = HEAP32[$11>>2]|0;
 $253 = $7;
 _UnionTypeDefault($244,$245,$248,$249,$251,$252,$253);
 $254 = $5;
 $255 = ((($254)) + 20|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[$255>>2] = $257;
 _StrBuilder_Destroy($10);
 _StrBuilder_Destroy($11);
 STACKTOP = sp;return;
}
function _FindVectorStructPattern($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $26 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 $27 = $6;
 $28 = $7;
 $29 = ((($28)) + 4|0);
 $30 = (_GetStructSpecifier($27,$29)|0);
 $15 = $30;
 $31 = $15;
 $32 = ($31|0)!=(0|0);
 L1: do {
  if ($32) {
   $16 = 0;
   while(1) {
    $33 = $16;
    $34 = $15;
    $35 = ((($34)) + 4|0);
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($33|0)<($37|0);
    if (!($38)) {
     break L1;
    }
    $39 = $15;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $16;
    $43 = (($41) + ($42<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $17 = $44;
    $45 = $17;
    $46 = (_TAnyStructDeclaration_As_TStructDeclaration($45)|0);
    $18 = $46;
    $47 = $18;
    $48 = ($47|0)!=(0|0);
    L6: do {
     if ($48) {
      $49 = $18;
      $50 = ((($49)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $19 = $51;
      while(1) {
       $52 = $19;
       $53 = ($52|0)!=(0|0);
       if (!($53)) {
        break L6;
       }
       $54 = $19;
       $55 = HEAP32[$54>>2]|0;
       $56 = (_TDeclarator_GetName($55)|0);
       $20 = $56;
       $57 = $19;
       $58 = HEAP32[$57>>2]|0;
       $59 = (_TPointerList_IsPointerN($58,1)|0);
       $60 = $59&1;
       $21 = $60;
       $61 = $19;
       $62 = HEAP32[$61>>2]|0;
       $63 = (_TPointerList_IsPointerN($62,2)|0);
       $64 = $63&1;
       $22 = $64;
       $65 = $21;
       $66 = $65&1;
       do {
        if ($66) {
         label = 9;
        } else {
         $67 = $22;
         $68 = $67&1;
         if ($68) {
          label = 9;
         } else {
          $92 = $18;
          $93 = ((($92)) + 4|0);
          $94 = (_TSpecifierQualifierList_IsAnyInteger($93)|0);
          if ($94) {
           $95 = $20;
           $96 = (_strcmp($95,5107)|0);
           $97 = ($96|0)==(0);
           if ($97) {
            $13 = 1;
            break;
           }
           $98 = $20;
           $99 = (_strcmp($98,5112)|0);
           $100 = ($99|0)==(0);
           if ($100) {
            $14 = 1;
           }
          }
         }
        }
       } while(0);
       if ((label|0) == 9) {
        label = 0;
        $12 = 1;
        $69 = $11;
        $70 = $20;
        (_StrBuilder_Set($69,$70)|0);
        $71 = $19;
        $72 = HEAP32[$71>>2]|0;
        $73 = (_TPointerList_IsPointer($72)|0);
        $74 = $73&1;
        $23 = $74;
        $75 = $22;
        $76 = $75&1;
        $77 = $8;
        $78 = $76&1;
        HEAP8[$77>>0] = $78;
        $79 = $19;
        $80 = HEAP32[$79>>2]|0;
        $81 = (_TPointerList_IsAutoPointer($80)|0);
        $82 = $81&1;
        $24 = $82;
        $83 = $23;
        $84 = $83&1;
        $85 = $9;
        $86 = $84&1;
        HEAP8[$85>>0] = $86;
        $25 = 0;
        ;HEAP32[$26>>2]=HEAP32[912>>2]|0;HEAP32[$26+4>>2]=HEAP32[912+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[912+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[912+12>>2]|0;HEAP32[$26+16>>2]=HEAP32[912+16>>2]|0;HEAP32[$26+20>>2]=HEAP32[912+20>>2]|0;
        $87 = ((($26)) + 16|0);
        HEAP8[$87>>0] = 1;
        $88 = $6;
        $89 = $18;
        $90 = ((($89)) + 4|0);
        $91 = $10;
        _TSpecifierQualifierList_CodePrint($88,$26,$90,$91);
       }
       $101 = $19;
       $102 = ((($101)) + 8|0);
       $103 = HEAP32[$102>>2]|0;
       $19 = $103;
      }
     }
    } while(0);
    $104 = $16;
    $105 = (($104) + 1)|0;
    $16 = $105;
   }
  }
 } while(0);
 $106 = $13;
 $107 = $106&1;
 if (!($107)) {
  $112 = 0;
  STACKTOP = sp;return ($112|0);
 }
 $108 = $14;
 $109 = $108&1;
 if (!($109)) {
  $112 = 0;
  STACKTOP = sp;return ($112|0);
 }
 $110 = $12;
 $111 = $110&1;
 $112 = $111;
 STACKTOP = sp;return ($112|0);
}
function _GetReallocStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = (_SymbolMap_FindFunction($4,5121)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $12 = 1;
 } else {
  $7 = $1;
  $8 = ((($7)) + 40|0);
  $9 = (_MacroMap_Find($8,5121)|0);
  $10 = ($9|0)!=(0|0);
  $12 = $10;
 }
 $11 = $12&1;
 $2 = $11;
 $13 = $2;
 $14 = $13&1;
 $15 = $14 ? 5121 : 4219;
 STACKTOP = sp;return ($15|0);
}
function _FindListStructPattern($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $13 = 0;
 $22 = $6;
 $23 = $7;
 $24 = ((($23)) + 4|0);
 $25 = (_GetStructSpecifier($22,$24)|0);
 $14 = $25;
 $26 = $14;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $73 = $12;
  $74 = $73&1;
  $75 = $13;
  $76 = $75&1;
  $77 = $74 ? $76 : 0;
  STACKTOP = sp;return ($77|0);
 }
 $15 = 0;
 while(1) {
  $28 = $15;
  $29 = $14;
  $30 = ((($29)) + 4|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($28|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $14;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $15;
  $38 = (($36) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $16 = $39;
  $40 = $16;
  $41 = (_TAnyStructDeclaration_As_TStructDeclaration($40)|0);
  $17 = $41;
  $42 = $17;
  $43 = ($42|0)!=(0|0);
  L7: do {
   if ($43) {
    $44 = $17;
    $45 = ((($44)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $18 = $46;
    while(1) {
     $47 = $18;
     $48 = ($47|0)!=(0|0);
     if (!($48)) {
      break L7;
     }
     $49 = $18;
     $50 = HEAP32[$49>>2]|0;
     $51 = (_TDeclarator_GetName($50)|0);
     $19 = $51;
     $52 = $18;
     $53 = HEAP32[$52>>2]|0;
     $54 = (_TPointerList_IsPointerN($53,1)|0);
     $55 = $54&1;
     $20 = $55;
     $56 = $18;
     $57 = HEAP32[$56>>2]|0;
     $58 = (_TPointerList_IsPointerN($57,2)|0);
     $59 = $58&1;
     $21 = $59;
     $60 = $20;
     $61 = $60&1;
     if ($61) {
      $62 = $19;
      $63 = (_strcmp($62,5129)|0);
      $64 = ($63|0)==(0);
      if ($64) {
       $12 = 1;
      }
      $65 = $19;
      $66 = (_strcmp($65,5135)|0);
      $67 = ($66|0)==(0);
      if ($67) {
       $13 = 1;
      }
     }
     $68 = $18;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $18 = $70;
    }
   }
  } while(0);
  $71 = $15;
  $72 = (($71) + 1)|0;
  $15 = $72;
 }
 $73 = $12;
 $74 = $73&1;
 $75 = $13;
 $76 = $75&1;
 $77 = $74 ? $76 : 0;
 STACKTOP = sp;return ($77|0);
}
function _TInitializerList_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 4|0;
 $13 = sp + 40|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $10;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $10;
  $19 = HEAP32[$18>>2]|0;
  $20 = $10;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)==($22|0);
  if ($23) {
   $24 = $10;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
    HEAP8[$13>>0] = 0;
    $30 = $6;
    $31 = $7;
    $32 = $8;
    $33 = $9;
    _InstanciateDestroy2($30,$31,$32,$33,0,0,9460,0,6,0,$13,$12);
    $34 = HEAP8[$13>>0]|0;
    $35 = $34&1;
    $36 = $11;
    $37 = $7;
    if ($35) {
     $38 = HEAP32[$12>>2]|0;
     _Output_Append($36,$37,$38);
    } else {
     _Output_Append($36,$37,5141);
    }
    _StrBuilder_Destroy($12);
    STACKTOP = sp;return;
   }
  }
 }
 $39 = $10;
 $40 = HEAP32[$39>>2]|0;
 $14 = $40;
 while(1) {
  $41 = $14;
  $42 = ($41|0)!=(0|0);
  if (!($42)) {
   break;
  }
  $43 = $10;
  $44 = HEAP32[$43>>2]|0;
  $45 = $14;
  $46 = ($44|0)==($45|0);
  if (!($46)) {
   $47 = $11;
   $48 = $7;
   _Output_Append($47,$48,1445);
  }
  $49 = $6;
  $50 = $7;
  $51 = $9;
  $52 = $8;
  $53 = $14;
  $54 = $11;
  _TInitializerListItem_CodePrint($49,$50,$51,$52,$53,$54);
  $55 = $14;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $14 = $57;
 }
 STACKTOP = sp;return;
}
function _TInitializerListItem_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $10;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $6;
  $16 = $7;
  $17 = $10;
  $18 = $11;
  _TDesignatorList_CodePrint($15,$16,$17,$18);
 }
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $11;
 _TInitializer_CodePrint($19,$20,$21,$22,$25,$26);
 $27 = $7;
 $28 = $10;
 $29 = ((($28)) + 16|0);
 $30 = $11;
 _TNodeClueList_CodePrint($27,$29,$30);
 STACKTOP = sp;return;
}
function _TDesignatorList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 while(1) {
  $11 = $8;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = HEAP32[$13>>2]|0;
  $15 = $8;
  $16 = ($14|0)==($15|0);
  if (!($16)) {
   $17 = $7;
   $18 = $5;
   _Output_Append($17,$18,1445);
  }
  $19 = $4;
  $20 = $5;
  $21 = $8;
  $22 = $7;
  _TDesignator_CodePrint($19,$20,$21,$22);
  $23 = $8;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $8 = $25;
 }
 STACKTOP = sp;return;
}
function _TDesignator_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = $5;
 $12 = $6;
 $13 = ((($12)) + 12|0);
 $14 = $7;
 _TNodeClueList_CodePrint($11,$13,$14);
 if ($10) {
  $15 = $7;
  $16 = $5;
  _Output_Append($15,$16,6966);
  $17 = $7;
  $18 = $5;
  $19 = $6;
  $20 = HEAP32[$19>>2]|0;
  _Output_Append($17,$18,$20);
  $21 = $7;
  $22 = $5;
  _Output_Append($21,$22,1766);
  $23 = $4;
  $24 = $5;
  $25 = $6;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $7;
  _TExpression_CodePrint($23,$24,$27,1529,$28);
  STACKTOP = sp;return;
 } else {
  $29 = $4;
  $30 = $5;
  $31 = $6;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $7;
  _TExpression_CodePrint($29,$30,$33,1529,$34);
  $35 = $5;
  $36 = $6;
  $37 = ((($36)) + 20|0);
  $38 = $7;
  _TNodeClueList_CodePrint($35,$37,$38);
  STACKTOP = sp;return;
 }
}
function _TParameterList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 while(1) {
  $11 = $8;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = $8;
  $16 = $7;
  _TParameter_CodePrint($13,$14,$15,$16);
  $17 = $8;
  $18 = HEAP32[$17>>2]|0;
  $8 = $18;
 }
 STACKTOP = sp;return;
}
function _TParameter_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = $7;
 _TDeclarationSpecifiers_CodePrint($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 16|0);
 $17 = $7;
 _TDeclarator_CodePrint($13,$14,$16,1,$17);
 $18 = $6;
 $19 = ((($18)) + 44|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $5;
 $23 = $6;
 $24 = ((($23)) + 36|0);
 $25 = $7;
 _TNodeClueList_CodePrint($22,$24,$25);
 $26 = $7;
 $27 = $5;
 _Output_Append($26,$27,1445);
 STACKTOP = sp;return;
}
function _TUnionSet_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 8|0);
 $12 = $7;
 _TNodeClueList_CodePrint($9,$11,$12);
 $13 = $5;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $7;
  $18 = $5;
  _Output_Append($17,$18,5166);
 }
 $19 = $7;
 $20 = $5;
 _Output_Append($19,$20,1996);
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 16|0);
 $24 = $7;
 _TNodeClueList_CodePrint($21,$23,$24);
 $25 = $7;
 $26 = $5;
 _Output_Append($25,$26,1750);
 $27 = $6;
 $28 = HEAP32[$27>>2]|0;
 $8 = $28;
 while(1) {
  $29 = $8;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   break;
  }
  $31 = $4;
  $32 = $5;
  $33 = $8;
  $34 = $7;
  _TUnionSetItem_CodePrint($31,$32,$33,$34);
  $35 = $8;
  $36 = HEAP32[$35>>2]|0;
  $8 = $36;
 }
 $37 = $5;
 $38 = $6;
 $39 = ((($38)) + 24|0);
 $40 = $7;
 _TNodeClueList_CodePrint($37,$39,$40);
 $41 = $7;
 $42 = $5;
 _Output_Append($41,$42,1752);
 $43 = $5;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $7;
 $48 = $5;
 _Output_Append($47,$48,5171);
 STACKTOP = sp;return;
}
function _TAnyStructDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $cond = ($9|0)==(12);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 _TStructDeclaration_CodePrint($10,$11,$12,$13);
 STACKTOP = sp;return;
}
function _TUnionSetItem_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(112);
 if ($11) {
  $12 = $5;
  $13 = $6;
  $14 = ((($13)) + 16|0);
  $15 = $7;
  _TNodeClueList_CodePrint($12,$14,$15);
  $16 = $7;
  $17 = $5;
  _Output_Append($16,$17,1968);
 } else {
  $18 = $6;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(115);
  if ($21) {
   $22 = $5;
   $23 = $6;
   $24 = ((($23)) + 16|0);
   $25 = $7;
   _TNodeClueList_CodePrint($22,$24,$25);
   $26 = $7;
   $27 = $5;
   _Output_Append($26,$27,1990);
  }
 }
 $28 = $5;
 $29 = $6;
 $30 = ((($29)) + 24|0);
 $31 = $7;
 _TNodeClueList_CodePrint($28,$30,$31);
 $32 = $7;
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 _Output_Append($32,$33,$36);
 $37 = $6;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(50);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $5;
 $42 = $6;
 $43 = ((($42)) + 32|0);
 $44 = $7;
 _TNodeClueList_CodePrint($41,$43,$44);
 $45 = $7;
 $46 = $5;
 _Output_Append($45,$46,1782);
 STACKTOP = sp;return;
}
function _TStructDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = $7;
 _TSpecifierQualifierList_CodePrint($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = $6;
 $18 = ((($17)) + 16|0);
 $19 = $7;
 _TStructDeclaratorList_CodePrint($13,$14,$16,$18,$19);
 $20 = $5;
 $21 = $6;
 $22 = ((($21)) + 24|0);
 $23 = $7;
 _TNodeClueList_CodePrint($20,$22,$23);
 $24 = $7;
 $25 = $5;
 _Output_Append($24,$25,1762);
 STACKTOP = sp;return;
}
function _TStructDeclaratorList_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $8;
 $12 = HEAP32[$11>>2]|0;
 $10 = $12;
 while(1) {
  $13 = $10;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $8;
  $16 = HEAP32[$15>>2]|0;
  $17 = $10;
  $18 = ($16|0)==($17|0);
  if (!($18)) {
   $19 = $6;
   $20 = $10;
   $21 = ((($20)) + 12|0);
   $22 = $9;
   _TNodeClueList_CodePrint($19,$21,$22);
   $23 = $9;
   $24 = $6;
   _Output_Append($23,$24,1445);
  }
  $25 = $5;
  $26 = $6;
  $27 = $7;
  $28 = $10;
  $29 = $9;
  _TStructDeclarator_CodePrint($25,$26,$27,$28,$29);
  $30 = $10;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $10 = $32;
 }
 STACKTOP = sp;return;
}
function _TEnumerator_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _Output_Append($12,$13,$16);
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $5;
  $22 = $6;
  $23 = ((($22)) + 20|0);
  $24 = $7;
  _TNodeClueList_CodePrint($21,$23,$24);
  $25 = $7;
  $26 = $5;
  _Output_Append($25,$26,1766);
  $27 = $4;
  $28 = $5;
  $29 = $6;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $7;
  _TExpression_CodePrint($27,$28,$31,1469,$32);
 }
 $33 = $6;
 $34 = ((($33)) + 36|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $5;
 $38 = $6;
 $39 = ((($38)) + 28|0);
 $40 = $7;
 _TNodeClueList_CodePrint($37,$39,$40);
 $41 = $7;
 $42 = $5;
 _Output_Append($41,$42,1445);
 STACKTOP = sp;return;
}
function _TInitializerListType_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $13 = sp;
 $14 = sp + 40|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $10;
 $16 = ((($15)) + 36|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if (!($18)) {
  $19 = $10;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $66 = $7;
   $67 = $10;
   $68 = ((($67)) + 20|0);
   $69 = $11;
   _TNodeClueList_CodePrint($66,$68,$69);
   $70 = $11;
   $71 = $7;
   _Output_Append($70,$71,1502);
   $72 = $6;
   $73 = $7;
   $74 = $9;
   $75 = $8;
   $76 = $10;
   $77 = ((($76)) + 4|0);
   $78 = $11;
   _TInitializerList_CodePrint($72,$73,$74,$75,$77,$78);
   $79 = $7;
   $80 = $10;
   $81 = ((($80)) + 28|0);
   $82 = $11;
   _TNodeClueList_CodePrint($79,$81,$82);
   $83 = $11;
   $84 = $7;
   _Output_Append($83,$84,1449);
   STACKTOP = sp;return;
  }
 }
 $23 = $7;
 $24 = $10;
 $25 = ((($24)) + 20|0);
 $26 = $11;
 _TNodeClueList_CodePrint($23,$25,$26);
 $12 = 0;
 $27 = $7;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(2);
 $31 = $7;
 if ($30) {
  $32 = $10;
  $33 = ((($32)) + 20|0);
  $34 = $11;
  _TNodeClueList_CodePrint($31,$33,$34);
  $35 = $11;
  $36 = $7;
  _Output_Append($35,$36,1502);
  $37 = $7;
  $38 = $10;
  $39 = ((($38)) + 28|0);
  $40 = $11;
  _TNodeClueList_CodePrint($37,$39,$40);
  $41 = $11;
  $42 = $7;
  _Output_Append($41,$42,1449);
  STACKTOP = sp;return;
 }
 $43 = ((($31)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $10;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $7;
  $51 = $10;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 16|0);
  $55 = $11;
  _TNodeClueList_CodePrint($50,$54,$55);
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 HEAP8[$14>>0] = 0;
 $56 = $6;
 $57 = $7;
 $58 = $9;
 $59 = $8;
 $60 = $12;
 _InstanciateDestroy2($56,$57,$58,$59,$60,0,9460,0,6,0,$14,$13);
 $61 = HEAP8[$14>>0]|0;
 $62 = $61&1;
 $63 = $11;
 $64 = $7;
 if ($62) {
  $65 = HEAP32[$13>>2]|0;
  _Output_Append($63,$64,$65);
 } else {
  _Output_Append($63,$64,5141);
 }
 _StrBuilder_Destroy($13);
 STACKTOP = sp;return;
}
function _TGroupDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = sp + 76|0;
 $10 = sp + 64|0;
 $15 = sp + 36|0;
 $17 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $18 = $5;
 $19 = $6;
 $20 = ((($19)) + 20|0);
 $21 = $7;
 _TNodeClueList_CodePrint($18,$20,$21);
 $22 = $7;
 $23 = $5;
 _Output_Append($22,$23,5175);
 $24 = $5;
 $25 = $6;
 $26 = ((($25)) + 28|0);
 $27 = $7;
 _TNodeClueList_CodePrint($24,$26,$27);
 $28 = $7;
 $29 = $5;
 $30 = $6;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 _Output_Append($28,$29,$32);
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 36|0);
 $36 = $7;
 _TNodeClueList_CodePrint($33,$35,$36);
 $37 = $7;
 $38 = $5;
 _Output_Append($37,$38,1443);
 $39 = $4;
 $40 = ((($39)) + 24|0);
 $41 = $6;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_SymbolMap_FindFunction($40,$43)|0);
 $8 = $44;
 $45 = $8;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $4;
  $48 = $5;
  $49 = $8;
  $50 = $7;
  _TDeclaration_CodePrint($47,$48,$49,$50);
  $118 = $7;
  $119 = $5;
  _Output_Append($118,$119,5779);
  STACKTOP = sp;return;
 }
 ;HEAP32[$9>>2]=HEAP32[900>>2]|0;HEAP32[$9+4>>2]=HEAP32[900+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[900+8>>2]|0;
 $51 = $4;
 $52 = $6;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 _FindUnionSetOf($51,$54,$9);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $55 = $4;
 $56 = $6;
 $57 = ((($56)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_FindRuntimeID($55,$58,$10)|0);
 $11 = $59;
 $12 = 0;
 while(1) {
  $60 = $12;
  $61 = ((($9)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = HEAP32[$9>>2]|0;
  $65 = $12;
  $66 = (($64) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   $69 = HEAP32[$9>>2]|0;
   $70 = $12;
   $71 = (($69) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $13 = $74;
   $75 = $6;
   $76 = ((($75)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $14 = $77;
   ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
   $78 = $4;
   $79 = $13;
   $80 = (_FindIDValue($78,$79,$15)|0);
   $16 = $80;
   HEAP32[$17>>2] = 5197;
   $81 = ((($17)) + 4|0);
   $82 = $14;
   HEAP32[$81>>2] = $82;
   $83 = ((($17)) + 8|0);
   HEAP32[$83>>2] = 5202;
   $84 = ((($83)) + 4|0);
   $85 = $13;
   HEAP32[$84>>2] = $85;
   $86 = ((($83)) + 8|0);
   HEAP32[$86>>2] = 2272;
   $87 = ((($86)) + 4|0);
   $88 = HEAP32[$10>>2]|0;
   HEAP32[$87>>2] = $88;
   $89 = ((($86)) + 8|0);
   HEAP32[$89>>2] = 5210;
   $90 = ((($89)) + 4|0);
   $91 = HEAP32[$15>>2]|0;
   HEAP32[$90>>2] = $91;
   $92 = HEAP32[$9>>2]|0;
   $93 = $12;
   $94 = (($92) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97;
   $99 = ($98|0)==(2);
   do {
    if ($99) {
     $100 = $11;
     $101 = ($100|0)==(2);
     if ($101) {
      $102 = $7;
      $103 = $5;
      $104 = ((($103)) + 20|0);
      $105 = HEAP32[$104>>2]|0;
      _StrBuilder_Template($102,5218,$17,4,$105);
      break;
     }
     $106 = $11;
     $107 = ($106|0)==(2);
     $108 = $7;
     $109 = $5;
     $110 = ((($109)) + 20|0);
     $111 = HEAP32[$110>>2]|0;
     if ($107) {
      _StrBuilder_Template($108,5218,$17,4,$111);
      break;
     } else {
      _StrBuilder_Template($108,5426,$17,4,$111);
      break;
     }
    } else {
     $112 = $7;
     $113 = $5;
     $114 = ((($113)) + 20|0);
     $115 = HEAP32[$114>>2]|0;
     _StrBuilder_Template($112,5613,$17,4,$115);
    }
   } while(0);
   _StrBuilder_Destroy($15);
  }
  $116 = $12;
  $117 = (($116) + 1)|0;
  $12 = $117;
 }
 _Map2_Destroy($9,0);
 _StrBuilder_Destroy($10);
 $118 = $7;
 $119 = $5;
 _Output_Append($118,$119,5779);
 STACKTOP = sp;return;
}
function _TEofDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 STACKTOP = sp;return;
}
function _TStaticAssertDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,5805);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 20|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,1750);
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _TExpression_CodePrint($20,$21,$24,9460,$25);
 $26 = $7;
 $27 = $5;
 _Output_Append($26,$27,1445);
 $28 = $5;
 $29 = $6;
 $30 = ((($29)) + 28|0);
 $31 = $7;
 _TNodeClueList_CodePrint($28,$30,$31);
 $32 = $5;
 $33 = $6;
 $34 = ((($33)) + 36|0);
 $35 = $7;
 _TNodeClueList_CodePrint($32,$34,$35);
 $36 = $7;
 $37 = $5;
 $38 = $6;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 _Output_Append($36,$37,$40);
 $41 = $5;
 $42 = $6;
 $43 = ((($42)) + 44|0);
 $44 = $7;
 _TNodeClueList_CodePrint($41,$43,$44);
 $45 = $7;
 $46 = $5;
 _Output_Append($45,$46,1752);
 $47 = $5;
 $48 = $6;
 $49 = ((($48)) + 52|0);
 $50 = $7;
 _TNodeClueList_CodePrint($47,$49,$50);
 $51 = $7;
 $52 = $5;
 _Output_Append($51,$52,1762);
 STACKTOP = sp;return;
}
function _GetName() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[9461] = 0;
 return (9461|0);
}
function _AddStandardMacro($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = (_Macro_Create()|0);
 $6 = $7;
 $8 = $6;
 $9 = $4;
 _String_Set($8,$9);
 $10 = $6;
 $11 = ((($10)) + 8|0);
 $12 = $5;
 $13 = (_PPToken_Create($12,6)|0);
 _TokenArray_PushBack($11,$13);
 $14 = $6;
 $15 = ((($14)) + 32|0);
 HEAP32[$15>>2] = 0;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 $18 = $4;
 $19 = $6;
 (_MacroMap_SetAt($17,$18,$19)|0);
 STACKTOP = sp;return 1;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[2221]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (8924 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[2221] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(8892)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (8924 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[2221] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(8904)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (8924 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[2221] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(8892)>>2] = $76;
     HEAP32[(8904)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(8888)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (9188 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (9188 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(8888)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(8904)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (8924 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[2221] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(8892)>>2] = $$0173$lcssa$i;
       HEAP32[(8904)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(8888)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (9188 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (9188 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(8892)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (9188 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(8888)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (8924 + ($388<<2)|0);
          $390 = HEAP32[2221]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[2221] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (9188 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(8888)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(8892)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(8904)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(8904)>>2] = $467;
   HEAP32[(8892)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(8892)>>2] = 0;
   HEAP32[(8904)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(8896)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(8896)>>2] = $482;
  $483 = HEAP32[(8908)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(8908)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[2339]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(9364)>>2] = 4096;
  HEAP32[(9360)>>2] = 4096;
  HEAP32[(9368)>>2] = -1;
  HEAP32[(9372)>>2] = -1;
  HEAP32[(9376)>>2] = 0;
  HEAP32[(9328)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[2339] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(9364)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(9324)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(9316)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(9328)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(8908)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (9332);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(9360)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(9316)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(9324)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(9364)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(9328)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(9328)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(9316)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(9316)>>2] = $583;
  $584 = HEAP32[(9320)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(9320)>>2] = $583;
  }
  $586 = HEAP32[(8908)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(8900)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(8900)>>2] = $$748$i;
    }
    HEAP32[(9332)>>2] = $$748$i;
    HEAP32[(9336)>>2] = $$723947$i;
    HEAP32[(9344)>>2] = 0;
    $591 = HEAP32[2339]|0;
    HEAP32[(8920)>>2] = $591;
    HEAP32[(8916)>>2] = -1;
    HEAP32[(8936)>>2] = (8924);
    HEAP32[(8932)>>2] = (8924);
    HEAP32[(8944)>>2] = (8932);
    HEAP32[(8940)>>2] = (8932);
    HEAP32[(8952)>>2] = (8940);
    HEAP32[(8948)>>2] = (8940);
    HEAP32[(8960)>>2] = (8948);
    HEAP32[(8956)>>2] = (8948);
    HEAP32[(8968)>>2] = (8956);
    HEAP32[(8964)>>2] = (8956);
    HEAP32[(8976)>>2] = (8964);
    HEAP32[(8972)>>2] = (8964);
    HEAP32[(8984)>>2] = (8972);
    HEAP32[(8980)>>2] = (8972);
    HEAP32[(8992)>>2] = (8980);
    HEAP32[(8988)>>2] = (8980);
    HEAP32[(9000)>>2] = (8988);
    HEAP32[(8996)>>2] = (8988);
    HEAP32[(9008)>>2] = (8996);
    HEAP32[(9004)>>2] = (8996);
    HEAP32[(9016)>>2] = (9004);
    HEAP32[(9012)>>2] = (9004);
    HEAP32[(9024)>>2] = (9012);
    HEAP32[(9020)>>2] = (9012);
    HEAP32[(9032)>>2] = (9020);
    HEAP32[(9028)>>2] = (9020);
    HEAP32[(9040)>>2] = (9028);
    HEAP32[(9036)>>2] = (9028);
    HEAP32[(9048)>>2] = (9036);
    HEAP32[(9044)>>2] = (9036);
    HEAP32[(9056)>>2] = (9044);
    HEAP32[(9052)>>2] = (9044);
    HEAP32[(9064)>>2] = (9052);
    HEAP32[(9060)>>2] = (9052);
    HEAP32[(9072)>>2] = (9060);
    HEAP32[(9068)>>2] = (9060);
    HEAP32[(9080)>>2] = (9068);
    HEAP32[(9076)>>2] = (9068);
    HEAP32[(9088)>>2] = (9076);
    HEAP32[(9084)>>2] = (9076);
    HEAP32[(9096)>>2] = (9084);
    HEAP32[(9092)>>2] = (9084);
    HEAP32[(9104)>>2] = (9092);
    HEAP32[(9100)>>2] = (9092);
    HEAP32[(9112)>>2] = (9100);
    HEAP32[(9108)>>2] = (9100);
    HEAP32[(9120)>>2] = (9108);
    HEAP32[(9116)>>2] = (9108);
    HEAP32[(9128)>>2] = (9116);
    HEAP32[(9124)>>2] = (9116);
    HEAP32[(9136)>>2] = (9124);
    HEAP32[(9132)>>2] = (9124);
    HEAP32[(9144)>>2] = (9132);
    HEAP32[(9140)>>2] = (9132);
    HEAP32[(9152)>>2] = (9140);
    HEAP32[(9148)>>2] = (9140);
    HEAP32[(9160)>>2] = (9148);
    HEAP32[(9156)>>2] = (9148);
    HEAP32[(9168)>>2] = (9156);
    HEAP32[(9164)>>2] = (9156);
    HEAP32[(9176)>>2] = (9164);
    HEAP32[(9172)>>2] = (9164);
    HEAP32[(9184)>>2] = (9172);
    HEAP32[(9180)>>2] = (9172);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(8908)>>2] = $600;
    HEAP32[(8896)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(9372)>>2]|0;
    HEAP32[(8912)>>2] = $606;
   } else {
    $$024367$i = (9332);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(8896)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(8908)>>2] = $631;
       HEAP32[(8896)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(9372)>>2]|0;
       HEAP32[(8912)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(8900)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(8900)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (9332);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (9332);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(8896)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(8896)>>2] = $678;
        HEAP32[(8908)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(8904)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(8892)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(8892)>>2] = $684;
         HEAP32[(8904)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[2221]|0;
            $703 = $702 & $701;
            HEAP32[2221] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (9188 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(8888)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(8888)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (8924 + ($763<<2)|0);
         $765 = HEAP32[2221]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[2221] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (9188 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(8888)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(8888)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (9332);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(8908)>>2] = $866;
    HEAP32[(8896)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(9372)>>2]|0;
    HEAP32[(8912)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(9332)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(9332)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(9332)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(9332)+12>>2]|0;
    HEAP32[(9332)>>2] = $$748$i;
    HEAP32[(9336)>>2] = $$723947$i;
    HEAP32[(9344)>>2] = 0;
    HEAP32[(9340)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (8924 + ($888<<2)|0);
      $890 = HEAP32[2221]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[2221] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (9188 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(8888)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(8888)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(8896)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(8896)>>2] = $963;
   $964 = HEAP32[(8908)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(8908)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(8900)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(8904)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    }
    HEAP32[(8892)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[2221]|0;
     $29 = $28 & $27;
     HEAP32[2221] = $29;
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (9188 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(8888)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(8888)>>2] = $62;
      $$1 = $14;$$1347 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(8908)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(8896)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(8896)>>2] = $98;
   HEAP32[(8908)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(8904)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(8904)>>2] = 0;
   HEAP32[(8892)>>2] = 0;
   return;
  }
  $103 = HEAP32[(8904)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(8892)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(8892)>>2] = $106;
   HEAP32[(8904)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[2221]|0;
     $122 = $121 & $120;
     HEAP32[2221] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (9188 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(8888)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(8888)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(8904)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(8892)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (8924 + ($183<<2)|0);
  $185 = HEAP32[2221]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[2221] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (9188 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(8888)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(8888)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(8916)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(8916)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (9340);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(8916)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(9364)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(8908)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(8896)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(8908)>>2] = $33;
  HEAP32[(8896)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(8904)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(8892)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(8892)>>2] = $storemerge1;
  HEAP32[(8904)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[2221]|0;
    $81 = $80 & $79;
    HEAP32[2221] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (9188 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(8888)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(8888)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(8904)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(8892)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[2221]|0;
     $25 = $24 & $23;
     HEAP32[2221] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (9188 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(8888)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(8888)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(8908)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(8896)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(8896)>>2] = $89;
   HEAP32[(8908)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(8904)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(8904)>>2] = 0;
   HEAP32[(8892)>>2] = 0;
   return;
  }
  $94 = HEAP32[(8904)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(8892)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(8892)>>2] = $97;
   HEAP32[(8904)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[2221]|0;
     $113 = $112 & $111;
     HEAP32[2221] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (9188 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(8888)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(8888)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(8904)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(8892)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (8924 + ($174<<2)|0);
  $176 = HEAP32[2221]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[2221] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (9188 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(8888)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(8888)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_737($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9444|0);
}
function _dummy_737($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 10;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtox_767($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 $11 = $4;
 $12 = $6;
 $13 = (($12) + ($1)|0);
 $$sink = $or$cond ? $13 : $11;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165167 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((6169) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165167 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((6169) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($$166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $92 = ($93|0)<(0);
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165168 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$263 = $103;$265 = $102;
       } else {
        $$1165168 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$263 = $292;$265 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165167 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165167) + -1)|0;
     $120 = $119 & $$1165167;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165167*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (6425 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((6169) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($$1165167>>>0)>($134>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((6169) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($$1165167>>>0)>($148>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($$1165167>>>0)<=($154>>>0);
      $157 = ($153>>>0)<($158>>>0);
      $159 = ($152>>>0)<($160>>>0);
      $161 = ($153|0)==($158|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165168 = $$1165167;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $166 | $168;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((6169) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($$1165167>>>0)<=($180>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165168 = $$1165167;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((6169) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($$1165167>>>0)>($124>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165167)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((6169) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($$1165167>>>0)>($199>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($$1165167>>>0)>($203>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165167|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$209 = $296;$211 = $295;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165167|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((6169) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($$1165167>>>0)>($236>>>0);
       if ($237) {
        $$7198 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165168 = $$1165167;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165168 = $$1165167;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((6169) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($$1165168>>>0)>($240>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((6169) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($$1165168>>>0)>($251>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $294;$265 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$pre30 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$sink = $$pre;$26 = $$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$sink = $21;$26 = $21;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$sink = $23;$26 = $21;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   $$phi$trans$insert29 = ((($0)) + 4|0);
   if ($25) {
    $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
    $36 = $$pre30;
   } else {
    $27 = HEAP32[$$phi$trans$insert29>>2]|0;
    $28 = $26;
    $29 = ((($0)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($7|0)==($38|0);
   if ($39) {
    $$0 = $7;
   } else {
    $40 = $7&255;
    HEAP8[$35>>0] = $40;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_767($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$10 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $9 = ($10<<24>>24)==($6<<24>>24);
     $or$cond21 = $9 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $10;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$10 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=1068; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((6434 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 6898;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$281 = $244;$283 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 6898;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 6898 : (6900);
     $$$ = $270 ? $$ : (6899);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 6898;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 6898;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 6908;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad_673($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 6898;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (6898 + ($240)|0);
    $$286 = $or$cond278 ? 6898 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$281 = $229;$283 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$281 = $275;$283 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 6898;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad_673($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $280 = ($281|0)!=(0);
   $282 = ($283|0)!=(0);
   $284 = $280 | $282;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad_673($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad_673($0,32,$$2261,$345,$$6268);
  _out($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad_673($0,48,$$2261,$345,$347);
  _pad_673($0,48,$$$5,$343,0);
  _out($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad_673($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (6950 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_107()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_673($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_674($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 6915;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (6916) : (6921);
  $$$ = $16 ? $$ : (6918);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_674($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 6934 : 6938;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 6942 : 6946;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad_673($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad_673($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (6950 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad_673($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad_673($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad_673($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad_673($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$124 = $$pr;
    while(1) {
     $123 = ($124|0)<(29);
     $125 = $123 ? $124 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$124 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad_673($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad_673($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,6966,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad_673($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,6966,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad_673($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad_673($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_674($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_447()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_447() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1192|0);
}
function ___pthread_self_107() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (6968 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 7056;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 7056;
  } else {
   $$01214 = 7056;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($$|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer2|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer6>>2] = $9;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer6|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=8860; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $scevgep = ((($0)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $3 = ((($0)) + 15|0);
  HEAP8[$3>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $4 = (($$027>>>0) / 10)&-1;
   $5 = (($$126) + 1)|0;
   $6 = ($$027>>>0)<(10);
   if ($6) {
    break;
   } else {
    $$027 = $4;$$126 = $5;
   }
  }
  $7 = (($0) + ($5)|0);
  HEAP8[$7>>0] = 0;
  $$02324 = $1;$$225 = $5;
  while(1) {
   $8 = (($$02324>>>0) % 10)&-1;
   $9 = $8 | 48;
   $10 = $9&255;
   $11 = (($$225) + -1)|0;
   $12 = (($0) + ($11)|0);
   HEAP8[$12>>0] = $10;
   $13 = (($$02324>>>0) / 10)&-1;
   $14 = ($$02324>>>0)<(10);
   if ($14) {
    break;
   } else {
    $$02324 = $13;$$225 = $11;
   }
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_606()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_606() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(8875,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $$0$ = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $$0$ | 524288;
 $$2 = $9 ? $$0$ : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $$2$ = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $$2$ | 512;
 $$4 = $13 ? $14 : $$2$;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $$$4 = $15 ? $16 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(8875,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 11;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 10;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 3;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(9384)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((9448|0));
 return (9456|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((9448|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[266]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[266]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _ferror($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 5;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 5;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 15]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 15]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _realpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4304|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 96|0;
 $3 = sp + 20|0;
 $4 = sp + 4272|0;
 $5 = sp + 176|0;
 $6 = ($0|0)==(0|0);
 do {
  if ($6) {
   $7 = (___errno_location()|0);
   HEAP32[$7>>2] = 22;
   $$0 = 0;
  } else {
   $8 = $0;
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2656256;
   $9 = (___syscall5(5,($vararg_buffer|0))|0);
   $10 = (___syscall_ret($9)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    $$0 = 0;
   } else {
    ___procfdname($4,$10);
    $12 = (_readlink($4,$5,4095)|0);
    $13 = ($12|0)<(0);
    if (!($13)) {
     $14 = (($5) + ($12)|0);
     HEAP8[$14>>0] = 0;
     (_fstat($10,$2)|0);
     $15 = (_stat($5,$3)|0);
     $16 = ($15|0)<(0);
     if (!($16)) {
      $17 = HEAP32[$2>>2]|0;
      $18 = HEAP32[$3>>2]|0;
      $19 = ($17|0)==($18|0);
      if ($19) {
       $20 = ((($2)) + 72|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ((($3)) + 72|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($21|0)==($23|0);
       if ($24) {
        HEAP32[$vararg_buffer2>>2] = $10;
        (___syscall6(6,($vararg_buffer2|0))|0);
        $27 = ($1|0)==(0|0);
        if ($27) {
         $29 = (___strdup($5)|0);
         $$0 = $29;
         break;
        } else {
         $28 = (_strcpy($1,$5)|0);
         $$0 = $1;
         break;
        }
       }
      }
      $25 = ($15|0)==(0);
      if ($25) {
       $26 = (___errno_location()|0);
       HEAP32[$26>>2] = 40;
      }
     }
    }
    HEAP32[$vararg_buffer5>>2] = $10;
    (___syscall6(6,($vararg_buffer5|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readlink($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $5 = (___syscall85(85,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$03866 = 0, $$039$lcssa = 0, $$03965 = 0, $$041$lcssa = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0, $$243 = 0, $$247 = 0, $$3 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond63 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   if ($or$cond63) {
    $$03866 = $2;$$03965 = $1;$$04164 = $0;
    while(1) {
     $11 = HEAP8[$$03965>>0]|0;
     HEAP8[$$04164>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$243 = $$04164;$$3 = $$03866;
      break L1;
     }
     $13 = (($$03866) + -1)|0;
     $14 = ((($$03965)) + 1|0);
     $15 = ((($$04164)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03866 = $13;$$03965 = $14;$$04164 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$243 = $$041$lcssa;$$3 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L10: do {
      if ($21) {
       $$03753 = $$041$lcssa;$$054 = $$039$lcssa;$$152 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$054>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
         break L10;
        }
        HEAP32[$$03753>>2] = $22;
        $28 = (($$152) + -4)|0;
        $29 = ((($$054)) + 4|0);
        $30 = ((($$03753)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03753 = $30;$$054 = $29;$$152 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$041$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
     label = 11;
    }
   } else {
    $$243 = $$041$lcssa;$$3 = 0;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $32 = ($$2$ph|0)==(0);
   if ($32) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $33 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$243 = $$14245;$$3 = $$247;
      break L15;
     }
     $35 = (($$247) + -1)|0;
     $36 = ((($$14046)) + 1|0);
     $37 = ((($$14245)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$243 = $37;$$3 = 0;
      break;
     } else {
      $$14046 = $36;$$14245 = $37;$$247 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$243|0),0,($$3|0))|0);
 return ($$243|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 15]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $37 = $9;
 } else {
  $37 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$57 = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$57|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$57)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$57)|0);
  $27 = (($4) - ($$57))|0;
  $$054$ph = $27;$$056$ph = $26;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $28 = ($$054$ph|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 15]($3,$$05659,$$05460)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$05460) - ($33))|0;
    $41 = (($$05659) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$05460 = $40;$$05659 = $41;
    }
   }
   $36 = ($37|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$05460))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($37|0)==(0);
  if ($43) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[234]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11214 = 0, $$neg13 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$9 = $6;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$9 = $$pre;
 }
 $8 = $9 << 24 >> 24;
 $10 = (_isdigit($8)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$11214 = $$112$ph;
  while(1) {
   $12 = ($$01015*10)|0;
   $13 = ((($$11214)) + 1|0);
   $14 = HEAP8[$$11214>>0]|0;
   $15 = $14 << 24 >> 24;
   $$neg13 = (($12) + 48)|0;
   $16 = (($$neg13) - ($15))|0;
   $17 = HEAP8[$13>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = (_isdigit($18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$010$lcssa = $16;
    break;
   } else {
    $$01015 = $16;$$11214 = $13;
   }
  }
 }
 $21 = ($$1$ph|0)!=(0);
 $22 = (0 - ($$010$lcssa))|0;
 $23 = $21 ? $$010$lcssa : $22;
 return ($23|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&15](a1|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,b1,___stdout_write,___stdio_seek,_sn_write,b1,b1,b1,b1,b1,___stdio_write,___stdio_read,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,_Array_DeleteStrVoid,_Macro_DeleteVoid,_PPToken_DeleteVoid,_TokenArray_DeleteVoid,_TFile_DeleteVoid,b2,b2,b2,b2,b2,b2];

  return { _CompileText: _CompileText, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__CompileText = asm["_CompileText"]; asm["_CompileText"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__CompileText.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _CompileText = Module["_CompileText"] = asm["_CompileText"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



